!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(S,e){"use strict";function m(e){return null!=e&&e===e.window}var t=[],C=S.document,n=Object.getPrototypeOf,a=t.slice,g=t.concat,l=t.push,o=t.indexOf,i={},r=i.toString,v=i.hasOwnProperty,s=v.toString,u=s.call(Object),y={},w=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,i){var n,o,r=(i=i||C).createElement("script");if(r.text=e,t)for(n in c)(o=t[n]||t.getAttribute&&t.getAttribute(n))&&r.setAttribute(n,o);i.head.appendChild(r).parentNode.removeChild(r)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[r.call(e)]||"object":typeof e}var d="3.4.1",k=function(e,t){return new k.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function f(e){var t=!!e&&"length"in e&&e.length,i=x(e);return!w(e)&&!m(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:d,constructor:k,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(i){return this.pushStack(k.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,i,n,o,r,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||w(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=e[t],"__proto__"!==t&&s!==n&&(u&&n&&(k.isPlainObject(n)||(o=Array.isArray(n)))?(i=s[t],r=o&&!Array.isArray(i)?[]:o||k.isPlainObject(i)?i:{},o=!1,s[t]=k.extend(u,r,n)):void 0!==n&&(s[t]=n));return s},k.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==r.call(e))&&(!(t=n(e))||"function"==typeof(i=v.call(t,"constructor")&&t.constructor)&&s.call(i)===u)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var i,n=0;if(f(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(f(Object(e))?k.merge(i,"string"==typeof e?[e]:e):l.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:o.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,o=e.length;n<i;n++)e[o++]=t[n];return e.length=o,e},grep:function(e,t,i){for(var n=[],o=0,r=e.length,s=!i;o<r;o++)!t(e[o],o)!=s&&n.push(e[o]);return n},map:function(e,t,i){var n,o,r=0,s=[];if(f(e))for(n=e.length;r<n;r++)null!=(o=t(e[r],r,i))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,i))&&s.push(o);return g.apply([],s)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var h=function(i){function d(e,t,i){var n="0x"+t-65536;return n!=n||i?t:n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320)}function o(){T()}var e,f,b,r,s,h,p,m,x,l,u,T,S,a,C,g,c,v,y,k="sizzle"+1*new Date,w=i.document,E=0,n=0,I=le(),A=le(),$=le(),L=le(),z=function(e,t){return e===t&&(u=!0),0},_={}.hasOwnProperty,t=[],O=t.pop,H=t.push,j=t.push,D=t.slice,P=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",W="\\["+N+"*("+q+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+N+"*\\]",R=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",B=new RegExp(N+"+","g"),F=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),U=new RegExp("^"+N+"*,"+N+"*"),Y=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),X=new RegExp(N+"|>"),G=new RegExp(R),V=new RegExp("^"+q+"$"),Q={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ie=/[+~]/,ne=new RegExp("\\\\([\\da-f]{1,6}"+N+"?|("+N+")|.)","ig"),oe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{j.apply(t=D.call(w.childNodes),w.childNodes),t[w.childNodes.length].nodeType}catch(e){j={apply:t.length?function(e,t){H.apply(e,D.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function ae(t,e,i,n){var o,r,s,a,l,u,c,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return i;if(!n&&((e?e.ownerDocument||e:w)!==S&&T(e),e=e||S,C)){if(11!==p&&(l=te.exec(t)))if(o=l[1]){if(9===p){if(!(s=e.getElementById(o)))return i;if(s.id===o)return i.push(s),i}else if(d&&(s=d.getElementById(o))&&y(e,s)&&s.id===o)return i.push(s),i}else{if(l[2])return j.apply(i,e.getElementsByTagName(t)),i;if((o=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return j.apply(i,e.getElementsByClassName(o)),i}if(f.qsa&&!L[t+" "]&&(!g||!g.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,d=e,1===p&&X.test(t)){for((a=e.getAttribute("id"))?a=a.replace(oe,re):e.setAttribute("id",a=k),r=(u=h(t)).length;r--;)u[r]="#"+a+" "+we(u[r]);c=u.join(","),d=ie.test(t)&&ve(e.parentNode)||e}try{return j.apply(i,d.querySelectorAll(c)),i}catch(e){L(t,!0)}finally{a===k&&e.removeAttribute("id")}}}return m(t.replace(F,"$1"),e,i,n)}function le(){var n=[];return function e(t,i){return n.push(t+" ")>b.cacheLength&&delete e[n.shift()],e[t+" "]=i}}function ue(e){return e[k]=!0,e}function ce(e){var t=S.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var i=e.split("|"),n=i.length;n--;)b.attrHandle[i[n]]=t}function pe(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function fe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function me(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&se(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ge(s){return ue(function(r){return r=+r,ue(function(e,t){for(var i,n=s([],e.length,r),o=n.length;o--;)e[i=n[o]]&&(e[i]=!(t[i]=e[i]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=ae.support={},s=ae.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!Z.test(t||i&&i.nodeName||"HTML")},T=ae.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:w;return n!==S&&9===n.nodeType&&n.documentElement&&(a=(S=n).documentElement,C=!s(S),w!==S&&(i=S.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",o,!1):i.attachEvent&&i.attachEvent("onunload",o)),f.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=ce(function(e){return e.appendChild(S.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=ee.test(S.getElementsByClassName),f.getById=ce(function(e){return a.appendChild(e).id=k,!S.getElementsByName||!S.getElementsByName(k).length}),f.getById?(b.filter.ID=function(e){var t=e.replace(ne,d);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i=t.getElementById(e);return i?[i]:[]}}):(b.filter.ID=function(e){var i=e.replace(ne,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i,n,o,r=t.getElementById(e);if(r){if((i=r.getAttributeNode("id"))&&i.value===e)return[r];for(o=t.getElementsByName(e),n=0;r=o[n++];)if((i=r.getAttributeNode("id"))&&i.value===e)return[r]}return[]}}),b.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],o=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;i=r[o++];)1===i.nodeType&&n.push(i);return n},b.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},c=[],g=[],(f.qsa=ee.test(S.querySelectorAll))&&(ce(function(e){a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+N+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+N+"*(?:value|"+M+")"),e.querySelectorAll("[id~="+k+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||g.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=S.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+N+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(f.matchesSelector=ee.test(v=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){f.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),c.push("!=",R)}),g=g.length&&new RegExp(g.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(a.compareDocumentPosition),y=t||ee.test(a.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return u=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===i?e===S||e.ownerDocument===w&&y(w,e)?-1:t===S||t.ownerDocument===w&&y(w,t)?1:l?P(l,e)-P(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return u=!0,0;var i,n=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e===S?-1:t===S?1:o?-1:r?1:l?P(l,e)-P(l,t):0;if(o===r)return pe(e,t);for(i=e;i=i.parentNode;)s.unshift(i);for(i=t;i=i.parentNode;)a.unshift(i);for(;s[n]===a[n];)n++;return n?pe(s[n],a[n]):s[n]===w?-1:a[n]===w?1:0}),S},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if((e.ownerDocument||e)!==S&&T(e),f.matchesSelector&&C&&!L[t+" "]&&(!c||!c.test(t))&&(!g||!g.test(t)))try{var i=v.call(e,t);if(i||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){L(t,!0)}return 0<ae(t,S,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!==S&&T(e),y(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!==S&&T(e);var i=b.attrHandle[t.toLowerCase()],n=i&&_.call(b.attrHandle,t.toLowerCase())?i(e,t,!C):void 0;return void 0!==n?n:f.attributes||!C?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},ae.escape=function(e){return(e+"").replace(oe,re)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],n=0,o=0;if(u=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(z),u){for(;t=e[o++];)t===e[o]&&(n=i.push(o));for(;n--;)e.splice(i[n],1)}return l=null,e},r=ae.getText=function(e){var t,i="",n=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[n++];)i+=r(t);return i},(b=ae.selectors={cacheLength:50,createPseudo:ue,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&G.test(i)&&(t=h(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ne,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=I[e+" "];return t||(t=new RegExp("(^|"+N+")"+e+"("+N+"|$)"))&&I(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,n,o){return function(e){var t=ae.attr(e,i);return null==t?"!="===n:!n||(t+="","="===n?t===o:"!="===n?t!==o:"^="===n?o&&0===t.indexOf(o):"*="===n?o&&-1<t.indexOf(o):"$="===n?o&&t.slice(-o.length)===o:"~="===n?-1<(" "+t.replace(B," ")+" ").indexOf(o):"|="===n&&(t===o||t.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,e,t,m,g){var v="nth"!==h.slice(0,3),y="last"!==h.slice(-4),w="of-type"===e;return 1===m&&0===g?function(e){return!!e.parentNode}:function(e,t,i){var n,o,r,s,a,l,u=v!=y?"nextSibling":"previousSibling",c=e.parentNode,d=w&&e.nodeName.toLowerCase(),p=!i&&!w,f=!1;if(c){if(v){for(;u;){for(s=e;s=s[u];)if(w?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=u="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&p){for(f=(a=(n=(o=(r=(s=c)[k]||(s[k]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&n[1])&&n[2],s=a&&c.childNodes[a];s=++a&&s&&s[u]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===e){o[h]=[E,a,f];break}}else if(p&&(f=a=(n=(o=(r=(s=e)[k]||(s[k]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&n[1]),!1===f)for(;(s=++a&&s&&s[u]||(f=a=0)||l.pop())&&((w?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++f||(p&&((o=(r=s[k]||(s[k]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[E,f]),s!==e)););return(f-=g)===m||f%m==0&&0<=f/m}}},PSEUDO:function(e,r){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return s[k]?s(r):1<s.length?(t=[e,e,"",r],b.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,t){for(var i,n=s(e,r),o=n.length;o--;)e[i=P(e,n[o])]=!(t[i]=n[o])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ue(function(e){var n=[],o=[],a=p(e.replace(F,"$1"));return a[k]?ue(function(e,t,i,n){for(var o,r=a(e,null,n,[]),s=e.length;s--;)(o=r[s])&&(e[s]=!(t[s]=o))}):function(e,t,i){return n[0]=e,a(n,null,i,o),n[0]=null,!o.pop()}}),has:ue(function(t){return function(e){return 0<ae(t,e).length}}),contains:ue(function(t){return t=t.replace(ne,d),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:ue(function(i){return V.test(i||"")||ae.error("unsupported lang: "+i),i=i.replace(ne,d).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,i){return[i<0?i+t:i]}),even:ge(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:ge(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:ge(function(e,t,i){for(var n=i<0?i+t:t<i?t:i;0<=--n;)e.push(n);return e}),gt:ge(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=fe(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function ye(){}function we(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function be(a,e,t){var l=e.dir,u=e.next,c=u||l,d=t&&"parentNode"===c,p=n++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||d)return a(e,t,i);return!1}:function(e,t,i){var n,o,r,s=[E,p];if(i){for(;e=e[l];)if((1===e.nodeType||d)&&a(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(o=(r=e[k]||(e[k]={}))[e.uniqueID]||(r[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((n=o[c])&&n[0]===E&&n[1]===p)return s[2]=n[2];if((o[c]=s)[2]=a(e,t,i))return!0}return!1}}function xe(o){return 1<o.length?function(e,t,i){for(var n=o.length;n--;)if(!o[n](e,t,i))return!1;return!0}:o[0]}function Te(e,t,i,n,o){for(var r,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(r=e[a])&&(i&&!i(r,n,o)||(s.push(r),u&&t.push(a)));return s}function Se(f,h,m,g,v,e){return g&&!g[k]&&(g=Se(g)),v&&!v[k]&&(v=Se(v,e)),ue(function(e,t,i,n){var o,r,s,a=[],l=[],u=t.length,c=e||function(e,t,i){for(var n=0,o=t.length;n<o;n++)ae(e,t[n],i);return i}(h||"*",i.nodeType?[i]:i,[]),d=!f||!e&&h?c:Te(c,a,f,i,n),p=m?v||(e?f:u||g)?[]:t:d;if(m&&m(d,p,i,n),g)for(o=Te(p,l),g(o,[],i,n),r=o.length;r--;)(s=o[r])&&(p[l[r]]=!(d[l[r]]=s));if(e){if(v||f){if(v){for(o=[],r=p.length;r--;)(s=p[r])&&o.push(d[r]=s);v(null,p=[],o,n)}for(r=p.length;r--;)(s=p[r])&&-1<(o=v?P(e,s):a[r])&&(e[o]=!(t[o]=s))}}else p=Te(p===t?p.splice(u,p.length):p),v?v(null,t,p,n):j.apply(t,p)})}function Ce(e){for(var o,t,i,n=e.length,r=b.relative[e[0].type],s=r||b.relative[" "],a=r?1:0,l=be(function(e){return e===o},s,!0),u=be(function(e){return-1<P(o,e)},s,!0),c=[function(e,t,i){var n=!r&&(i||t!==x)||((o=t).nodeType?l(e,t,i):u(e,t,i));return o=null,n}];a<n;a++)if(t=b.relative[e[a].type])c=[be(xe(c),t)];else{if((t=b.filter[e[a].type].apply(null,e[a].matches))[k]){for(i=++a;i<n&&!b.relative[e[i].type];i++);return Se(1<a&&xe(c),1<a&&we(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(F,"$1"),t,a<i&&Ce(e.slice(a,i)),i<n&&Ce(e=e.slice(i)),i<n&&we(e))}c.push(t)}return xe(c)}function ke(g,v){function e(e,t,i,n,o){var r,s,a,l=0,u="0",c=e&&[],d=[],p=x,f=e||w&&b.find.TAG("*",o),h=E+=null==p?1:Math.random()||.1,m=f.length;for(o&&(x=t===S||t||o);u!==m&&null!=(r=f[u]);u++){if(w&&r){for(s=0,t||r.ownerDocument===S||(T(r),i=!C);a=g[s++];)if(a(r,t||S,i)){n.push(r);break}o&&(E=h)}y&&((r=!a&&r)&&l--,e&&c.push(r))}if(l+=u,y&&u!==l){for(s=0;a=v[s++];)a(c,d,t,i);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=O.call(n));d=Te(d)}j.apply(n,d),o&&!e&&0<d.length&&1<l+v.length&&ae.uniqueSort(n)}return o&&(E=h,x=p),c}var y=0<v.length,w=0<g.length;return y?ue(e):e}return ye.prototype=b.filters=b.pseudos,b.setFilters=new ye,h=ae.tokenize=function(e,t){var i,n,o,r,s,a,l,u=A[e+" "];if(u)return t?0:u.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(r in i&&!(n=U.exec(s))||(n&&(s=s.slice(n[0].length)||s),a.push(o=[])),i=!1,(n=Y.exec(s))&&(i=n.shift(),o.push({value:i,type:n[0].replace(F," ")}),s=s.slice(i.length)),b.filter)!(n=Q[r].exec(s))||l[r]&&!(n=l[r](n))||(i=n.shift(),o.push({value:i,type:r,matches:n}),s=s.slice(i.length));if(!i)break}return t?s.length:s?ae.error(e):A(e,a).slice(0)},p=ae.compile=function(e,t){var i,n=[],o=[],r=$[e+" "];if(!r){for(i=(t=t||h(e)).length;i--;)(r=Ce(t[i]))[k]?n.push(r):o.push(r);(r=$(e,ke(o,n))).selector=e}return r},m=ae.select=function(e,t,i,n){var o,r,s,a,l,u="function"==typeof e&&e,c=!n&&h(e=u.selector||e);if(i=i||[],1===c.length){if(2<(r=c[0]=c[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===t.nodeType&&C&&b.relative[r[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(ne,d),t)||[])[0]))return i;u&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=Q.needsContext.test(e)?0:r.length;o--&&(s=r[o],!b.relative[a=s.type]);)if((l=b.find[a])&&(n=l(s.matches[0].replace(ne,d),ie.test(r[0].type)&&ve(t.parentNode)||t))){if(r.splice(o,1),!(e=n.length&&we(r)))return j.apply(i,n),i;break}}return(u||p(e,c))(n,t,!C,i,!t||ie.test(e)&&ve(t.parentNode)||t),i},f.sortStable=k.split("").sort(z).join("")===k,f.detectDuplicates=!!u,T(),f.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(S.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||de(M,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),ae}(S);k.find=h,k.expr=h.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=h.uniqueSort,k.text=h.getText,k.isXMLDoc=h.isXML,k.contains=h.contains,k.escapeSelector=h.escape;function T(e,t,i){for(var n=[],o=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&k(e).is(i))break;n.push(e)}return n}function E(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i}var I=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var $=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,i,n){return w(i)?k.grep(e,function(e,t){return!!i.call(e,t,e)!==n}):i.nodeType?k.grep(e,function(e){return e===i!==n}):"string"!=typeof i?k.grep(e,function(e){return-1<o.call(i,e)!==n}):k.filter(i,e,n)}k.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?k.find.matchesSelector(n,e)?[n]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,i,n=this.length,o=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<n;t++)if(k.contains(o[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)k.find(e,o[t],i);return 1<n?k.uniqueSort(i):i},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&I.test(e)?k(e):e||[],!1).length}});var z,_=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,i){var n,o;if(!e)return this;if(i=i||z,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):w(e)?void 0!==i.ready?i.ready(e):e(k):k.makeArray(e,this);if(!(n="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:_.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),$.test(n[1])&&k.isPlainObject(t))for(n in t)w(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(o=C.getElementById(n[2]))&&(this[0]=o,this.length=1),this}).prototype=k.fn,z=k(C);var O=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function j(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,o=this.length,r=[],s="string"!=typeof e&&k(e);if(!I.test(e))for(;n<o;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(s?-1<s.index(i):1===i.nodeType&&k.find.matchesSelector(i,e))){r.push(i);break}return this.pushStack(1<r.length?k.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?o.call(k(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,i){return T(e,"parentNode",i)},next:function(e){return j(e,"nextSibling")},prev:function(e){return j(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,i){return T(e,"nextSibling",i)},prevUntil:function(e,t,i){return T(e,"previousSibling",i)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(n,o){k.fn[n]=function(e,t){var i=k.map(this,o,e);return"Until"!==n.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=k.filter(t,i)),1<this.length&&(H[n]||k.uniqueSort(i),O.test(n)&&i.reverse()),this.pushStack(i)}});var D=/[^\x20\t\r\n\f]+/g;function P(e){return e}function M(e){throw e}function N(e,t,i,n){var o;try{e&&w(o=e.promise)?o.call(e).done(t).fail(i):e&&w(o=e.then)?o.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}k.Callbacks=function(n){n="string"==typeof n?function(e){var i={};return k.each(e.match(D)||[],function(e,t){i[t]=!0}),i}(n):k.extend({},n);function i(){for(r=r||n.once,t=o=!0;a.length;l=-1)for(e=a.shift();++l<s.length;)!1===s[l].apply(e[0],e[1])&&n.stopOnFalse&&(l=s.length,e=!1);n.memory||(e=!1),o=!1,r&&(s=e?[]:"")}var o,e,t,r,s=[],a=[],l=-1,u={add:function(){return s&&(e&&!o&&(l=s.length-1,a.push(e)),function i(e){k.each(e,function(e,t){w(t)?n.unique&&u.has(t)||s.push(t):t&&t.length&&"string"!==x(t)&&i(t)})}(arguments),e&&!o&&i()),this},remove:function(){return k.each(arguments,function(e,t){for(var i;-1<(i=k.inArray(t,s,i));)s.splice(i,1),i<=l&&l--}),this},has:function(e){return e?-1<k.inArray(e,s):0<s.length},empty:function(){return s=s&&[],this},disable:function(){return r=a=[],s=e="",this},disabled:function(){return!s},lock:function(){return r=a=[],e||o||(s=e=""),this},locked:function(){return!!r},fireWith:function(e,t){return r||(t=[e,(t=t||[]).slice?t.slice():t],a.push(t),o||i()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!t}};return u},k.extend({Deferred:function(e){var r=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],o="pending",s={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var o=arguments;return k.Deferred(function(n){k.each(r,function(e,t){var i=w(o[t[4]])&&o[t[4]];a[t[1]](function(){var e=i&&i.apply(this,arguments);e&&w(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,i?[e]:arguments)})}),o=null}).promise()},then:function(t,i,n){var l=0;function u(o,r,s,a){return function(){function e(){var e,t;if(!(o<l)){if((e=s.apply(i,n))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,w(t)?a?t.call(e,u(l,r,P,a),u(l,r,M,a)):(l++,t.call(e,u(l,r,P,a),u(l,r,M,a),u(l,r,P,r.notifyWith))):(s!==P&&(i=void 0,n=[e]),(a||r.resolveWith)(i,n))}}var i=this,n=arguments,t=a?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),l<=o+1&&(s!==M&&(i=void 0,n=[e]),r.rejectWith(i,n))}};o?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),S.setTimeout(t))}}return k.Deferred(function(e){r[0][3].add(u(0,e,w(n)?n:P,e.notifyWith)),r[1][3].add(u(0,e,w(t)?t:P)),r[2][3].add(u(0,e,w(i)?i:M))}).promise()},promise:function(e){return null!=e?k.extend(e,s):s}},a={};return k.each(r,function(e,t){var i=t[2],n=t[5];s[t[1]]=i.add,n&&i.add(function(){o=n},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),i.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=i.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){o[t]=this,r[t]=1<arguments.length?a.call(arguments):e,--i||s.resolveWith(o,r)}}var i=arguments.length,n=i,o=Array(n),r=a.call(arguments),s=k.Deferred();if(i<=1&&(N(e,s.done(t(n)).resolve,s.reject,!i),"pending"===s.state()||w(r[n]&&r[n].then)))return s.then();for(;n--;)N(r[n],t(n),s.reject);return s.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){S.console&&S.console.warn&&e&&q.test(e.name)&&S.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){S.setTimeout(function(){throw e})};var W=k.Deferred();function R(){C.removeEventListener("DOMContentLoaded",R),S.removeEventListener("load",R),k.ready()}k.fn.ready=function(e){return W.then(e).catch(function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||W.resolveWith(C,[k])}}),k.ready.then=W.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?S.setTimeout(k.ready):(C.addEventListener("DOMContentLoaded",R),S.addEventListener("load",R));var B=function(e,t,i,n,o,r,s){var a=0,l=e.length,u=null==i;if("object"===x(i))for(a in o=!0,i)B(e,t,a,i[a],!0,r,s);else if(void 0!==n&&(o=!0,w(n)||(s=!0),u&&(t=s?(t.call(e,n),null):(u=t,function(e,t,i){return u.call(k(e),i)})),t))for(;a<l;a++)t(e[a],i,s?n:n.call(e[a],a,t(e[a],i)));return o?e:u?t.call(e):l?t(e[0],i):r},F=/^-ms-/,U=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function X(e){return e.replace(F,"ms-").replace(U,Y)}function G(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function V(){this.expando=k.expando+V.uid++}V.uid=1,V.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,o=this.cache(e);if("string"==typeof t)o[X(t)]=i;else for(n in t)o[X(n)]=t[n];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(X):(t=X(t))in n?[t]:t.match(D)||[]).length;for(;i--;)delete n[t[i]]}void 0!==t&&!k.isEmptyObject(n)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Q=new V,Z=new V,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function ee(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:K.test(e)?JSON.parse(e):e)}(i)}catch(e){}Z.set(e,t,i)}else i=void 0;return i}k.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,i){return Z.access(e,t,i)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,i){return Q.access(e,t,i)},_removeData:function(e,t){Q.remove(e,t)}}),k.fn.extend({data:function(i,e){var t,n,o,r=this[0],s=r&&r.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){Z.set(this,i)}):B(this,function(e){var t;if(r&&void 0===e)return void 0!==(t=Z.get(r,i))?t:void 0!==(t=ee(r,i))?t:void 0;this.each(function(){Z.set(this,i,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=Z.get(r),1===r.nodeType&&!Q.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(n=s[t].name).indexOf("data-")&&(n=X(n.slice(5)),ee(r,n,o[n]));Q.set(r,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),k.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=Q.get(e,t),i&&(!n||Array.isArray(i)?n=Q.access(e,t,k.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=k.queue(e,t),n=i.length,o=i.shift(),r=k._queueHooks(e,t);"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===t&&i.unshift("inprogress"),delete r.stop,o.call(e,function(){k.dequeue(e,t)},r)),!n&&r&&r.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return Q.get(e,i)||Q.access(e,i,{empty:k.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",i])})})}}),k.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===i?this:this.each(function(){var e=k.queue(this,t,i);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function i(){--o||r.resolveWith(s,[s])}var n,o=1,r=k.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Q.get(s[a],e+"queueHooks"))&&n.empty&&(o++,n.empty.add(i));return i(),r.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],oe=C.documentElement,re=function(e){return k.contains(e.ownerDocument,e)},se={composed:!0};oe.getRootNode&&(re=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});function ae(e,t,i,n){var o,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];for(r in o=i.apply(e,n||[]),t)e.style[r]=s[r];return o}var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&re(e)&&"none"===k.css(e,"display")};function ue(e,t,i,n){var o,r,s=20,a=n?function(){return n.cur()}:function(){return k.css(e,t,"")},l=a(),u=i&&i[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==u&&+l)&&ie.exec(k.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)k.style(e,t,c+u),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),c/=r;c*=2,k.style(e,t,c+u),i=i||[]}return i&&(c=+c||+l||0,o=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=c,n.end=o)),o}var ce={};function de(e,t){for(var i,n,o,r,s,a,l,u=[],c=0,d=e.length;c<d;c++)(n=e[c]).style&&(i=n.style.display,t?("none"===i&&(u[c]=Q.get(n,"display")||null,u[c]||(n.style.display="")),""===n.style.display&&le(n)&&(u[c]=(l=s=r=void 0,s=(o=n).ownerDocument,a=o.nodeName,(l=ce[a])||(r=s.body.appendChild(s.createElement(a)),l=k.css(r,"display"),r.parentNode.removeChild(r),"none"===l&&(l="block"),ce[a]=l)))):"none"!==i&&(u[c]="none",Q.set(n,"display",i)));for(c=0;c<d;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}k.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){le(this)?k(this).show():k(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?k.merge([e],i):i}function ve(e,t){for(var i=0,n=e.length;i<n;i++)Q.set(e[i],"globalEval",!t||Q.get(t[i],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var ye,we,be=/<|&#?\w+;/;function xe(e,t,i,n,o){for(var r,s,a,l,u,c,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===x(r))k.merge(p,r.nodeType?[r]:r);else if(be.test(r)){for(s=s||d.appendChild(t.createElement("div")),a=(fe.exec(r)||["",""])[1].toLowerCase(),l=me[a]||me._default,s.innerHTML=l[1]+k.htmlPrefilter(r)+l[2],c=l[0];c--;)s=s.lastChild;k.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",f=0;r=p[f++];)if(n&&-1<k.inArray(r,n))o&&o.push(r);else if(u=re(r),s=ge(d.appendChild(r),"script"),u&&ve(s),i)for(c=0;r=s[c++];)he.test(r.type||"")&&i.push(r);return d}ye=C.createDocumentFragment().appendChild(C.createElement("div")),(we=C.createElement("input")).setAttribute("type","radio"),we.setAttribute("checked","checked"),we.setAttribute("name","t"),ye.appendChild(we),y.checkClone=ye.cloneNode(!0).cloneNode(!0).lastChild.checked,ye.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ye.cloneNode(!0).lastChild.defaultValue;var Te=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Ee(){return!1}function Ie(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,i,n,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof i&&(n=n||i,i=void 0),t)Ae(e,a,i,n,t[a],r);return e}if(null==n&&null==o?(o=i,n=i=void 0):null==o&&("string"==typeof i?(o=n,n=void 0):(o=n,n=i,i=void 0)),!1===o)o=Ee;else if(!o)return e;return 1===r&&(s=o,(o=function(e){return k().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=k.guid++)),e.each(function(){k.event.add(this,t,o,n,i)})}function $e(e,o,r){r?(Q.set(e,o,!1),k.event.add(e,o,{namespace:!1,handler:function(e){var t,i,n=Q.get(this,o);if(1&e.isTrigger&&this[o]){if(n.length)(k.event.special[o]||{}).delegateType&&e.stopPropagation();else if(n=a.call(arguments),Q.set(this,o,n),t=r(this,o),this[o](),n!==(i=Q.get(this,o))||t?Q.set(this,o,!1):i={},n!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else n.length&&(Q.set(this,o,{value:k.event.trigger(k.extend(n[0],k.Event.prototype),n.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,o)&&k.event.add(e,o,ke)}k.event={global:{},add:function(t,e,i,n,o){var r,s,a,l,u,c,d,p,f,h,m,g=Q.get(t);if(g)for(i.handler&&(i=(r=i).handler,o=r.selector),o&&k.find.matchesSelector(oe,o),i.guid||(i.guid=k.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(e){return void 0!==k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(D)||[""]).length;u--;)f=m=(a=Ce.exec(e[u])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=k.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=k.event.special[f]||{},c=k.extend({type:f,origType:m,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&k.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,n,h,s)||t.addEventListener&&t.addEventListener(f,s)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),k.event.global[f]=!0)},remove:function(e,t,i,n,o){var r,s,a,l,u,c,d,p,f,h,m,g=Q.hasData(e)&&Q.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(D)||[""]).length;u--;)if(f=m=(a=Ce.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=k.event.special[f]||{},p=l[f=(n?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)c=p[r],!o&&m!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(p.splice(r,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||k.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)k.event.remove(e,f+t[u],i,n,!0);k.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,i,n,o,r,s,a=k.event.fix(e),l=new Array(arguments.length),u=(Q.get(this,"events")||{})[a.type]||[],c=k.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=k.event.handlers.call(this,a,u),t=0;(o=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,i=0;(r=o.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==r.namespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,void 0!==(n=((k.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var i,n,o,r,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(r=[],s={},i=0;i<l;i++)void 0===s[o=(n=t[i]).selector+" "]&&(s[o]=n.needsContext?-1<k(o,this).index(u):k.find(o,this,null,[u]).length),s[o]&&r.push(n);r.length&&a.push({elem:u,handlers:r})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:w(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&$e(t,"click",ke),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&$e(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Q.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return $e(this,e,Ie),!1},trigger:function(){return $e(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){k.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,i=e.relatedTarget,n=e.handleObj;return i&&(i===this||k.contains(this,i))||(e.type=n.origType,t=n.handler.apply(this,arguments),e.type=o),t}}}),k.fn.extend({on:function(e,t,i,n){return Ae(this,e,t,i,n)},one:function(e,t,i,n){return Ae(this,e,t,i,n,1)},off:function(e,t,i){var n,o;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,k(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Ee),this.each(function(){k.event.remove(this,e,i,t)});for(o in e)this.off(o,t,e[o]);return this}});var Le=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ze=/<script|<style|<link/i,_e=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function He(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function je(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var i,n,o,r,s,a,l,u;if(1===t.nodeType){if(Q.hasData(e)&&(r=Q.access(e),s=Q.set(t,r),u=r.events))for(o in delete s.handle,s.events={},u)for(i=0,n=u[o].length;i<n;i++)k.event.add(t,o,u[o][i]);Z.hasData(e)&&(a=Z.access(e),l=k.extend({},a),Z.set(t,l))}}function Me(i,n,o,r){n=g.apply([],n);var e,t,s,a,l,u,c=0,d=i.length,p=d-1,f=n[0],h=w(f);if(h||1<d&&"string"==typeof f&&!y.checkClone&&_e.test(f))return i.each(function(e){var t=i.eq(e);h&&(n[0]=f.call(this,e,t.html())),Me(t,n,o,r)});if(d&&(t=(e=xe(n,i[0].ownerDocument,!1,i,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(a=(s=k.map(ge(e,"script"),je)).length;c<d;c++)l=e,c!==p&&(l=k.clone(l,!0,!0),a&&k.merge(s,ge(l,"script"))),o.call(i[c],l,c);if(a)for(u=s[s.length-1].ownerDocument,k.map(s,De),c=0;c<a;c++)l=s[c],he.test(l.type||"")&&!Q.access(l,"globalEval")&&k.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?k._evalUrl&&!l.noModule&&k._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):b(l.textContent.replace(Oe,""),l,u))}return i}function Ne(e,t,i){for(var n,o=t?k.filter(t,e):e,r=0;null!=(n=o[r]);r++)i||1!==n.nodeType||k.cleanData(ge(n)),n.parentNode&&(i&&re(n)&&ve(ge(n,"script")),n.parentNode.removeChild(n));return e}k.extend({htmlPrefilter:function(e){return e.replace(Le,"<$1></$2>")},clone:function(e,t,i){var n,o,r,s,a,l,u,c=e.cloneNode(!0),d=re(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(s=ge(c),n=0,o=(r=ge(e)).length;n<o;n++)a=r[n],l=s[n],void 0,"input"===(u=l.nodeName.toLowerCase())&&pe.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(i)for(r=r||ge(e),s=s||ge(c),n=0,o=r.length;n<o;n++)Pe(r[n],s[n]);else Pe(e,c);return 0<(s=ge(c,"script")).length&&ve(s,!d&&ge(e,"script")),c},cleanData:function(e){for(var t,i,n,o=k.event.special,r=0;void 0!==(i=e[r]);r++)if(G(i)){if(t=i[Q.expando]){if(t.events)for(n in t.events)o[n]?k.event.remove(i,n):k.removeEvent(i,n,t.handle);i[Q.expando]=void 0}i[Z.expando]&&(i[Z.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Ne(this,e,!0)},remove:function(e){return Ne(this,e)},text:function(e){return B(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Me(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||He(this,e).appendChild(e)})},prepend:function(){return Me(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=He(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Me(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Me(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ze.test(e)&&!me[(fe.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(k.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return Me(this,arguments,function(e){var t=this.parentNode;k.inArray(this,i)<0&&(k.cleanData(ge(this)),t&&t.replaceChild(e,this))},i)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){k.fn[e]=function(e){for(var t,i=[],n=k(e),o=n.length-1,r=0;r<=o;r++)t=r===o?this:this.clone(!0),k(n[r])[s](t),l.apply(i,t.get());return this.pushStack(i)}});var qe,We,Re,Be,Fe,Ue,Ye,Xe=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Ge=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=S),t.getComputedStyle(e)},Ve=new RegExp(ne.join("|"),"i");function Qe(){if(Ye){Ue.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ye.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(Ue).appendChild(Ye);var e=S.getComputedStyle(Ye);qe="1%"!==e.top,Fe=12===Ze(e.marginLeft),Ye.style.right="60%",Be=36===Ze(e.right),We=36===Ze(e.width),Ye.style.position="absolute",Re=12===Ze(Ye.offsetWidth/3),oe.removeChild(Ue),Ye=null}}function Ze(e){return Math.round(parseFloat(e))}function Ke(e,t,i){var n,o,r,s,a=e.style;return(i=i||Ge(e))&&(""!==(s=i.getPropertyValue(t)||i[t])||re(e)||(s=k.style(e,t)),!y.pixelBoxStyles()&&Xe.test(s)&&Ve.test(t)&&(n=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=i.width,a.width=n,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ue=C.createElement("div"),(Ye=C.createElement("div")).style&&(Ye.style.backgroundClip="content-box",Ye.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Ye.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return Qe(),We},pixelBoxStyles:function(){return Qe(),Be},pixelPosition:function(){return Qe(),qe},reliableMarginLeft:function(){return Qe(),Fe},scrollboxSize:function(){return Qe(),Re}}));var et=["Webkit","Moz","ms"],tt=C.createElement("div").style,it={};function nt(e){var t=k.cssProps[e]||it[e];return t||(e in tt?e:it[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=et.length;i--;)if((e=et[i]+t)in tt)return e}(e)||e)}var ot=/^(none|table(?!-c[ea]).+)/,rt=/^--/,st={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function lt(e,t,i){var n=ie.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function ut(e,t,i,n,o,r){var s="width"===t?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;s<4;s+=2)"margin"===i&&(l+=k.css(e,i+ne[s],!0,o)),n?("content"===i&&(l-=k.css(e,"padding"+ne[s],!0,o)),"margin"!==i&&(l-=k.css(e,"border"+ne[s]+"Width",!0,o))):(l+=k.css(e,"padding"+ne[s],!0,o),"padding"!==i?l+=k.css(e,"border"+ne[s]+"Width",!0,o):a+=k.css(e,"border"+ne[s]+"Width",!0,o));return!n&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l}function ct(e,t,i){var n=Ge(e),o=(!y.boxSizingReliable()||i)&&"border-box"===k.css(e,"boxSizing",!1,n),r=o,s=Ke(e,t,n),a="offset"+t[0].toUpperCase()+t.slice(1);if(Xe.test(s)){if(!i)return s;s="auto"}return(!y.boxSizingReliable()&&o||"auto"===s||!parseFloat(s)&&"inline"===k.css(e,"display",!1,n))&&e.getClientRects().length&&(o="border-box"===k.css(e,"boxSizing",!1,n),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ut(e,t,i||(o?"border":"content"),r,n,s)+"px"}function dt(e,t,i,n,o){return new dt.prototype.init(e,t,i,n,o)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Ke(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=X(t),l=rt.test(t),u=e.style;if(l||(t=nt(a)),s=k.cssHooks[t]||k.cssHooks[a],void 0===i)return s&&"get"in s&&void 0!==(o=s.get(e,!1,n))?o:u[t];"string"===(r=typeof i)&&(o=ie.exec(i))&&o[1]&&(i=ue(e,t,o),r="number"),null!=i&&i==i&&("number"!==r||l||(i+=o&&o[3]||(k.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==i||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(i=s.set(e,i,n))||(l?u.setProperty(t,i):u[t]=i))}},css:function(e,t,i,n){var o,r,s,a=X(t);return rt.test(t)||(t=nt(a)),(s=k.cssHooks[t]||k.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,i)),void 0===o&&(o=Ke(e,t,n)),"normal"===o&&t in at&&(o=at[t]),""===i||i?(r=parseFloat(o),!0===i||isFinite(r)?r||0:o):o}}),k.each(["height","width"],function(e,l){k.cssHooks[l]={get:function(e,t,i){if(t)return!ot.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,i):ae(e,st,function(){return ct(e,l,i)})},set:function(e,t,i){var n,o=Ge(e),r=!y.scrollboxSize()&&"absolute"===o.position,s=(r||i)&&"border-box"===k.css(e,"boxSizing",!1,o),a=i?ut(e,l,i,s,o):0;return s&&r&&(a-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(o[l])-ut(e,l,"border",!1,o)-.5)),a&&(n=ie.exec(t))&&"px"!==(n[3]||"px")&&(e.style[l]=t,t=k.css(e,l)),lt(0,t,a)}}}),k.cssHooks.marginLeft=Je(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ke(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(o,r){k.cssHooks[o+r]={expand:function(e){for(var t=0,i={},n="string"==typeof e?e.split(" "):[e];t<4;t++)i[o+ne[t]+r]=n[t]||n[t-2]||n[0];return i}},"margin"!==o&&(k.cssHooks[o+r].set=lt)}),k.fn.extend({css:function(e,t){return B(this,function(e,t,i){var n,o,r={},s=0;if(Array.isArray(t)){for(n=Ge(e),o=t.length;s<o;s++)r[t[s]]=k.css(e,t[s],!1,n);return r}return void 0!==i?k.style(e,t,i):k.css(e,t)},e,t,1<arguments.length)}}),((k.Tween=dt).prototype={constructor:dt,init:function(e,t,i,n,o,r){this.elem=e,this.prop=i,this.easing=o||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=r||(k.cssNumber[i]?"":"px")},cur:function(){var e=dt.propHooks[this.prop];return e&&e.get?e.get(this):dt.propHooks._default.get(this)},run:function(e){var t,i=dt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):dt.propHooks._default.set(this),this}}).init.prototype=dt.prototype,(dt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=dt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=dt.prototype.init,k.fx.step={};var pt,ft,ht,mt,gt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function yt(){ft&&(!1===C.hidden&&S.requestAnimationFrame?S.requestAnimationFrame(yt):S.setTimeout(yt,k.fx.interval),k.fx.tick())}function wt(){return S.setTimeout(function(){pt=void 0}),pt=Date.now()}function bt(e,t){var i,n=0,o={height:e};for(t=t?1:0;n<4;n+=2-t)o["margin"+(i=ne[n])]=o["padding"+i]=e;return t&&(o.opacity=o.width=e),o}function xt(e,t,i){for(var n,o=(Tt.tweeners[t]||[]).concat(Tt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(n=o[r].call(i,t,e))return n}function Tt(r,e,t){var i,s,n=0,o=Tt.prefilters.length,a=k.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=pt||wt(),t=Math.max(0,u.startTime+u.duration-e),i=1-(t/u.duration||0),n=0,o=u.tweens.length;n<o;n++)u.tweens[n].run(i);return a.notifyWith(r,[u,i,t]),i<1&&o?t:(o||a.notifyWith(r,[u,1,0]),a.resolveWith(r,[u]),!1)},u=a.promise({elem:r,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:pt||wt(),duration:t.duration,tweens:[],createTween:function(e,t){var i=k.Tween(r,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var t=0,i=e?u.tweens.length:0;if(s)return this;for(s=!0;t<i;t++)u.tweens[t].run(1);return e?(a.notifyWith(r,[u,1,0]),a.resolveWith(r,[u,e])):a.rejectWith(r,[u,e]),this}}),c=u.props;for(!function(e,t){var i,n,o,r,s;for(i in e)if(o=t[n=X(i)],r=e[i],Array.isArray(r)&&(o=r[1],r=e[i]=r[0]),i!==n&&(e[n]=r,delete e[i]),(s=k.cssHooks[n])&&"expand"in s)for(i in r=s.expand(r),delete e[n],r)i in e||(e[i]=r[i],t[i]=o);else t[n]=o}(c,u.opts.specialEasing);n<o;n++)if(i=Tt.prefilters[n].call(u,r,c,u.opts))return w(i.stop)&&(k._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return k.map(c,xt,u),w(u.opts.start)&&u.opts.start.call(r,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),k.fx.timer(k.extend(l,{elem:r,anim:u,queue:u.opts.queue})),u}k.Animation=k.extend(Tt,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return ue(i.elem,e,ie.exec(t),i),i}]},tweener:function(e,t){for(var i,n=0,o=(e=w(e)?(t=e,["*"]):e.match(D)).length;n<o;n++)i=e[n],Tt.tweeners[i]=Tt.tweeners[i]||[],Tt.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,o,r,s,a,l,u,c,d="width"in t||"height"in t,p=this,f={},h=e.style,m=e.nodeType&&le(e),g=Q.get(e,"fxshow");for(n in i.queue||(null==(s=k._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,k.queue(e,"fx").length||s.empty.fire()})})),t)if(o=t[n],gt.test(o)){if(delete t[n],r=r||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;m=!0}f[n]=g&&g[n]||k.style(e,n)}if((l=!k.isEmptyObject(t))||!k.isEmptyObject(f))for(n in d&&1===e.nodeType&&(i.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=g&&g.display)&&(u=Q.get(e,"display")),"none"===(c=k.css(e,"display"))&&(u?c=u:(de([e],!0),u=e.style.display||u,c=k.css(e,"display"),de([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===k.css(e,"float")&&(l||(p.done(function(){h.display=u}),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),i.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=i.overflow[0],h.overflowX=i.overflow[1],h.overflowY=i.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=Q.access(e,"fxshow",{display:u}),r&&(g.hidden=!m),m&&de([e],!0),p.done(function(){for(n in m||de([e]),Q.remove(e,"fxshow"),f)k.style(e,n,f[n])})),l=xt(m?g[n]:0,n,p),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?Tt.prefilters.unshift(e):Tt.prefilters.push(e)}}),k.speed=function(e,t,i){var n=e&&"object"==typeof e?k.extend({},e):{complete:i||!i&&t||w(e)&&e,duration:e,easing:i&&t||t&&!w(t)&&t};return k.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in k.fx.speeds?n.duration=k.fx.speeds[n.duration]:n.duration=k.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){w(n.old)&&n.old.call(this),n.queue&&k.dequeue(this,n.queue)},n},k.fn.extend({fadeTo:function(e,t,i,n){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(t,e,i,n){function o(){var e=Tt(this,k.extend({},t),s);(r||Q.get(this,"finish"))&&e.stop(!0)}var r=k.isEmptyObject(t),s=k.speed(e,i,n);return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(o,e,r){function s(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof o&&(r=e,e=o,o=void 0),e&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",i=k.timers,n=Q.get(this);if(t)n[t]&&n[t].stop&&s(n[t]);else for(t in n)n[t]&&n[t].stop&&vt.test(t)&&s(n[t]);for(t=i.length;t--;)i[t].elem!==this||null!=o&&i[t].queue!==o||(i[t].anim.stop(r),e=!1,i.splice(t,1));!e&&r||k.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=Q.get(this),i=t[s+"queue"],n=t[s+"queueHooks"],o=k.timers,r=i?i.length:0;for(t.finish=!0,k.queue(this,s,[]),n&&n.stop&&n.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===s&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,n){var o=k.fn[n];k.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(bt(n,!0),e,t,i)}}),k.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,n){k.fn[e]=function(e,t,i){return this.animate(n,e,t,i)}}),k.timers=[],k.fx.tick=function(){var e,t=0,i=k.timers;for(pt=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||k.fx.stop(),pt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){ft||(ft=!0,yt())},k.fx.stop=function(){ft=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(n,e){return n=k.fx&&k.fx.speeds[n]||n,e=e||"fx",this.queue(e,function(e,t){var i=S.setTimeout(e,n);t.stop=function(){S.clearTimeout(i)}})},ht=C.createElement("input"),mt=C.createElement("select").appendChild(C.createElement("option")),ht.type="checkbox",y.checkOn=""!==ht.value,y.optSelected=mt.selected,(ht=C.createElement("input")).value="t",ht.type="radio",y.radioValue="t"===ht.value;var St,Ct=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return B(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,i){var n,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?k.prop(e,t,i):(1===r&&k.isXMLDoc(e)||(o=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?St:void 0)),void 0!==i?null===i?void k.removeAttr(e,t):o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:(e.setAttribute(t,i+""),i):o&&"get"in o&&null!==(n=o.get(e,t))?n:null==(n=k.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,o=t&&t.match(D);if(o&&1===e.nodeType)for(;i=o[n++];)e.removeAttribute(i)}}),St={set:function(e,t,i){return!1===t?k.removeAttr(e,i):e.setAttribute(i,i),i}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var s=Ct[t]||k.find.attr;Ct[t]=function(e,t,i){var n,o,r=t.toLowerCase();return i||(o=Ct[r],Ct[r]=n,n=null!=s(e,t,i)?r:null,Ct[r]=o),n}});var kt=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function It(e){return(e.match(D)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function $t(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(D)||[]}k.fn.extend({prop:function(e,t){return B(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,i){var n,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&k.isXMLDoc(e)||(t=k.propFix[t]||t,o=k.propHooks[t]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:e[t]=i:o&&"get"in o&&null!==(n=o.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):kt.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,i,n,o,r,s,a,l=0;if(w(t))return this.each(function(e){k(this).addClass(t.call(this,e,At(this)))});if((e=$t(t)).length)for(;i=this[l++];)if(o=At(i),n=1===i.nodeType&&" "+It(o)+" "){for(s=0;r=e[s++];)n.indexOf(" "+r+" ")<0&&(n+=r+" ");o!==(a=It(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,o,r,s,a,l=0;if(w(t))return this.each(function(e){k(this).removeClass(t.call(this,e,At(this)))});if(!arguments.length)return this.attr("class","");if((e=$t(t)).length)for(;i=this[l++];)if(o=At(i),n=1===i.nodeType&&" "+It(o)+" "){for(s=0;r=e[s++];)for(;-1<n.indexOf(" "+r+" ");)n=n.replace(" "+r+" "," ");o!==(a=It(n))&&i.setAttribute("class",a)}return this},toggleClass:function(o,t){var r=typeof o,s="string"==r||Array.isArray(o);return"boolean"==typeof t&&s?t?this.addClass(o):this.removeClass(o):w(o)?this.each(function(e){k(this).toggleClass(o.call(this,e,At(this),t),t)}):this.each(function(){var e,t,i,n;if(s)for(t=0,i=k(this),n=$t(o);e=n[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==o&&"boolean"!=r||((e=At(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===o?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&-1<(" "+It(At(i))+" ").indexOf(t))return!0;return!1}});var Lt=/\r/g;k.fn.extend({val:function(i){var n,e,o,t=this[0];return arguments.length?(o=w(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=o?i.call(this,e,k(this).val()):i)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(n=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):t?(n=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Lt,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:It(k.text(e))}},select:{get:function(e){var t,i,n,o=e.options,r=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?r+1:o.length;for(n=r<0?l:s?r:0;n<l;n++)if(((i=o[n]).selected||n===r)&&!i.disabled&&(!i.parentNode.disabled||!A(i.parentNode,"optgroup"))){if(t=k(i).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var i,n,o=e.options,r=k.makeArray(t),s=o.length;s--;)((n=o[s]).selected=-1<k.inArray(k.valHooks.option.get(n),r))&&(i=!0);return i||(e.selectedIndex=-1),r}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in S;function zt(e){e.stopPropagation()}var _t=/^(?:focusinfocus|focusoutblur)$/;k.extend(k.event,{trigger:function(e,t,i,n){var o,r,s,a,l,u,c,d,p=[i||C],f=v.call(e,"type")?e.type:e,h=v.call(e,"namespace")?e.namespace.split("."):[];if(r=d=s=i=i||C,3!==i.nodeType&&8!==i.nodeType&&!_t.test(f+k.event.triggered)&&(-1<f.indexOf(".")&&(f=(h=f.split(".")).shift(),h.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[k.expando]?e:new k.Event(f,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[f]||{},n||!c.trigger||!1!==c.trigger.apply(i,t))){if(!n&&!c.noBubble&&!m(i)){for(a=c.delegateType||f,_t.test(a+f)||(r=r.parentNode);r;r=r.parentNode)p.push(r),s=r;s===(i.ownerDocument||C)&&p.push(s.defaultView||s.parentWindow||S)}for(o=0;(r=p[o++])&&!e.isPropagationStopped();)d=r,e.type=1<o?a:c.bindType||f,(u=(Q.get(r,"events")||{})[e.type]&&Q.get(r,"handle"))&&u.apply(r,t),(u=l&&r[l])&&u.apply&&G(r)&&(e.result=u.apply(r,t),!1===e.result&&e.preventDefault());return e.type=f,n||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!G(i)||l&&w(i[f])&&!m(i)&&((s=i[l])&&(i[l]=null),k.event.triggered=f,e.isPropagationStopped()&&d.addEventListener(f,zt),i[f](),e.isPropagationStopped()&&d.removeEventListener(f,zt),k.event.triggered=void 0,s&&(i[l]=s)),e.result}},simulate:function(e,t,i){var n=k.extend(new k.Event,i,{type:e,isSimulated:!0});k.event.trigger(n,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return k.event.trigger(e,t,i,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(i,n){function o(e){k.event.simulate(n,e.target,k.event.fix(e))}k.event.special[n]={setup:function(){var e=this.ownerDocument||this,t=Q.access(e,n);t||e.addEventListener(i,o,!0),Q.access(e,n,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Q.access(e,n)-1;t?Q.access(e,n,t):(e.removeEventListener(i,o,!0),Q.remove(e,n))}}});var Ot=S.location,Ht=Date.now(),jt=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new S.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Dt=/\[\]$/,Pt=/\r?\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function qt(i,e,n,o){var t;if(Array.isArray(e))k.each(e,function(e,t){n||Dt.test(i)?o(i,t):qt(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,n,o)});else if(n||"object"!==x(e))o(i,e);else for(t in e)qt(i+"["+t+"]",e[t],n,o)}k.param=function(e,t){function i(e,t){var i=w(t)?t():t;o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)}var n,o=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return o.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Nt.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var i=k(this).val();return null==i?null:Array.isArray(i)?k.map(i,function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}}):{name:t.name,value:i.replace(Pt,"\r\n")}}).get()}});var Wt=/%20/g,Rt=/#.*$/,Bt=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ut=/^(?:GET|HEAD)$/,Yt=/^\/\//,Xt={},Gt={},Vt="*/".concat("*"),Qt=C.createElement("a");function Zt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,n=0,o=e.toLowerCase().match(D)||[];if(w(t))for(;i=o[n++];)"+"===i[0]?(i=i.slice(1)||"*",(r[i]=r[i]||[]).unshift(t)):(r[i]=r[i]||[]).push(t)}}function Kt(t,o,r,s){var a={},l=t===Gt;function u(e){var n;return a[e]=!0,k.each(t[e]||[],function(e,t){var i=t(o,r,s);return"string"!=typeof i||l||a[i]?l?!(n=i):void 0:(o.dataTypes.unshift(i),u(i),!1)}),n}return u(o.dataTypes[0])||!a["*"]&&u("*")}function Jt(e,t){var i,n,o=k.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((o[i]?e:n=n||{})[i]=t[i]);return n&&k.extend(!0,e,n),e}Qt.href=Ot.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ot.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ot.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,k.ajaxSettings),t):Jt(k.ajaxSettings,e)},ajaxPrefilter:Zt(Xt),ajaxTransport:Zt(Gt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,d,p,i,f,n,h,m,o,r,g=k.ajaxSetup({},t),v=g.context||g,y=g.context&&(v.nodeType||v.jquery)?k(v):k.event,w=k.Deferred(),b=k.Callbacks("once memory"),x=g.statusCode||{},s={},a={},l="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!i)for(i={};t=Ft.exec(p);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==h&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),u(0,t),this}};if(w.promise(T),g.url=((e||g.url||Ot.href)+"").replace(Yt,Ot.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(D)||[""],null==g.crossDomain){n=C.createElement("a");try{n.href=g.url,n.href=n.href,g.crossDomain=Qt.protocol+"//"+Qt.host!=n.protocol+"//"+n.host}catch(e){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=k.param(g.data,g.traditional)),Kt(Xt,g,t,T),h)return T;for(o in(m=k.event&&g.global)&&0==k.active++&&k.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Ut.test(g.type),d=g.url.replace(Rt,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Wt,"+")):(r=g.url.slice(d.length),g.data&&(g.processData||"string"==typeof g.data)&&(d+=(jt.test(d)?"&":"?")+g.data,delete g.data),!1===g.cache&&(d=d.replace(Bt,"$1"),r=(jt.test(d)?"&":"?")+"_="+Ht+++r),g.url=d+r),g.ifModified&&(k.lastModified[d]&&T.setRequestHeader("If-Modified-Since",k.lastModified[d]),k.etag[d]&&T.setRequestHeader("If-None-Match",k.etag[d])),(g.data&&g.hasContent&&!1!==g.contentType||t.contentType)&&T.setRequestHeader("Content-Type",g.contentType),T.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Vt+"; q=0.01":""):g.accepts["*"]),g.headers)T.setRequestHeader(o,g.headers[o]);if(g.beforeSend&&(!1===g.beforeSend.call(v,T,g)||h))return T.abort();if(l="abort",b.add(g.complete),T.done(g.success),T.fail(g.error),c=Kt(Gt,g,t,T)){if(T.readyState=1,m&&y.trigger("ajaxSend",[T,g]),h)return T;g.async&&0<g.timeout&&(f=S.setTimeout(function(){T.abort("timeout")},g.timeout));try{h=!1,c.send(s,u)}catch(e){if(h)throw e;u(-1,e)}}else u(-1,"No Transport");function u(e,t,i,n){var o,r,s,a,l,u=t;h||(h=!0,f&&S.clearTimeout(f),c=void 0,p=n||"",T.readyState=0<e?4:0,o=200<=e&&e<300||304===e,i&&(a=function(e,t,i){for(var n,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){l.unshift(o);break}if(l[0]in i)r=l[0];else{for(o in i){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s=s||o}r=r||s}if(r)return r!==l[0]&&l.unshift(r),i[r]}(g,T,i)),a=function(e,t,i,n){var o,r,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(r=c.shift();r;)if(e.responseFields[r]&&(i[e.responseFields[r]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=u[l+" "+r]||u["* "+r]))for(o in u)if((a=o.split(" "))[1]===r&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[o]:!0!==u[o]&&(r=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(g,a,T,o),o?(g.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(k.lastModified[d]=l),(l=T.getResponseHeader("etag"))&&(k.etag[d]=l)),204===e||"HEAD"===g.type?u="nocontent":304===e?u="notmodified":(u=a.state,r=a.data,o=!(s=a.error))):(s=u,!e&&u||(u="error",e<0&&(e=0))),T.status=e,T.statusText=(t||u)+"",o?w.resolveWith(v,[r,u,T]):w.rejectWith(v,[T,u,s]),T.statusCode(x),x=void 0,m&&y.trigger(o?"ajaxSuccess":"ajaxError",[T,g,o?r:s]),b.fireWith(v,[T,u]),m&&(y.trigger("ajaxComplete",[T,g]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,i){return k.get(e,t,i,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,o){k[o]=function(e,t,i,n){return w(t)&&(n=n||i,i=t,t=void 0),k.ajax(k.extend({url:e,type:o,dataType:n,data:t,success:i},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e,t){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(w(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(i){return w(i)?this.each(function(e){k(this).wrapInner(i.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=w(t);return this.each(function(e){k(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(e){}};var ei={0:200,1223:204},ti=k.ajaxSettings.xhr();y.cors=!!ti&&"withCredentials"in ti,y.ajax=ti=!!ti,k.ajaxTransport(function(o){var r,s;if(y.cors||ti&&!o.crossDomain)return{send:function(e,t){var i,n=o.xhr();if(n.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(i in o.xhrFields)n[i]=o.xhrFields[i];for(i in o.mimeType&&n.overrideMimeType&&n.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)n.setRequestHeader(i,e[i]);r=function(e){return function(){r&&(r=s=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===e?n.abort():"error"===e?"number"!=typeof n.status?t(0,"error"):t(n.status,n.statusText):t(ei[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=r(),s=n.onerror=n.ontimeout=r("error"),void 0!==n.onabort?n.onabort=s:n.onreadystatechange=function(){4===n.readyState&&S.setTimeout(function(){r&&s()})},r=r("abort");try{n.send(o.hasContent&&o.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(i){var n,o;if(i.crossDomain||i.scriptAttrs)return{send:function(e,t){n=k("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",o=function(e){n.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(n[0])},abort:function(){o&&o()}}});var ii,ni=[],oi=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=ni.pop()||k.expando+"_"+Ht++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,i){var n,o,r,s=!1!==e.jsonp&&(oi.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&oi.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=w(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(oi,"$1"+n):!1!==e.jsonp&&(e.url+=(jt.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return r||k.error(n+" was not called"),r[0]},e.dataTypes[0]="json",o=S[n],S[n]=function(){r=arguments},i.always(function(){void 0===o?k(S).removeProp(n):S[n]=o,e[n]&&(e.jsonpCallback=t.jsonpCallback,ni.push(n)),r&&w(o)&&o(r[0]),r=o=void 0}),"script"}),y.createHTMLDocument=((ii=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ii.childNodes.length),k.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(y.createHTMLDocument?((n=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(n)):t=C),r=!i&&[],(o=$.exec(e))?[t.createElement(o[1])]:(o=xe([e],t,r),r&&r.length&&k(r).remove(),k.merge([],o.childNodes)));var n,o,r},k.fn.load=function(e,t,i){var n,o,r,s=this,a=e.indexOf(" ");return-1<a&&(n=It(e.slice(a)),e=e.slice(0,a)),w(t)?(i=t,t=void 0):t&&"object"==typeof t&&(o="POST"),0<s.length&&k.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(n?k("<div>").append(k.parseHTML(e)).find(n):e)}).always(i&&function(e,t){s.each(function(){i.apply(this,r||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,i){var n,o,r,s,a,l,u=k.css(e,"position"),c=k(e),d={};"static"===u&&(e.style.position="relative"),a=c.offset(),r=k.css(e,"top"),l=k.css(e,"left"),o=("absolute"===u||"fixed"===u)&&-1<(r+l).indexOf("auto")?(s=(n=c.position()).top,n.left):(s=parseFloat(r)||0,parseFloat(l)||0),w(t)&&(t=t.call(e,i,k.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):c.css(d)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],o={top:0,left:0};if("fixed"===k.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((o=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),o.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-k.css(n,"marginTop",!0),left:t.left-o.left-k.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||oe})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var r="pageYOffset"===o;k.fn[t]=function(e){return B(this,function(e,t,i){var n;if(m(e)?n=e:9===e.nodeType&&(n=e.defaultView),void 0===i)return n?n[o]:e[t];n?n.scrollTo(r?n.pageXOffset:i,r?i:n.pageYOffset):e[t]=i},t,e,arguments.length)}}),k.each(["top","left"],function(e,i){k.cssHooks[i]=Je(y.pixelPosition,function(e,t){if(t)return t=Ke(e,i),Xe.test(t)?k(e).position()[i]+"px":t})}),k.each({Height:"height",Width:"width"},function(s,a){k.each({padding:"inner"+s,content:a,"":"outer"+s},function(n,r){k.fn[r]=function(e,t){var i=arguments.length&&(n||"boolean"!=typeof e),o=n||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,i){var n;return m(e)?0===r.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+s],n["scroll"+s],e.body["offset"+s],n["offset"+s],n["client"+s])):void 0===i?k.css(e,t,o):k.style(e,t,i,o)},a,i?e:void 0,i)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,i){k.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),k.proxy=function(e,t){var i,n,o;if("string"==typeof t&&(i=e[t],t=e,e=i),w(e))return n=a.call(arguments,2),(o=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||k.guid++,o},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=w,k.isWindow=m,k.camelCase=X,k.type=x,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var ri=S.jQuery,si=S.$;return k.noConflict=function(e){return S.$===k&&(S.$=si),e&&S.jQuery===k&&(S.jQuery=ri),k},e||(S.jQuery=S.$=k),k}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(u){"use strict";var o,s=window.Slick||{};o=0,(s=function(e,t){var i,n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:u(e),appendDots:u(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return u('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},u.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=u(e),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,i=u(e).data("slick")||{},n.options=u.extend({},n.defaults,t,i),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=u.proxy(n.autoPlay,n),n.autoPlayClear=u.proxy(n.autoPlayClear,n),n.autoPlayIterator=u.proxy(n.autoPlayIterator,n),n.changeSlide=u.proxy(n.changeSlide,n),n.clickHandler=u.proxy(n.clickHandler,n),n.selectHandler=u.proxy(n.selectHandler,n),n.setPosition=u.proxy(n.setPosition,n),n.swipeHandler=u.proxy(n.swipeHandler,n),n.dragHandler=u.proxy(n.dragHandler,n),n.keyHandler=u.proxy(n.keyHandler,n),n.instanceUid=o++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},s.prototype.addSlide=s.prototype.slickAdd=function(e,t,i){var n=this;if("boolean"==typeof t)i=t,t=null;else if(t<0||t>=n.slideCount)return!1;n.unload(),"number"==typeof t?0===t&&0===n.$slides.length?u(e).appendTo(n.$slideTrack):i?u(e).insertBefore(n.$slides.eq(t)):u(e).insertAfter(n.$slides.eq(t)):!0===i?u(e).prependTo(n.$slideTrack):u(e).appendTo(n.$slideTrack),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slides.each(function(e,t){u(t).attr("data-slick-index",e)}),n.$slidesCache=n.$slides,n.reinit()},s.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},s.prototype.animateSlide=function(e,t){var i={},n=this;n.animateHeight(),!0===n.options.rtl&&!1===n.options.vertical&&(e=-e),!1===n.transformsEnabled?!1===n.options.vertical?n.$slideTrack.animate({left:e},n.options.speed,n.options.easing,t):n.$slideTrack.animate({top:e},n.options.speed,n.options.easing,t):!1===n.cssTransitions?(!0===n.options.rtl&&(n.currentLeft=-n.currentLeft),u({animStart:n.currentLeft}).animate({animStart:e},{duration:n.options.speed,easing:n.options.easing,step:function(e){e=Math.ceil(e),!1===n.options.vertical?i[n.animType]="translate("+e+"px, 0px)":i[n.animType]="translate(0px,"+e+"px)",n.$slideTrack.css(i)},complete:function(){t&&t.call()}})):(n.applyTransition(),e=Math.ceil(e),!1===n.options.vertical?i[n.animType]="translate3d("+e+"px, 0px, 0px)":i[n.animType]="translate3d(0px,"+e+"px, 0px)",n.$slideTrack.css(i),t&&setTimeout(function(){n.disableTransition(),t.call()},n.options.speed))},s.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=u(e).not(this.$slider)),e},s.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var e=u(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},s.prototype.applyTransition=function(e){var t=this,i={};!1===t.options.fade?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},s.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},s.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},s.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},s.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=u(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=u(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},s.prototype.buildDots=function(){var e,t,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),t=u("<ul />").addClass(i.options.dotsClass),e=0;e<=i.getDotCount();e+=1)t.append(u("<li />").append(i.options.customPaging.call(this,i,e)));i.$dots=t.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},s.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){u(t).attr("data-slick-index",e).data("originalStyling",u(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?u('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),u("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},s.prototype.buildRows=function(){var e,t,i,n,o,r,s,a=this;if(n=document.createDocumentFragment(),r=a.$slider.children(),0<a.options.rows){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var u=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var c=e*s+(t*a.options.slidesPerRow+i);r.get(c)&&u.appendChild(r.get(c))}l.appendChild(u)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},s.prototype.checkResponsive=function(e,t){var i,n,o,r=this,s=!1,a=r.$slider.width(),l=window.innerWidth||u(window).width();if("window"===r.respondTo?o=l:"slider"===r.respondTo?o=a:"min"===r.respondTo&&(o=Math.min(l,a)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(i in n=null,r.breakpoints)r.breakpoints.hasOwnProperty(i)&&(!1===r.originalSettings.mobileFirst?o<r.breakpoints[i]&&(n=r.breakpoints[i]):o>r.breakpoints[i]&&(n=r.breakpoints[i]));null!==n?null!==r.activeBreakpoint&&n===r.activeBreakpoint&&!t||(r.activeBreakpoint=n,"unslick"===r.breakpointSettings[n]?r.unslick(n):(r.options=u.extend({},r.originalSettings,r.breakpointSettings[n]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),s=n):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),s=n),e||!1===s||r.$slider.trigger("breakpoint",[r,s])}},s.prototype.changeSlide=function(e,t){var i,n,o=this,r=u(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),i=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,e.data.message){case"previous":n=0==i?o.options.slidesToScroll:o.options.slidesToShow-i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-n,!1,t);break;case"next":n=0==i?o.options.slidesToScroll:i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+n,!1,t);break;case"index":var s=0===e.data.index?0:e.data.index||r.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(s),!1,t),r.children().trigger("focus");break;default:return}},s.prototype.checkNavigable=function(e){var t,i;if(i=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var n in t){if(e<t[n]){e=i;break}i=t[n]}return e},s.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(u("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",u.proxy(e.interrupt,e,!0)).off("mouseleave.slick",u.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),u(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&u(e.$slideTrack).children().off("click.slick",e.selectHandler),u(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),u(window).off("resize.slick.slick-"+e.instanceUid,e.resize),u("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),u(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},s.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",u.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",u.proxy(e.interrupt,e,!1))},s.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},s.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},s.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),u(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){u(this).attr("style",u(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},s.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(t):this.$slides.eq(e).css(t)},s.prototype.fadeSlide=function(e,t){var i=this;!1===i.cssTransitions?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout(function(){i.disableTransition(e),t.call()},i.options.speed))},s.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},s.prototype.filterSlides=s.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},s.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(e){e.stopImmediatePropagation();var t=u(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=t.is(":focus"),i.autoPlay())},0)})},s.prototype.getCurrent=s.prototype.slickCurrentSlide=function(){return this.currentSlide},s.prototype.getDotCount=function(){var e=this,t=0,i=0,n=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++n;else for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)n=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else n=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return n-1},s.prototype.getLeft=function(e){var t,i,n,o,r=this,s=0;return r.slideOffset=0,i=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=i*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(s=e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,(r.options.slidesToShow-(e-r.slideCount))*i*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,r.slideCount%r.options.slidesToScroll*i*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(e+r.options.slidesToShow-r.slideCount)*i),r.slideCount<=r.options.slidesToShow&&(s=r.slideOffset=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*i*-1+s,!0===r.options.variableWidth&&(n=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?n[0]?-1*(r.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===r.options.centerMode&&(n=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?n[0]?-1*(r.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,t+=(r.$list.width()-n.outerWidth())/2)),t},s.prototype.getOption=s.prototype.slickGetOption=function(e){return this.options[e]},s.prototype.getNavigableIndexes=function(){var e,t=this,i=0,n=0,o=[];for(e=!1===t.options.infinite?t.slideCount:(i=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,2*t.slideCount);i<e;)o.push(i),i=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},s.prototype.getSlick=function(){return this},s.prototype.getSlideCount=function(){var i,n,o=this;return n=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0,!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(e,t){if(t.offsetLeft-n+u(t).outerWidth()/2>-1*o.swipeLeft)return i=t,!1}),Math.abs(u(i).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},s.prototype.goTo=s.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},s.prototype.init=function(e){var t=this;u(t.$slider).hasClass("slick-initialized")||(u(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},s.prototype.initADA=function(){var n=this,i=Math.ceil(n.slideCount/n.options.slidesToShow),o=n.getNavigableIndexes().filter(function(e){return 0<=e&&e<n.slideCount});n.$slides.add(n.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==n.$dots&&(n.$slides.not(n.$slideTrack.find(".slick-cloned")).each(function(e){var t=o.indexOf(e);if(u(this).attr({role:"tabpanel",id:"slick-slide"+n.instanceUid+e,tabindex:-1}),-1!==t){var i="slick-slide-control"+n.instanceUid+t;u("#"+i).length&&u(this).attr({"aria-describedby":i})}}),n.$dots.attr("role","tablist").find("li").each(function(e){var t=o[e];u(this).attr({role:"presentation"}),u(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+n.instanceUid+e,"aria-controls":"slick-slide"+n.instanceUid+t,"aria-label":e+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(n.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=n.currentSlide,t=e+n.options.slidesToShow;e<t;e++)n.options.focusOnChange?n.$slides.eq(e).attr({tabindex:"0"}):n.$slides.eq(e).removeAttr("tabindex");n.activateADA()},s.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},s.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(u("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&u("li",e.$dots).on("mouseenter.slick",u.proxy(e.interrupt,e,!0)).on("mouseleave.slick",u.proxy(e.interrupt,e,!1))},s.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",u.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",u.proxy(e.interrupt,e,!1)))},s.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),u(document).on(e.visibilityChange,u.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&u(e.$slideTrack).children().on("click.slick",e.selectHandler),u(window).on("orientationchange.slick.slick-"+e.instanceUid,u.proxy(e.orientationChange,e)),u(window).on("resize.slick.slick-"+e.instanceUid,u.proxy(e.resize,e)),u("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),u(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),u(e.setPosition)},s.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},s.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},s.prototype.lazyLoad=function(){var e,t,i,r=this;function n(e){u("img[data-lazy]",e).each(function(){var e=u(this),t=u(this).attr("data-lazy"),i=u(this).attr("data-srcset"),n=u(this).attr("data-sizes")||r.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){e.animate({opacity:0},100,function(){i&&(e.attr("srcset",i),n&&e.attr("sizes",n)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,e,t])})},o.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,t])},o.src=t})}if(!0===r.options.centerMode?i=!0===r.options.infinite?(t=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(t=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),r.options.slidesToShow/2+1+2+r.currentSlide):(t=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,i=Math.ceil(t+r.options.slidesToShow),!0===r.options.fade&&(0<t&&t--,i<=r.slideCount&&i++)),e=r.$slider.find(".slick-slide").slice(t,i),"anticipated"===r.options.lazyLoad)for(var o=t-1,s=i,a=r.$slider.find(".slick-slide"),l=0;l<r.options.slidesToScroll;l++)o<0&&(o=r.slideCount-1),e=(e=e.add(a.eq(o))).add(a.eq(s)),o--,s++;n(e),r.slideCount<=r.options.slidesToShow?n(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?n(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&n(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},s.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},s.prototype.next=s.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},s.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},s.prototype.pause=s.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},s.prototype.play=s.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},s.prototype.postSlide=function(e){var t=this;t.unslicked||(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange&&u(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()))},s.prototype.prev=s.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},s.prototype.preventDefault=function(e){e.preventDefault()},s.prototype.progressiveLazyLoad=function(e){e=e||1;var t,i,n,o,r,s=this,a=u("img[data-lazy]",s.$slider);a.length?(t=a.first(),i=t.attr("data-lazy"),n=t.attr("data-srcset"),o=t.attr("data-sizes")||s.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){n&&(t.attr("srcset",n),o&&t.attr("sizes",o)),t.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,t,i]),s.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout(function(){s.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,i]),s.progressiveLazyLoad())},r.src=i):s.$slider.trigger("allImagesLoaded",[s])},s.prototype.refresh=function(e){var t,i,n=this;i=n.slideCount-n.options.slidesToShow,!n.options.infinite&&n.currentSlide>i&&(n.currentSlide=i),n.slideCount<=n.options.slidesToShow&&(n.currentSlide=0),t=n.currentSlide,n.destroy(!0),u.extend(n,n.initials,{currentSlide:t}),n.init(),e||n.changeSlide({data:{message:"index",index:t}},!1)},s.prototype.registerBreakpoints=function(){var e,t,i,n=this,o=n.options.responsive||null;if("array"===u.type(o)&&o.length){for(e in n.respondTo=n.options.respondTo||"window",o)if(i=n.breakpoints.length-1,o.hasOwnProperty(e)){for(t=o[e].breakpoint;0<=i;)n.breakpoints[i]&&n.breakpoints[i]===t&&n.breakpoints.splice(i,1),i--;n.breakpoints.push(t),n.breakpointSettings[t]=o[e].settings}n.breakpoints.sort(function(e,t){return n.options.mobileFirst?e-t:t-e})}},s.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&u(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},s.prototype.resize=function(){var e=this;u(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=u(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},s.prototype.removeSlide=s.prototype.slickRemove=function(e,t,i){var n=this;if(e="boolean"==typeof e?!0===(t=e)?0:n.slideCount-1:!0===t?--e:e,n.slideCount<1||e<0||e>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(e).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},s.prototype.setCSS=function(e){var t,i,n=this,o={};!0===n.options.rtl&&(e=-e),t="left"==n.positionProp?Math.ceil(e)+"px":"0px",i="top"==n.positionProp?Math.ceil(e)+"px":"0px",o[n.positionProp]=e,!1===n.transformsEnabled||(!(o={})===n.cssTransitions?o[n.animType]="translate("+t+", "+i+")":o[n.animType]="translate3d("+t+", "+i+", 0px)"),n.$slideTrack.css(o)},s.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},s.prototype.setFade=function(){var i,n=this;n.$slides.each(function(e,t){i=n.slideWidth*e*-1,!0===n.options.rtl?u(t).css({position:"relative",right:i,top:0,zIndex:n.options.zIndex-2,opacity:0}):u(t).css({position:"relative",left:i,top:0,zIndex:n.options.zIndex-2,opacity:0})}),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},s.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},s.prototype.setOption=s.prototype.slickSetOption=function(){var e,t,i,n,o,r=this,s=!1;if("object"===u.type(arguments[0])?(i=arguments[0],s=arguments[1],o="multiple"):"string"===u.type(arguments[0])&&(n=arguments[1],s=arguments[2],"responsive"===(i=arguments[0])&&"array"===u.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[i]=n;else if("multiple"===o)u.each(i,function(e,t){r.options[e]=t});else if("responsive"===o)for(t in n)if("array"!==u.type(r.options.responsive))r.options.responsive=[n[t]];else{for(e=r.options.responsive.length-1;0<=e;)r.options.responsive[e].breakpoint===n[t].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(n[t])}s&&(r.unload(),r.reinit())},s.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},s.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},s.prototype.setSlideClasses=function(e){var t,i,n,o,r=this;if(i=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(t<=e&&e<=r.slideCount-1-t?r.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(n=r.options.slidesToShow+e,i.slice(n-t+1+s,n+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&i.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=r.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,n=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?i.slice(n-(r.options.slidesToShow-o),n+o).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},s.prototype.setupInfinite=function(){var e,t,i,n=this;if(!0===n.options.fade&&(n.options.centerMode=!1),!0===n.options.infinite&&!1===n.options.fade&&(t=null,n.slideCount>n.options.slidesToShow)){for(i=!0===n.options.centerMode?n.options.slidesToShow+1:n.options.slidesToShow,e=n.slideCount;e>n.slideCount-i;e-=1)t=e-1,u(n.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-n.slideCount).prependTo(n.$slideTrack).addClass("slick-cloned");for(e=0;e<i+n.slideCount;e+=1)t=e,u(n.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+n.slideCount).appendTo(n.$slideTrack).addClass("slick-cloned");n.$slideTrack.find(".slick-cloned").find("[id]").each(function(){u(this).attr("id","")})}},s.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},s.prototype.selectHandler=function(e){var t=u(e.target).is(".slick-slide")?u(e.target):u(e.target).parents(".slick-slide"),i=parseInt(t.attr("data-slick-index"));i=i||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},s.prototype.slideHandler=function(e,t,i){var n,o,r,s,a,l,u=this;if(t=t||!1,!(!0===u.animating&&!0===u.options.waitForAnimate||!0===u.options.fade&&u.currentSlide===e))if(!1===t&&u.asNavFor(e),n=e,a=u.getLeft(n),s=u.getLeft(u.currentSlide),u.currentLeft=null===u.swipeLeft?s:u.swipeLeft,!1===u.options.infinite&&!1===u.options.centerMode&&(e<0||e>u.getDotCount()*u.options.slidesToScroll))!1===u.options.fade&&(n=u.currentSlide,!0!==i&&u.slideCount>u.options.slidesToShow?u.animateSlide(s,function(){u.postSlide(n)}):u.postSlide(n));else if(!1===u.options.infinite&&!0===u.options.centerMode&&(e<0||e>u.slideCount-u.options.slidesToScroll))!1===u.options.fade&&(n=u.currentSlide,!0!==i&&u.slideCount>u.options.slidesToShow?u.animateSlide(s,function(){u.postSlide(n)}):u.postSlide(n));else{if(u.options.autoplay&&clearInterval(u.autoPlayTimer),o=n<0?u.slideCount%u.options.slidesToScroll!=0?u.slideCount-u.slideCount%u.options.slidesToScroll:u.slideCount+n:n>=u.slideCount?u.slideCount%u.options.slidesToScroll!=0?0:n-u.slideCount:n,u.animating=!0,u.$slider.trigger("beforeChange",[u,u.currentSlide,o]),r=u.currentSlide,u.currentSlide=o,u.setSlideClasses(u.currentSlide),u.options.asNavFor&&(l=(l=u.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(u.currentSlide),u.updateDots(),u.updateArrows(),!0===u.options.fade)return!0!==i?(u.fadeSlideOut(r),u.fadeSlide(o,function(){u.postSlide(o)})):u.postSlide(o),void u.animateHeight();!0!==i&&u.slideCount>u.options.slidesToShow?u.animateSlide(a,function(){u.postSlide(o)}):u.postSlide(o)}},s.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},s.prototype.swipeDirection=function(){var e,t,i,n,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,i=Math.atan2(t,e),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&0<=n?!1===o.options.rtl?"left":"right":n<=360&&315<=n?!1===o.options.rtl?"left":"right":135<=n&&n<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?35<=n&&n<=135?"down":"up":"vertical"},s.prototype.swipeEnd=function(e){var t,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1;if(n.interrupted=!1,n.shouldClick=!(10<n.touchObject.swipeLength),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(t),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},s.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},s.prototype.swipeMove=function(e){var t,i,n,o,r,s,a=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<s?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),i=a.swipeDirection(),void 0!==e.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+n*o:a.swipeLeft=t+n*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+n*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},s.prototype.swipeStart=function(e){var t,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,i.dragging=!0},s.prototype.unfilterSlides=s.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},s.prototype.unload=function(){var e=this;u(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},s.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},s.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},s.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},s.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},u.fn.slick=function(){var e,t,i=this,n=arguments[0],o=Array.prototype.slice.call(arguments,1),r=i.length;for(e=0;e<r;e++)if("object"==typeof n||void 0===n?i[e].slick=new s(i[e],n):t=i[e].slick[n].apply(i[e].slick,o),void 0!==t)return t;return i}}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?e(require("jquery")):e(window.jQuery||window.Zepto)}(function(c){function e(){}function d(e,t){m.ev.on("mfp"+e+b,t)}function p(e,t,i,n){var o=document.createElement("div");return o.className="mfp-"+e,i&&(o.innerHTML=i),n?t&&t.appendChild(o):(o=c(o),t&&o.appendTo(t)),o}function f(e,t){m.ev.triggerHandler("mfp"+e,t),m.st.callbacks&&(e=e.charAt(0).toLowerCase()+e.slice(1),m.st.callbacks[e]&&m.st.callbacks[e].apply(m,c.isArray(t)?t:[t]))}function h(e){return e===t&&m.currTemplate.closeBtn||(m.currTemplate.closeBtn=c(m.st.closeMarkup.replace("%title%",m.st.tClose)),t=e),m.currTemplate.closeBtn}function r(){c.magnificPopup.instance||((m=new e).init(),c.magnificPopup.instance=m)}var m,n,g,o,v,t,l="Close",u="BeforeClose",y="MarkupParse",w="Open",b=".mfp",x="mfp-ready",i="mfp-removing",s="mfp-prevent-close",a=!!window.jQuery,T=c(window);e.prototype={constructor:e,init:function(){var e=navigator.appVersion;m.isLowIE=m.isIE8=document.all&&!document.addEventListener,m.isAndroid=/android/gi.test(e),m.isIOS=/iphone|ipad|ipod/gi.test(e),m.supportsTransition=function(){var e=document.createElement("p").style,t=["ms","O","Moz","Webkit"];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+"Transition"in e)return!0;return!1}(),m.probablyMobile=m.isAndroid||m.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),g=c(document),m.popupsCache={}},open:function(e){var t;if(!1===e.isObj){m.items=e.items.toArray(),m.index=0;var i,n=e.items;for(t=0;t<n.length;t++)if((i=n[t]).parsed&&(i=i.el[0]),i===e.el[0]){m.index=t;break}}else m.items=c.isArray(e.items)?e.items:[e.items],m.index=e.index||0;if(!m.isOpen){m.types=[],v="",e.mainEl&&e.mainEl.length?m.ev=e.mainEl.eq(0):m.ev=g,e.key?(m.popupsCache[e.key]||(m.popupsCache[e.key]={}),m.currTemplate=m.popupsCache[e.key]):m.currTemplate={},m.st=c.extend(!0,{},c.magnificPopup.defaults,e),m.fixedContentPos="auto"===m.st.fixedContentPos?!m.probablyMobile:m.st.fixedContentPos,m.st.modal&&(m.st.closeOnContentClick=!1,m.st.closeOnBgClick=!1,m.st.showCloseBtn=!1,m.st.enableEscapeKey=!1),m.bgOverlay||(m.bgOverlay=p("bg").on("click"+b,function(){m.close()}),m.wrap=p("wrap").attr("tabindex",-1).on("click"+b,function(e){m._checkIfClose(e.target)&&m.close()}),m.container=p("container",m.wrap)),m.contentContainer=p("content"),m.st.preloader&&(m.preloader=p("preloader",m.container,m.st.tLoading));var o=c.magnificPopup.modules;for(t=0;t<o.length;t++){var r=o[t];r=r.charAt(0).toUpperCase()+r.slice(1),m["init"+r].call(m)}f("BeforeOpen"),m.st.showCloseBtn&&(m.st.closeBtnInside?(d(y,function(e,t,i,n){i.close_replaceWith=h(n.type)}),v+=" mfp-close-btn-in"):m.wrap.append(h())),m.st.alignTop&&(v+=" mfp-align-top"),m.fixedContentPos?m.wrap.css({overflow:m.st.overflowY,overflowX:"hidden",overflowY:m.st.overflowY}):m.wrap.css({top:T.scrollTop(),position:"absolute"}),!1!==m.st.fixedBgPos&&("auto"!==m.st.fixedBgPos||m.fixedContentPos)||m.bgOverlay.css({height:g.height(),position:"absolute"}),m.st.enableEscapeKey&&g.on("keyup"+b,function(e){27===e.keyCode&&m.close()}),T.on("resize"+b,function(){m.updateSize()}),m.st.closeOnContentClick||(v+=" mfp-auto-cursor"),v&&m.wrap.addClass(v);var s=m.wH=T.height(),a={};if(m.fixedContentPos&&m._hasScrollBar(s)){var l=m._getScrollbarSize();l&&(a.marginRight=l)}m.fixedContentPos&&(m.isIE7?c("body, html").css("overflow","hidden"):a.overflow="hidden");var u=m.st.mainClass;return m.isIE7&&(u+=" mfp-ie7"),u&&m._addClassToMFP(u),m.updateItemHTML(),f("BuildControls"),c("html").css(a),m.bgOverlay.add(m.wrap).prependTo(m.st.prependTo||c(document.body)),m._lastFocusedEl=document.activeElement,setTimeout(function(){m.content?(m._addClassToMFP(x),m._setFocus()):m.bgOverlay.addClass(x),g.on("focusin"+b,m._onFocusIn)},16),m.isOpen=!0,m.updateSize(s),f(w),e}m.updateItemHTML()},close:function(){m.isOpen&&(f(u),m.isOpen=!1,m.st.removalDelay&&!m.isLowIE&&m.supportsTransition?(m._addClassToMFP(i),setTimeout(function(){m._close()},m.st.removalDelay)):m._close())},_close:function(){f(l);var e=i+" "+x+" ";if(m.bgOverlay.detach(),m.wrap.detach(),m.container.empty(),m.st.mainClass&&(e+=m.st.mainClass+" "),m._removeClassFromMFP(e),m.fixedContentPos){var t={marginRight:""};m.isIE7?c("body, html").css("overflow",""):t.overflow="",c("html").css(t)}g.off("keyup.mfp focusin"+b),m.ev.off(b),m.wrap.attr("class","mfp-wrap").removeAttr("style"),m.bgOverlay.attr("class","mfp-bg"),m.container.attr("class","mfp-container"),!m.st.showCloseBtn||m.st.closeBtnInside&&!0!==m.currTemplate[m.currItem.type]||m.currTemplate.closeBtn&&m.currTemplate.closeBtn.detach(),m.st.autoFocusLast&&m._lastFocusedEl&&c(m._lastFocusedEl).focus(),m.currItem=null,m.content=null,m.currTemplate=null,m.prevHeight=0,f("AfterClose")},updateSize:function(e){if(m.isIOS){var t=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*t;m.wrap.css("height",i),m.wH=i}else m.wH=e||T.height();m.fixedContentPos||m.wrap.css("height",m.wH),f("Resize")},updateItemHTML:function(){var e=m.items[m.index];m.contentContainer.detach(),m.content&&m.content.detach(),e.parsed||(e=m.parseEl(m.index));var t=e.type;if(f("BeforeChange",[m.currItem?m.currItem.type:"",t]),m.currItem=e,!m.currTemplate[t]){var i=!!m.st[t]&&m.st[t].markup;f("FirstMarkupParse",i),m.currTemplate[t]=!i||c(i)}o&&o!==e.type&&m.container.removeClass("mfp-"+o+"-holder");var n=m["get"+t.charAt(0).toUpperCase()+t.slice(1)](e,m.currTemplate[t]);m.appendContent(n,t),e.preloaded=!0,f("Change",e),o=e.type,m.container.prepend(m.contentContainer),f("AfterChange")},appendContent:function(e,t){(m.content=e)?m.st.showCloseBtn&&m.st.closeBtnInside&&!0===m.currTemplate[t]?m.content.find(".mfp-close").length||m.content.append(h()):m.content=e:m.content="",f("BeforeAppend"),m.container.addClass("mfp-"+t+"-holder"),m.contentContainer.append(m.content)},parseEl:function(e){var t,i=m.items[e];if((i=i.tagName?{el:c(i)}:(t=i.type,{data:i,src:i.src})).el){for(var n=m.types,o=0;o<n.length;o++)if(i.el.hasClass("mfp-"+n[o])){t=n[o];break}i.src=i.el.attr("data-mfp-src"),i.src||(i.src=i.el.attr("href"))}return i.type=t||m.st.type||"inline",i.index=e,i.parsed=!0,m.items[e]=i,f("ElementParse",i),m.items[e]},addGroup:function(t,i){function e(e){e.mfpEl=this,m._openClick(e,t,i)}var n="click.magnificPopup";(i=i||{}).mainEl=t,i.items?(i.isObj=!0,t.off(n).on(n,e)):(i.isObj=!1,i.delegate?t.off(n).on(n,i.delegate,e):(i.items=t).off(n).on(n,e))},_openClick:function(e,t,i){if((void 0!==i.midClick?i.midClick:c.magnificPopup.defaults.midClick)||!(2===e.which||e.ctrlKey||e.metaKey||e.altKey||e.shiftKey)){var n=void 0!==i.disableOn?i.disableOn:c.magnificPopup.defaults.disableOn;if(n)if(c.isFunction(n)){if(!n.call(m))return!0}else if(T.width()<n)return!0;e.type&&(e.preventDefault(),m.isOpen&&e.stopPropagation()),i.el=c(e.mfpEl),i.delegate&&(i.items=t.find(i.delegate)),m.open(i)}},updateStatus:function(e,t){if(m.preloader){n!==e&&m.container.removeClass("mfp-s-"+n),t||"loading"!==e||(t=m.st.tLoading);var i={status:e,text:t};f("UpdateStatus",i),e=i.status,t=i.text,m.preloader.html(t),m.preloader.find("a").on("click",function(e){e.stopImmediatePropagation()}),m.container.addClass("mfp-s-"+e),n=e}},_checkIfClose:function(e){if(!c(e).hasClass(s)){var t=m.st.closeOnContentClick,i=m.st.closeOnBgClick;if(t&&i)return!0;if(!m.content||c(e).hasClass("mfp-close")||m.preloader&&e===m.preloader[0])return!0;if(e===m.content[0]||c.contains(m.content[0],e)){if(t)return!0}else if(i&&c.contains(document,e))return!0;return!1}},_addClassToMFP:function(e){m.bgOverlay.addClass(e),m.wrap.addClass(e)},_removeClassFromMFP:function(e){this.bgOverlay.removeClass(e),m.wrap.removeClass(e)},_hasScrollBar:function(e){return(m.isIE7?g.height():document.body.scrollHeight)>(e||T.height())},_setFocus:function(){(m.st.focus?m.content.find(m.st.focus).eq(0):m.wrap).focus()},_onFocusIn:function(e){if(e.target!==m.wrap[0]&&!c.contains(m.wrap[0],e.target))return m._setFocus(),!1},_parseMarkup:function(o,e,t){var r;t.data&&(e=c.extend(t.data,e)),f(y,[o,e,t]),c.each(e,function(e,t){if(void 0===t||!1===t)return!0;if(1<(r=e.split("_")).length){var i=o.find(b+"-"+r[0]);if(0<i.length){var n=r[1];"replaceWith"===n?i[0]!==t[0]&&i.replaceWith(t):"img"===n?i.is("img")?i.attr("src",t):i.replaceWith(c("<img>").attr("src",t).attr("class",i.attr("class"))):i.attr(r[1],t)}}else o.find(b+"-"+e).html(t)})},_getScrollbarSize:function(){if(void 0===m.scrollbarSize){var e=document.createElement("div");e.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(e),m.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return m.scrollbarSize}},c.magnificPopup={instance:null,proto:e.prototype,modules:[],open:function(e,t){return r(),(e=e?c.extend(!0,{},e):{}).isObj=!0,e.index=t||0,this.instance.open(e)},close:function(){return c.magnificPopup.instance&&c.magnificPopup.instance.close()},registerModule:function(e,t){t.options&&(c.magnificPopup.defaults[e]=t.options),c.extend(this.proto,t.proto),this.modules.push(e)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},c.fn.magnificPopup=function(e){r();var t=c(this);if("string"==typeof e)if("open"===e){var i,n=a?t.data("magnificPopup"):t[0].magnificPopup,o=parseInt(arguments[1],10)||0;i=n.items?n.items[o]:(i=t,n.delegate&&(i=i.find(n.delegate)),i.eq(o)),m._openClick({mfpEl:i},t,n)}else m.isOpen&&m[e].apply(m,Array.prototype.slice.call(arguments,1));else e=c.extend(!0,{},e),a?t.data("magnificPopup",e):t[0].magnificPopup=e,m.addGroup(t,e);return t};function S(){E&&(k.after(E.addClass(C)).detach(),E=null)}var C,k,E,I="inline";c.magnificPopup.registerModule(I,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){m.types.push(I),d(l+"."+I,function(){S()})},getInline:function(e,t){if(S(),e.src){var i=m.st.inline,n=c(e.src);if(n.length){var o=n[0].parentNode;o&&o.tagName&&(k||(C=i.hiddenClass,k=p(C),C="mfp-"+C),E=n.after(k).detach().removeClass(C)),m.updateStatus("ready")}else m.updateStatus("error",i.tNotFound),n=c("<div>");return e.inlineElement=n}return m.updateStatus("ready"),m._parseMarkup(t,{},e),t}}});function A(){L&&c(document.body).removeClass(L)}function $(){A(),m.req&&m.req.abort()}var L,z="ajax";c.magnificPopup.registerModule(z,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){m.types.push(z),L=m.st.ajax.cursor,d(l+"."+z,$),d("BeforeChange."+z,$)},getAjax:function(o){L&&c(document.body).addClass(L),m.updateStatus("loading");var e=c.extend({url:o.src,success:function(e,t,i){var n={data:e,xhr:i};f("ParseAjax",n),m.appendContent(c(n.data),z),o.finished=!0,A(),m._setFocus(),setTimeout(function(){m.wrap.addClass(x)},16),m.updateStatus("ready"),f("AjaxContentAdded")},error:function(){A(),o.finished=o.loadError=!0,m.updateStatus("error",m.st.ajax.tError.replace("%url%",o.src))}},m.st.ajax.settings);return m.req=c.ajax(e),""}}});var _;c.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var e=m.st.image,t=".image";m.types.push("image"),d(w+t,function(){"image"===m.currItem.type&&e.cursor&&c(document.body).addClass(e.cursor)}),d(l+t,function(){e.cursor&&c(document.body).removeClass(e.cursor),T.off("resize"+b)}),d("Resize"+t,m.resizeImage),m.isLowIE&&d("AfterChange",m.resizeImage)},resizeImage:function(){var e=m.currItem;if(e&&e.img&&m.st.image.verticalFit){var t=0;m.isLowIE&&(t=parseInt(e.img.css("padding-top"),10)+parseInt(e.img.css("padding-bottom"),10)),e.img.css("max-height",m.wH-t)}},_onImageHasSize:function(e){e.img&&(e.hasSize=!0,_&&clearInterval(_),e.isCheckingImgSize=!1,f("ImageHasSize",e),e.imgHidden&&(m.content&&m.content.removeClass("mfp-loading"),e.imgHidden=!1))},findImageSize:function(t){var i=0,n=t.img[0],o=function(e){_&&clearInterval(_),_=setInterval(function(){0<n.naturalWidth?m._onImageHasSize(t):(200<i&&clearInterval(_),3===++i?o(10):40===i?o(50):100===i&&o(500))},e)};o(1)},getImage:function(e,t){var i=0,n=function(){e&&(e.img[0].complete?(e.img.off(".mfploader"),e===m.currItem&&(m._onImageHasSize(e),m.updateStatus("ready")),e.hasSize=!0,e.loaded=!0,f("ImageLoadComplete")):++i<200?setTimeout(n,100):o())},o=function(){e&&(e.img.off(".mfploader"),e===m.currItem&&(m._onImageHasSize(e),m.updateStatus("error",r.tError.replace("%url%",e.src))),e.hasSize=!0,e.loaded=!0,e.loadError=!0)},r=m.st.image,s=t.find(".mfp-img");if(s.length){var a=document.createElement("img");a.className="mfp-img",e.el&&e.el.find("img").length&&(a.alt=e.el.find("img").attr("alt")),e.img=c(a).on("load.mfploader",n).on("error.mfploader",o),a.src=e.src,s.is("img")&&(e.img=e.img.clone()),0<(a=e.img[0]).naturalWidth?e.hasSize=!0:a.width||(e.hasSize=!1)}return m._parseMarkup(t,{title:function(e){if(e.data&&void 0!==e.data.title)return e.data.title;var t=m.st.image.titleSrc;if(t){if(c.isFunction(t))return t.call(m,e);if(e.el)return e.el.attr(t)||""}return""}(e),img_replaceWith:e.img},e),m.resizeImage(),e.hasSize?(_&&clearInterval(_),e.loadError?(t.addClass("mfp-loading"),m.updateStatus("error",r.tError.replace("%url%",e.src))):(t.removeClass("mfp-loading"),m.updateStatus("ready"))):(m.updateStatus("loading"),e.loading=!0,e.hasSize||(e.imgHidden=!0,t.addClass("mfp-loading"),m.findImageSize(e))),t}}});var O;c.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(e){return e.is("img")?e:e.find("img")}},proto:{initZoom:function(){var e,r=m.st.zoom,t=".zoom";if(r.enabled&&m.supportsTransition){function i(e){var t=e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+r.duration/1e3+"s "+r.easing,n={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},o="transition";return n["-webkit-"+o]=n["-moz-"+o]=n["-o-"+o]=n[o]=i,t.css(n),t}function n(){m.content.css("visibility","visible")}var o,s,a=r.duration;d("BuildControls"+t,function(){if(m._allowZoom()){if(clearTimeout(o),m.content.css("visibility","hidden"),!(e=m._getItemToZoom()))return void n();(s=i(e)).css(m._getOffset()),m.wrap.append(s),o=setTimeout(function(){s.css(m._getOffset(!0)),o=setTimeout(function(){n(),setTimeout(function(){s.remove(),e=s=null,f("ZoomAnimationEnded")},16)},a)},16)}}),d(u+t,function(){if(m._allowZoom()){if(clearTimeout(o),m.st.removalDelay=a,!e){if(!(e=m._getItemToZoom()))return;s=i(e)}s.css(m._getOffset(!0)),m.wrap.append(s),m.content.css("visibility","hidden"),setTimeout(function(){s.css(m._getOffset())},16)}}),d(l+t,function(){m._allowZoom()&&(n(),s&&s.remove(),e=null)})}},_allowZoom:function(){return"image"===m.currItem.type},_getItemToZoom:function(){return!!m.currItem.hasSize&&m.currItem.img},_getOffset:function(e){var t,i=(t=e?m.currItem.img:m.st.zoom.opener(m.currItem.el||m.currItem)).offset(),n=parseInt(t.css("padding-top"),10),o=parseInt(t.css("padding-bottom"),10);i.top-=c(window).scrollTop()-n;var r={width:t.width(),height:(a?t.innerHeight():t[0].offsetHeight)-o-n};return void 0===O&&(O=void 0!==document.createElement("p").style.MozTransform),O?r["-moz-transform"]=r.transform="translate("+i.left+"px,"+i.top+"px)":(r.left=i.left,r.top=i.top),r}}});function H(e){if(m.currTemplate[j]){var t=m.currTemplate[j].find("iframe");t.length&&(e||(t[0].src="//about:blank"),m.isIE8&&t.css("display",e?"block":"none"))}}var j="iframe";c.magnificPopup.registerModule(j,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){m.types.push(j),d("BeforeChange",function(e,t,i){t!==i&&(t===j?H():i===j&&H(!0))}),d(l+"."+j,function(){H()})},getIframe:function(e,t){var i=e.src,n=m.st.iframe;c.each(n.patterns,function(){if(-1<i.indexOf(this.index))return this.id&&(i="string"==typeof this.id?i.substr(i.lastIndexOf(this.id)+this.id.length,i.length):this.id.call(this,i)),i=this.src.replace("%id%",i),!1});var o={};return n.srcAction&&(o[n.srcAction]=i),m._parseMarkup(t,o,e),m.updateStatus("ready"),t}}});function D(e){var t=m.items.length;return t-1<e?e-t:e<0?t+e:e}function P(e,t,i){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,i)}c.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var r=m.st.gallery,e=".mfp-gallery";if(m.direction=!0,!r||!r.enabled)return!1;v+=" mfp-gallery",d(w+e,function(){r.navigateByImgClick&&m.wrap.on("click"+e,".mfp-img",function(){if(1<m.items.length)return m.next(),!1}),g.on("keydown"+e,function(e){37===e.keyCode?m.prev():39===e.keyCode&&m.next()})}),d("UpdateStatus"+e,function(e,t){t.text&&(t.text=P(t.text,m.currItem.index,m.items.length))}),d(y+e,function(e,t,i,n){var o=m.items.length;i.counter=1<o?P(r.tCounter,n.index,o):""}),d("BuildControls"+e,function(){if(1<m.items.length&&r.arrows&&!m.arrowLeft){var e=r.arrowMarkup,t=m.arrowLeft=c(e.replace(/%title%/gi,r.tPrev).replace(/%dir%/gi,"left")).addClass(s),i=m.arrowRight=c(e.replace(/%title%/gi,r.tNext).replace(/%dir%/gi,"right")).addClass(s);t.click(function(){m.prev()}),i.click(function(){m.next()}),m.container.append(t.add(i))}}),d("Change"+e,function(){m._preloadTimeout&&clearTimeout(m._preloadTimeout),m._preloadTimeout=setTimeout(function(){m.preloadNearbyImages(),m._preloadTimeout=null},16)}),d(l+e,function(){g.off(e),m.wrap.off("click"+e),m.arrowRight=m.arrowLeft=null})},next:function(){m.direction=!0,m.index=D(m.index+1),m.updateItemHTML()},prev:function(){m.direction=!1,m.index=D(m.index-1),m.updateItemHTML()},goTo:function(e){m.direction=e>=m.index,m.index=e,m.updateItemHTML()},preloadNearbyImages:function(){var e,t=m.st.gallery.preload,i=Math.min(t[0],m.items.length),n=Math.min(t[1],m.items.length);for(e=1;e<=(m.direction?n:i);e++)m._preloadItem(m.index+e);for(e=1;e<=(m.direction?i:n);e++)m._preloadItem(m.index-e)},_preloadItem:function(e){if(e=D(e),!m.items[e].preloaded){var t=m.items[e];t.parsed||(t=m.parseEl(e)),f("LazyLoad",t),"image"===t.type&&(t.img=c('<img class="mfp-img" />').on("load.mfploader",function(){t.hasSize=!0}).on("error.mfploader",function(){t.hasSize=!0,t.loadError=!0,f("LazyLoadError",t)}).attr("src",t.src)),t.preloaded=!0}}}});var M="retina";c.magnificPopup.registerModule(M,{options:{replaceSrc:function(e){return e.src.replace(/\.\w+$/,function(e){return"@2x"+e})},ratio:1},proto:{initRetina:function(){if(1<window.devicePixelRatio){var i=m.st.retina,n=i.ratio;1<(n=isNaN(n)?n():n)&&(d("ImageHasSize."+M,function(e,t){t.img.css({"max-width":t.img[0].naturalWidth/n,width:"100%"})}),d("ElementParse."+M,function(e,t){t.src=i.replaceSrc(t,n)}))}}}}),r()}),function(t,i){"function"==typeof define&&define.amd?define("jquery-bridget/jquery-bridget",["jquery"],function(e){return i(t,e)}):"object"==typeof module&&module.exports?module.exports=i(t,require("jquery")):t.jQueryBridget=i(t,t.jQuery)}(window,function(e,t){"use strict";var i=Array.prototype.slice,n=e.console,d=void 0===n?function(){}:function(e){n.error(e)};function o(u,o,c){(c=c||t||e.jQuery)&&(o.prototype.option||(o.prototype.option=function(e){c.isPlainObject(e)&&(this.options=c.extend(!0,this.options,e))}),c.fn[u]=function(e){return"string"==typeof e?function(e,r,s){var a,l="$()."+u+'("'+r+'")';return e.each(function(e,t){var i=c.data(t,u);if(i){var n=i[r];if(n&&"_"!=r.charAt(0)){var o=n.apply(i,s);a=void 0===a?o:a}else d(l+" is not a valid method")}else d(u+" not initialized. Cannot call methods, i.e. "+l)}),void 0!==a?a:e}(this,e,i.call(arguments,1)):(function(e,n){e.each(function(e,t){var i=c.data(t,u);i?(i.option(n),i._init()):(i=new o(t,n),c.data(t,u,i))})}(this,e),this)},r(c))}function r(e){!e||e&&e.bridget||(e.bridget=o)}return r(t||e.jQuery),o}),function(e,t){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",t):"object"==typeof module&&module.exports?module.exports=t():e.EvEmitter=t()}("undefined"!=typeof window?window:this,function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var i=this._events=this._events||{},n=i[e]=i[e]||[];return-1==n.indexOf(t)&&n.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var i=this._onceEvents=this._onceEvents||{};return(i[e]=i[e]||{})[t]=!0,this}},t.off=function(e,t){var i=this._events&&this._events[e];if(i&&i.length){var n=i.indexOf(t);return-1!=n&&i.splice(n,1),this}},t.emitEvent=function(e,t){var i=this._events&&this._events[e];if(i&&i.length){i=i.slice(0),t=t||[];for(var n=this._onceEvents&&this._onceEvents[e],o=0;o<i.length;o++){var r=i[o];n&&n[r]&&(this.off(e,r),delete n[r]),r.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e}),function(e,t){"function"==typeof define&&define.amd?define("get-size/get-size",t):"object"==typeof module&&module.exports?module.exports=t():e.getSize=t()}(window,function(){"use strict";function v(e){var t=parseFloat(e);return-1==e.indexOf("%")&&!isNaN(t)&&t}var i="undefined"==typeof console?function(){}:function(e){console.error(e)},y=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],w=y.length;function b(e){var t=getComputedStyle(e);return t||i("Style returned "+t+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),t}var x,T=!1;function S(e){if(!function(){if(!T){T=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var t=document.body||document.documentElement;t.appendChild(e);var i=b(e);x=200==Math.round(v(i.width)),S.isBoxSizeOuter=x,t.removeChild(e)}}(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var t=b(e);if("none"==t.display)return function(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0;t<w;t++){e[y[t]]=0}return e}();var i={};i.width=e.offsetWidth,i.height=e.offsetHeight;for(var n=i.isBorderBox="border-box"==t.boxSizing,o=0;o<w;o++){var r=y[o],s=t[r],a=parseFloat(s);i[r]=isNaN(a)?0:a}var l=i.paddingLeft+i.paddingRight,u=i.paddingTop+i.paddingBottom,c=i.marginLeft+i.marginRight,d=i.marginTop+i.marginBottom,p=i.borderLeftWidth+i.borderRightWidth,f=i.borderTopWidth+i.borderBottomWidth,h=n&&x,m=v(t.width);!1!==m&&(i.width=m+(h?0:l+p));var g=v(t.height);return!1!==g&&(i.height=g+(h?0:u+f)),i.innerWidth=i.width-(l+p),i.innerHeight=i.height-(u+f),i.outerWidth=i.width+c,i.outerHeight=i.height+d,i}}return S}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("desandro-matches-selector/matches-selector",t):"object"==typeof module&&module.exports?module.exports=t():e.matchesSelector=t()}(window,function(){"use strict";var i=function(){var e=window.Element.prototype;if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],i=0;i<t.length;i++){var n=t[i]+"MatchesSelector";if(e[n])return n}}();return function(e,t){return e[i](t)}}),function(t,i){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["desandro-matches-selector/matches-selector"],function(e){return i(t,e)}):"object"==typeof module&&module.exports?module.exports=i(t,require("desandro-matches-selector")):t.fizzyUIUtils=i(t,t.matchesSelector)}(window,function(u,r){var c={extend:function(e,t){for(var i in t)e[i]=t[i];return e},modulo:function(e,t){return(e%t+t)%t}},t=Array.prototype.slice;c.makeArray=function(e){return Array.isArray(e)?e:null==e?[]:"object"==typeof e&&"number"==typeof e.length?t.call(e):[e]},c.removeFrom=function(e,t){var i=e.indexOf(t);-1!=i&&e.splice(i,1)},c.getParent=function(e,t){for(;e.parentNode&&e!=document.body;)if(e=e.parentNode,r(e,t))return e},c.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},c.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},c.filterFindElements=function(e,n){e=c.makeArray(e);var o=[];return e.forEach(function(e){if(e instanceof HTMLElement)if(n){r(e,n)&&o.push(e);for(var t=e.querySelectorAll(n),i=0;i<t.length;i++)o.push(t[i])}else o.push(e)}),o},c.debounceMethod=function(e,t,n){n=n||100;var o=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];clearTimeout(e);var t=arguments,i=this;this[r]=setTimeout(function(){o.apply(i,t),delete i[r]},n)}},c.docReady=function(e){var t=document.readyState;"complete"==t||"interactive"==t?setTimeout(e):document.addEventListener("DOMContentLoaded",e)},c.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,i){return t+"-"+i}).toLowerCase()};var d=u.console;return c.htmlInit=function(a,l){c.docReady(function(){var e=c.toDashed(l),o="data-"+e,t=document.querySelectorAll("["+o+"]"),i=document.querySelectorAll(".js-"+e),n=c.makeArray(t).concat(c.makeArray(i)),r=o+"-options",s=u.jQuery;n.forEach(function(t){var e,i=t.getAttribute(o)||t.getAttribute(r);try{e=i&&JSON.parse(i)}catch(e){return void(d&&d.error("Error parsing "+o+" on "+t.className+": "+e))}var n=new a(t,e);s&&s.data(t,l,n)})})},c}),function(e,t){"function"==typeof define&&define.amd?define("outlayer/item",["ev-emitter/ev-emitter","get-size/get-size"],t):"object"==typeof module&&module.exports?module.exports=t(require("ev-emitter"),require("get-size")):(e.Outlayer={},e.Outlayer.Item=t(e.EvEmitter,e.getSize))}(window,function(e,t){"use strict";var i=document.documentElement.style,n="string"==typeof i.transition?"transition":"WebkitTransition",o="string"==typeof i.transform?"transform":"WebkitTransform",r={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[n],s={transform:o,transition:n,transitionDuration:n+"Duration",transitionProperty:n+"Property",transitionDelay:n+"Delay"};function a(e,t){e&&(this.element=e,this.layout=t,this.position={x:0,y:0},this._create())}var l=a.prototype=Object.create(e.prototype);l.constructor=a,l._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},l.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},l.getSize=function(){this.size=t(this.element)},l.css=function(e){var t=this.element.style;for(var i in e){t[s[i]||i]=e[i]}},l.getPosition=function(){var e=getComputedStyle(this.element),t=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),n=e[t?"left":"right"],o=e[i?"top":"bottom"],r=parseFloat(n),s=parseFloat(o),a=this.layout.size;-1!=n.indexOf("%")&&(r=r/100*a.width),-1!=o.indexOf("%")&&(s=s/100*a.height),r=isNaN(r)?0:r,s=isNaN(s)?0:s,r-=t?a.paddingLeft:a.paddingRight,s-=i?a.paddingTop:a.paddingBottom,this.position.x=r,this.position.y=s},l.layoutPosition=function(){var e=this.layout.size,t={},i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),o=i?"paddingLeft":"paddingRight",r=i?"left":"right",s=i?"right":"left",a=this.position.x+e[o];t[r]=this.getXValue(a),t[s]="";var l=n?"paddingTop":"paddingBottom",u=n?"top":"bottom",c=n?"bottom":"top",d=this.position.y+e[l];t[u]=this.getYValue(d),t[c]="",this.css(t),this.emitEvent("layout",[this])},l.getXValue=function(e){var t=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!t?e/this.layout.size.width*100+"%":e+"px"},l.getYValue=function(e){var t=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&t?e/this.layout.size.height*100+"%":e+"px"},l._transitionTo=function(e,t){this.getPosition();var i=this.position.x,n=this.position.y,o=e==this.position.x&&t==this.position.y;if(this.setPosition(e,t),!o||this.isTransitioning){var r=e-i,s=t-n,a={};a.transform=this.getTranslate(r,s),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},l.getTranslate=function(e,t){return"translate3d("+(e=this.layout._getOption("originLeft")?e:-e)+"px, "+(t=this.layout._getOption("originTop")?t:-t)+"px, 0)"},l.goTo=function(e,t){this.setPosition(e,t),this.layoutPosition()},l.moveTo=l._transitionTo,l.setPosition=function(e,t){this.position.x=parseFloat(e),this.position.y=parseFloat(t)},l._nonTransition=function(e){for(var t in this.css(e.to),e.isCleaning&&this._removeStyles(e.to),e.onTransitionEnd)e.onTransitionEnd[t].call(this)},l.transition=function(e){if(parseFloat(this.layout.options.transitionDuration)){var t=this._transn;for(var i in e.onTransitionEnd)t.onEnd[i]=e.onTransitionEnd[i];for(i in e.to)t.ingProperties[i]=!0,e.isCleaning&&(t.clean[i]=!0);if(e.from){this.css(e.from);this.element.offsetHeight;null}this.enableTransition(e.to),this.css(e.to),this.isTransitioning=!0}else this._nonTransition(e)};var u="opacity,"+o.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()});l.enableTransition=function(){if(!this.isTransitioning){var e=this.layout.options.transitionDuration;e="number"==typeof e?e+"ms":e,this.css({transitionProperty:u,transitionDuration:e,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(r,this,!1)}},l.onwebkitTransitionEnd=function(e){this.ontransitionend(e)},l.onotransitionend=function(e){this.ontransitionend(e)};var c={"-webkit-transform":"transform"};l.ontransitionend=function(e){if(e.target===this.element){var t=this._transn,i=c[e.propertyName]||e.propertyName;if(delete t.ingProperties[i],function(e){for(var t in e)return!1;return!null}(t.ingProperties)&&this.disableTransition(),i in t.clean&&(this.element.style[e.propertyName]="",delete t.clean[i]),i in t.onEnd)t.onEnd[i].call(this),delete t.onEnd[i];this.emitEvent("transitionEnd",[this])}},l.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(r,this,!1),this.isTransitioning=!1},l._removeStyles=function(e){var t={};for(var i in e)t[i]="";this.css(t)};var d={transitionProperty:"",transitionDuration:"",transitionDelay:""};return l.removeTransitionStyles=function(){this.css(d)},l.stagger=function(e){e=isNaN(e)?0:e,this.staggerDelay=e+"ms"},l.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},l.remove=function(){n&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",function(){this.removeElem()}),this.hide()):this.removeElem()},l.reveal=function(){delete this.isHidden,this.css({display:""});var e=this.layout.options,t={};t[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:e.hiddenStyle,to:e.visibleStyle,isCleaning:!0,onTransitionEnd:t})},l.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},l.getHideRevealTransitionEndProperty=function(e){var t=this.layout.options[e];if(t.opacity)return"opacity";for(var i in t)return i},l.hide=function(){this.isHidden=!0,this.css({display:""});var e=this.layout.options,t={};t[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:e.visibleStyle,to:e.hiddenStyle,isCleaning:!0,onTransitionEnd:t})},l.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},l.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},a}),function(o,r){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["ev-emitter/ev-emitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(e,t,i,n){return r(o,e,t,i,n)}):"object"==typeof module&&module.exports?module.exports=r(o,require("ev-emitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):o.Outlayer=r(o,o.EvEmitter,o.getSize,o.fizzyUIUtils,o.Outlayer.Item)}(window,function(e,t,o,r,n){"use strict";function i(){}var s=e.console,a=e.jQuery,l=0,u={};function c(e,t){var i=r.getQueryElement(e);if(i){this.element=i,a&&(this.$element=a(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(t);var n=++l;this.element.outlayerGUID=n,(u[n]=this)._create(),this._getOption("initLayout")&&this.layout()}else s&&s.error("Bad element for "+this.constructor.namespace+": "+(i||e))}c.namespace="outlayer",c.Item=n,c.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var d=c.prototype;function p(e){function t(){e.apply(this,arguments)}return(t.prototype=Object.create(e.prototype)).constructor=t}r.extend(d,t.prototype),d.option=function(e){r.extend(this.options,e)},d._getOption=function(e){var t=this.constructor.compatOptions[e];return t&&void 0!==this.options[t]?this.options[t]:this.options[e]},c.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},d._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},d.reloadItems=function(){this.items=this._itemize(this.element.children)},d._itemize=function(e){for(var t=this._filterFindItemElements(e),i=this.constructor.Item,n=[],o=0;o<t.length;o++){var r=new i(t[o],this);n.push(r)}return n},d._filterFindItemElements=function(e){return r.filterFindElements(e,this.options.itemSelector)},d.getItemElements=function(){return this.items.map(function(e){return e.element})},d.layout=function(){this._resetLayout(),this._manageStamps();var e=this._getOption("layoutInstant"),t=void 0!==e?e:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},d._init=d.layout,d._resetLayout=function(){this.getSize()},d.getSize=function(){this.size=o(this.element)},d._getMeasurement=function(e,t){var i,n=this.options[e];n?("string"==typeof n?i=this.element.querySelector(n):n instanceof HTMLElement&&(i=n),this[e]=i?o(i)[t]:n):this[e]=0},d.layoutItems=function(e,t){e=this._getItemsForLayout(e),this._layoutItems(e,t),this._postLayout()},d._getItemsForLayout=function(e){return e.filter(function(e){return!e.isIgnored})},d._layoutItems=function(e,i){if(this._emitCompleteOnItems("layout",e),e&&e.length){var n=[];e.forEach(function(e){var t=this._getItemLayoutPosition(e);t.item=e,t.isInstant=i||e.isLayoutInstant,n.push(t)},this),this._processLayoutQueue(n)}},d._getItemLayoutPosition=function(){return{x:0,y:0}},d._processLayoutQueue=function(e){this.updateStagger(),e.forEach(function(e,t){this._positionItem(e.item,e.x,e.y,e.isInstant,t)},this)},d.updateStagger=function(){var e=this.options.stagger;if(null!=e)return this.stagger=function(e){if("number"==typeof e)return e;var t=e.match(/(^\d*\.?\d*)(\w*)/),i=t&&t[1],n=t&&t[2];if(!i.length)return 0;i=parseFloat(i);var o=f[n]||1;return i*o}(e),this.stagger;this.stagger=0},d._positionItem=function(e,t,i,n,o){n?e.goTo(t,i):(e.stagger(o*this.stagger),e.moveTo(t,i))},d._postLayout=function(){this.resizeContainer()},d.resizeContainer=function(){if(this._getOption("resizeContainer")){var e=this._getContainerSize();e&&(this._setContainerMeasure(e.width,!0),this._setContainerMeasure(e.height,!1))}},d._getContainerSize=i,d._setContainerMeasure=function(e,t){if(void 0!==e){var i=this.size;i.isBorderBox&&(e+=t?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),e=Math.max(e,0),this.element.style[t?"width":"height"]=e+"px"}},d._emitCompleteOnItems=function(t,e){var i=this;function n(){i.dispatchEvent(t+"Complete",null,[e])}var o=e.length;if(e&&o){var r=0;e.forEach(function(e){e.once(t,s)})}else n();function s(){++r==o&&n()}},d.dispatchEvent=function(e,t,i){var n=t?[t].concat(i):i;if(this.emitEvent(e,n),a)if(this.$element=this.$element||a(this.element),t){var o=a.Event(t);o.type=e,this.$element.trigger(o,i)}else this.$element.trigger(e,i)},d.ignore=function(e){var t=this.getItem(e);t&&(t.isIgnored=!0)},d.unignore=function(e){var t=this.getItem(e);t&&delete t.isIgnored},d.stamp=function(e){(e=this._find(e))&&(this.stamps=this.stamps.concat(e),e.forEach(this.ignore,this))},d.unstamp=function(e){(e=this._find(e))&&e.forEach(function(e){r.removeFrom(this.stamps,e),this.unignore(e)},this)},d._find=function(e){if(e)return"string"==typeof e&&(e=this.element.querySelectorAll(e)),e=r.makeArray(e)},d._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},d._getBoundingRect=function(){var e=this.element.getBoundingClientRect(),t=this.size;this._boundingRect={left:e.left+t.paddingLeft+t.borderLeftWidth,top:e.top+t.paddingTop+t.borderTopWidth,right:e.right-(t.paddingRight+t.borderRightWidth),bottom:e.bottom-(t.paddingBottom+t.borderBottomWidth)}},d._manageStamp=i,d._getElementOffset=function(e){var t=e.getBoundingClientRect(),i=this._boundingRect,n=o(e);return{left:t.left-i.left-n.marginLeft,top:t.top-i.top-n.marginTop,right:i.right-t.right-n.marginRight,bottom:i.bottom-t.bottom-n.marginBottom}},d.handleEvent=r.handleEvent,d.bindResize=function(){e.addEventListener("resize",this),this.isResizeBound=!0},d.unbindResize=function(){e.removeEventListener("resize",this),this.isResizeBound=!1},d.onresize=function(){this.resize()},r.debounceMethod(c,"onresize",100),d.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},d.needsResizeLayout=function(){var e=o(this.element);return this.size&&e&&e.innerWidth!==this.size.innerWidth},d.addItems=function(e){var t=this._itemize(e);return t.length&&(this.items=this.items.concat(t)),t},d.appended=function(e){var t=this.addItems(e);t.length&&(this.layoutItems(t,!0),this.reveal(t))},d.prepended=function(e){var t=this._itemize(e);if(t.length){var i=this.items.slice(0);this.items=t.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(t,!0),this.reveal(t),this.layoutItems(i)}},d.reveal=function(e){if(this._emitCompleteOnItems("reveal",e),e&&e.length){var i=this.updateStagger();e.forEach(function(e,t){e.stagger(t*i),e.reveal()})}},d.hide=function(e){if(this._emitCompleteOnItems("hide",e),e&&e.length){var i=this.updateStagger();e.forEach(function(e,t){e.stagger(t*i),e.hide()})}},d.revealItemElements=function(e){var t=this.getItems(e);this.reveal(t)},d.hideItemElements=function(e){var t=this.getItems(e);this.hide(t)},d.getItem=function(e){for(var t=0;t<this.items.length;t++){var i=this.items[t];if(i.element==e)return i}},d.getItems=function(e){e=r.makeArray(e);var i=[];return e.forEach(function(e){var t=this.getItem(e);t&&i.push(t)},this),i},d.remove=function(e){var t=this.getItems(e);this._emitCompleteOnItems("remove",t),t&&t.length&&t.forEach(function(e){e.remove(),r.removeFrom(this.items,e)},this)},d.destroy=function(){var e=this.element.style;e.height="",e.position="",e.width="",this.items.forEach(function(e){e.destroy()}),this.unbindResize();var t=this.element.outlayerGUID;delete u[t],delete this.element.outlayerGUID,a&&a.removeData(this.element,this.constructor.namespace)},c.data=function(e){var t=(e=r.getQueryElement(e))&&e.outlayerGUID;return t&&u[t]},c.create=function(e,t){var i=p(c);return i.defaults=r.extend({},c.defaults),r.extend(i.defaults,t),i.compatOptions=r.extend({},c.compatOptions),i.namespace=e,i.data=c.data,i.Item=p(n),r.htmlInit(i,e),a&&a.bridget&&a.bridget(e,i),i};var f={ms:1,s:1e3};return c.Item=n,c}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/item",["outlayer/outlayer"],t):"object"==typeof module&&module.exports?module.exports=t(require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.Item=t(e.Outlayer))}(window,function(e){"use strict";function t(){e.Item.apply(this,arguments)}var i=t.prototype=Object.create(e.Item.prototype),n=i._create;i._create=function(){this.id=this.layout.itemGUID++,n.call(this),this.sortData={}},i.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var e=this.layout.options.getSortData,t=this.layout._sorters;for(var i in e){var n=t[i];this.sortData[i]=n(this.element,this)}}};var o=i.destroy;return i.destroy=function(){o.apply(this,arguments),this.css({display:""})},t}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-mode",["get-size/get-size","outlayer/outlayer"],t):"object"==typeof module&&module.exports?module.exports=t(require("get-size"),require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.LayoutMode=t(e.getSize,e.Outlayer))}(window,function(t,i){"use strict";function n(e){(this.isotope=e)&&(this.options=e.options[this.namespace],this.element=e.element,this.items=e.filteredItems,this.size=e.size)}var o=n.prototype;return["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout","_getOption"].forEach(function(e){o[e]=function(){return i.prototype[e].apply(this.isotope,arguments)}}),o.needsVerticalResizeLayout=function(){var e=t(this.isotope.element);return this.isotope.size&&e&&e.innerHeight!=this.isotope.size.innerHeight},o._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},o.getColumnWidth=function(){this.getSegmentSize("column","Width")},o.getRowHeight=function(){this.getSegmentSize("row","Height")},o.getSegmentSize=function(e,t){var i=e+t,n="outer"+t;if(this._getMeasurement(i,n),!this[i]){var o=this.getFirstItemSize();this[i]=o&&o[n]||this.isotope.size["inner"+t]}},o.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},o.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},o.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(e,t){function i(){n.apply(this,arguments)}return(i.prototype=Object.create(o)).constructor=i,t&&(i.options=t),n.modes[i.prototype.namespace=e]=i},n}),function(e,t){"function"==typeof define&&define.amd?define("masonry-layout/masonry",["outlayer/outlayer","get-size/get-size"],t):"object"==typeof module&&module.exports?module.exports=t(require("outlayer"),require("get-size")):e.Masonry=t(e.Outlayer,e.getSize)}(window,function(e,u){var t=e.create("masonry");t.compatOptions.fitWidth="isFitWidth";var i=t.prototype;return i._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var e=0;e<this.cols;e++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},i.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var e=this.items[0],t=e&&e.element;this.columnWidth=t&&u(t).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,n=this.containerWidth+this.gutter,o=n/i,r=i-n%i;o=Math[r&&r<1?"round":"floor"](o),this.cols=Math.max(o,1)},i.getContainerWidth=function(){var e=this._getOption("fitWidth")?this.element.parentNode:this.element,t=u(e);this.containerWidth=t&&t.innerWidth},i._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth%this.columnWidth,i=Math[t&&t<1?"round":"ceil"](e.size.outerWidth/this.columnWidth);i=Math.min(i,this.cols);for(var n=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](i,e),o={x:this.columnWidth*n.col,y:n.y},r=n.y+e.size.outerHeight,s=i+n.col,a=n.col;a<s;a++)this.colYs[a]=r;return o},i._getTopColPosition=function(e){var t=this._getTopColGroup(e),i=Math.min.apply(Math,t);return{col:t.indexOf(i),y:i}},i._getTopColGroup=function(e){if(e<2)return this.colYs;for(var t=[],i=this.cols+1-e,n=0;n<i;n++)t[n]=this._getColGroupY(n,e);return t},i._getColGroupY=function(e,t){if(t<2)return this.colYs[e];var i=this.colYs.slice(e,e+t);return Math.max.apply(Math,i)},i._getHorizontalColPosition=function(e,t){var i=this.horizontalColIndex%this.cols;i=1<e&&i+e>this.cols?0:i;var n=t.size.outerWidth&&t.size.outerHeight;return this.horizontalColIndex=n?i+e:this.horizontalColIndex,{col:i,y:this._getColGroupY(i,e)}},i._manageStamp=function(e){var t=u(e),i=this._getElementOffset(e),n=this._getOption("originLeft")?i.left:i.right,o=n+t.outerWidth,r=Math.floor(n/this.columnWidth);r=Math.max(0,r);var s=Math.floor(o/this.columnWidth);s-=o%this.columnWidth?0:1,s=Math.min(this.cols-1,s);for(var a=(this._getOption("originTop")?i.top:i.bottom)+t.outerHeight,l=r;l<=s;l++)this.colYs[l]=Math.max(a,this.colYs[l])},i._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var e={height:this.maxY};return this._getOption("fitWidth")&&(e.width=this._getContainerFitWidth()),e},i._getContainerFitWidth=function(){for(var e=0,t=this.cols;--t&&0===this.colYs[t];)e++;return(this.cols-e)*this.columnWidth-this.gutter},i.needsResizeLayout=function(){var e=this.containerWidth;return this.getContainerWidth(),e!=this.containerWidth},t}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/masonry",["../layout-mode","masonry-layout/masonry"],t):"object"==typeof module&&module.exports?module.exports=t(require("../layout-mode"),require("masonry-layout")):t(e.Isotope.LayoutMode,e.Masonry)}(window,function(e,t){"use strict";var i=e.create("masonry"),n=i.prototype,o={_getElementOffset:!0,layout:!0,_getMeasurement:!0};for(var r in t.prototype)o[r]||(n[r]=t.prototype[r]);var s=n.measureColumns;n.measureColumns=function(){this.items=this.isotope.filteredItems,s.call(this)};var a=n._getOption;return n._getOption=function(e){return"fitWidth"==e?void 0!==this.options.isFitWidth?this.options.isFitWidth:this.options.fitWidth:a.apply(this.isotope,arguments)},i}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/fit-rows",["../layout-mode"],t):"object"==typeof exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("fitRows"),i=t.prototype;return i._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},i._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth+this.gutter,i=this.isotope.size.innerWidth+this.gutter;0!==this.x&&t+this.x>i&&(this.x=0,this.y=this.maxY);var n={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+e.size.outerHeight),this.x+=t,n},i._getContainerSize=function(){return{height:this.maxY}},t}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/vertical",["../layout-mode"],t):"object"==typeof module&&module.exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("vertical",{horizontalAlignment:0}),i=t.prototype;return i._resetLayout=function(){this.y=0},i._getItemLayoutPosition=function(e){e.getSize();var t=(this.isotope.size.innerWidth-e.size.outerWidth)*this.options.horizontalAlignment,i=this.y;return this.y+=e.size.outerHeight,{x:t,y:i}},i._getContainerSize=function(){return{height:this.y}},t}),function(s,a){"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","desandro-matches-selector/matches-selector","fizzy-ui-utils/utils","isotope-layout/js/item","isotope-layout/js/layout-mode","isotope-layout/js/layout-modes/masonry","isotope-layout/js/layout-modes/fit-rows","isotope-layout/js/layout-modes/vertical"],function(e,t,i,n,o,r){return a(s,e,t,i,n,o,r)}):"object"==typeof module&&module.exports?module.exports=a(s,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("isotope-layout/js/item"),require("isotope-layout/js/layout-mode"),require("isotope-layout/js/layout-modes/masonry"),require("isotope-layout/js/layout-modes/fit-rows"),require("isotope-layout/js/layout-modes/vertical")):s.Isotope=a(s,s.Outlayer,s.getSize,s.matchesSelector,s.fizzyUIUtils,s.Isotope.Item,s.Isotope.LayoutMode)}(window,function(e,i,t,n,r,o,s){var a=e.jQuery,l=String.prototype.trim?function(e){return e.trim()}:function(e){return e.replace(/^\s+|\s+$/g,"")},u=i.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});u.Item=o,u.LayoutMode=s;var c=u.prototype;c._create=function(){for(var e in this.itemGUID=0,this._sorters={},this._getSorters(),i.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"],s.modes)this._initLayoutMode(e)},c.reloadItems=function(){this.itemGUID=0,i.prototype.reloadItems.call(this)},c._itemize=function(){for(var e=i.prototype._itemize.apply(this,arguments),t=0;t<e.length;t++){e[t].id=this.itemGUID++}return this._updateItemsSortData(e),e},c._initLayoutMode=function(e){var t=s.modes[e],i=this.options[e]||{};this.options[e]=t.options?r.extend(t.options,i):i,this.modes[e]=new t(this)},c.layout=function(){this._isLayoutInited||!this._getOption("initLayout")?this._layout():this.arrange()},c._layout=function(){var e=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,e),this._isLayoutInited=!0},c.arrange=function(e){this.option(e),this._getIsInstant();var t=this._filter(this.items);this.filteredItems=t.matches,this._bindArrangeComplete(),this._isInstant?this._noTransition(this._hideReveal,[t]):this._hideReveal(t),this._sort(),this._layout()},c._init=c.arrange,c._hideReveal=function(e){this.reveal(e.needReveal),this.hide(e.needHide)},c._getIsInstant=function(){var e=this._getOption("layoutInstant"),t=void 0!==e?e:!this._isLayoutInited;return this._isInstant=t},c._bindArrangeComplete=function(){var e,t,i,n=this;function o(){e&&t&&i&&n.dispatchEvent("arrangeComplete",null,[n.filteredItems])}this.once("layoutComplete",function(){e=!0,o()}),this.once("hideComplete",function(){t=!0,o()}),this.once("revealComplete",function(){i=!0,o()})},c._filter=function(e){var t=this.options.filter;t=t||"*";for(var i=[],n=[],o=[],r=this._getFilterTest(t),s=0;s<e.length;s++){var a=e[s];if(!a.isIgnored){var l=r(a);l&&i.push(a),l&&a.isHidden?n.push(a):l||a.isHidden||o.push(a)}}return{matches:i,needReveal:n,needHide:o}},c._getFilterTest=function(t){return a&&this.options.isJQueryFiltering?function(e){return a(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return n(e.element,t)}},c.updateSortData=function(e){var t;t=e?(e=r.makeArray(e),this.getItems(e)):this.items,this._getSorters(),this._updateItemsSortData(t)},c._getSorters=function(){var e=this.options.getSortData;for(var t in e){var i=e[t];this._sorters[t]=d(i)}},c._updateItemsSortData=function(e){for(var t=e&&e.length,i=0;t&&i<t;i++){e[i].updateSortData()}};var d=function(e){if("string"!=typeof e)return e;var t=l(e).split(" "),i=t[0],n=i.match(/^\[(.+)\]$/),o=function(t,i){return t?function(e){return e.getAttribute(t)}:function(e){var t=e.querySelector(i);return t&&t.textContent}}(n&&n[1],i),r=u.sortDataParsers[t[1]];return e=r?function(e){return e&&r(o(e))}:function(e){return e&&o(e)}};u.sortDataParsers={parseInt:function(e){return parseInt(e,10)},parseFloat:function(e){return parseFloat(e)}},c._sort=function(){if(this.options.sortBy){var e=r.makeArray(this.options.sortBy);this._getIsSameSortBy(e)||(this.sortHistory=e.concat(this.sortHistory));var t=function(s,a){return function(e,t){for(var i=0;i<s.length;i++){var n=s[i],o=e.sortData[n],r=t.sortData[n];if(r<o||o<r)return(r<o?1:-1)*((void 0!==a[n]?a[n]:a)?1:-1)}return 0}}(this.sortHistory,this.options.sortAscending);this.filteredItems.sort(t)}},c._getIsSameSortBy=function(e){for(var t=0;t<e.length;t++)if(e[t]!=this.sortHistory[t])return!1;return!0},c._mode=function(){var e=this.options.layoutMode,t=this.modes[e];if(!t)throw new Error("No layout mode: "+e);return t.options=this.options[e],t},c._resetLayout=function(){i.prototype._resetLayout.call(this),this._mode()._resetLayout()},c._getItemLayoutPosition=function(e){return this._mode()._getItemLayoutPosition(e)},c._manageStamp=function(e){this._mode()._manageStamp(e)},c._getContainerSize=function(){return this._mode()._getContainerSize()},c.needsResizeLayout=function(){return this._mode().needsResizeLayout()},c.appended=function(e){var t=this.addItems(e);if(t.length){var i=this._filterRevealAdded(t);this.filteredItems=this.filteredItems.concat(i)}},c.prepended=function(e){var t=this._itemize(e);if(t.length){this._resetLayout(),this._manageStamps();var i=this._filterRevealAdded(t);this.layoutItems(this.filteredItems),this.filteredItems=i.concat(this.filteredItems),this.items=t.concat(this.items)}},c._filterRevealAdded=function(e){var t=this._filter(e);return this.hide(t.needHide),this.reveal(t.matches),this.layoutItems(t.matches,!0),t.matches},c.insert=function(e){var t=this.addItems(e);if(t.length){var i,n,o=t.length;for(i=0;i<o;i++)n=t[i],this.element.appendChild(n.element);var r=this._filter(t).matches;for(i=0;i<o;i++)t[i].isLayoutInstant=!0;for(this.arrange(),i=0;i<o;i++)delete t[i].isLayoutInstant;this.reveal(r)}};var p=c.remove;return c.remove=function(e){e=r.makeArray(e);var t=this.getItems(e);p.call(this,e);for(var i=t&&t.length,n=0;i&&n<i;n++){var o=t[n];r.removeFrom(this.filteredItems,o)}},c.shuffle=function(){for(var e=0;e<this.items.length;e++){this.items[e].sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},c._noTransition=function(e,t){var i=this.options.transitionDuration;this.options.transitionDuration=0;var n=e.apply(this,t);return this.options.transitionDuration=i,n},c.getFilteredItemElements=function(){return this.filteredItems.map(function(e){return e.element})},u}),function(){function t(e,t){return function(){return e.apply(t,arguments)}}var n,e,i,l,o,s=[].indexOf||function(e){for(var t=0,i=this.length;t<i;t++)if(t in this&&this[t]===e)return t;return-1};function r(){}function a(){this.keys=[],this.values=[]}function u(){"undefined"!=typeof console&&null!==console&&console.warn("MutationObserver is not supported by your browser."),"undefined"!=typeof console&&null!==console&&console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.")}function c(e){null==e&&(e={}),this.scrollCallback=t(this.scrollCallback,this),this.scrollHandler=t(this.scrollHandler,this),this.resetAnimation=t(this.resetAnimation,this),this.start=t(this.start,this),this.scrolled=!0,this.config=this.util().extend(e,this.defaults),null!=e.scrollContainer&&(this.config.scrollContainer=document.querySelector(e.scrollContainer)),this.animationNameCache=new i,this.wowEvent=this.util().createEvent(this.config.boxClass)}r.prototype.extend=function(e,t){var i,n;for(i in t)n=t[i],null==e[i]&&(e[i]=n);return e},r.prototype.isMobile=function(e){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(e)},r.prototype.createEvent=function(e,t,i,n){var o;return null==t&&(t=!1),null==i&&(i=!1),null==n&&(n=null),null!=document.createEvent?(o=document.createEvent("CustomEvent")).initCustomEvent(e,t,i,n):null!=document.createEventObject?(o=document.createEventObject()).eventType=e:o.eventName=e,o},r.prototype.emitEvent=function(e,t){return null!=e.dispatchEvent?e.dispatchEvent(t):t in(null!=e)?e[t]():"on"+t in(null!=e)?e["on"+t]():void 0},r.prototype.addEvent=function(e,t,i){return null!=e.addEventListener?e.addEventListener(t,i,!1):null!=e.attachEvent?e.attachEvent("on"+t,i):e[t]=i},r.prototype.removeEvent=function(e,t,i){return null!=e.removeEventListener?e.removeEventListener(t,i,!1):null!=e.detachEvent?e.detachEvent("on"+t,i):delete e[t]},r.prototype.innerHeight=function(){return"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight},e=r,i=this.WeakMap||this.MozWeakMap||(a.prototype.get=function(e){var t,i,n,o;for(t=i=0,n=(o=this.keys).length;i<n;t=++i)if(o[t]===e)return this.values[t]},a.prototype.set=function(e,t){var i,n,o,r;for(i=n=0,o=(r=this.keys).length;n<o;i=++n)if(r[i]===e)return void(this.values[i]=t);return this.keys.push(e),this.values.push(t)},i=a),n=this.MutationObserver||this.WebkitMutationObserver||this.MozMutationObserver||(u.notSupported=!0,u.prototype.observe=function(){},n=u),l=this.getComputedStyle||function(i,e){return this.getPropertyValue=function(e){var t;return"float"===e&&(e="styleFloat"),o.test(e)&&e.replace(o,function(e,t){return t.toUpperCase()}),(null!=(t=i.currentStyle)?t[e]:void 0)||null},this},o=/(\-([a-z]){1})/g,this.WOW=(c.prototype.defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0,callback:null,scrollContainer:null},c.prototype.init=function(){var e;return this.element=window.document.documentElement,"interactive"===(e=document.readyState)||"complete"===e?this.start():this.util().addEvent(document,"DOMContentLoaded",this.start),this.finished=[]},c.prototype.start=function(){var o,e,t,i,s;if(this.stopped=!1,this.boxes=function(){var e,t,i,n;for(n=[],e=0,t=(i=this.element.querySelectorAll("."+this.config.boxClass)).length;e<t;e++)o=i[e],n.push(o);return n}.call(this),this.all=function(){var e,t,i,n;for(n=[],e=0,t=(i=this.boxes).length;e<t;e++)o=i[e],n.push(o);return n}.call(this),this.boxes.length)if(this.disabled())this.resetStyle();else for(e=0,t=(i=this.boxes).length;e<t;e++)o=i[e],this.applyStyle(o,!0);if(this.disabled()||(this.util().addEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),this.util().addEvent(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live)return new n((s=this,function(e){var t,i,o,r,n;for(n=[],t=0,i=e.length;t<i;t++)r=e[t],n.push(function(){var e,t,i,n;for(n=[],e=0,t=(i=r.addedNodes||[]).length;e<t;e++)o=i[e],n.push(this.doSync(o));return n}.call(s));return n})).observe(document.body,{childList:!0,subtree:!0})},c.prototype.stop=function(){if(this.stopped=!0,this.util().removeEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),this.util().removeEvent(window,"resize",this.scrollHandler),null!=this.interval)return clearInterval(this.interval)},c.prototype.sync=function(e){if(n.notSupported)return this.doSync(this.element)},c.prototype.doSync=function(e){var t,i,n,o,r;if(null==e&&(e=this.element),1===e.nodeType){for(r=[],i=0,n=(o=(e=e.parentNode||e).querySelectorAll("."+this.config.boxClass)).length;i<n;i++)t=o[i],s.call(this.all,t)<0?(this.boxes.push(t),this.all.push(t),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(t,!0),r.push(this.scrolled=!0)):r.push(void 0);return r}},c.prototype.show=function(e){return this.applyStyle(e),e.className=e.className+" "+this.config.animateClass,null!=this.config.callback&&this.config.callback(e),this.util().emitEvent(e,this.wowEvent),this.util().addEvent(e,"animationend",this.resetAnimation),this.util().addEvent(e,"oanimationend",this.resetAnimation),this.util().addEvent(e,"webkitAnimationEnd",this.resetAnimation),this.util().addEvent(e,"MSAnimationEnd",this.resetAnimation),e},c.prototype.applyStyle=function(e,t){var i,n,o,r;return n=e.getAttribute("data-wow-duration"),i=e.getAttribute("data-wow-delay"),o=e.getAttribute("data-wow-iteration"),this.animate((r=this,function(){return r.customStyle(e,t,n,i,o)}))},c.prototype.animate="requestAnimationFrame"in window?function(e){return window.requestAnimationFrame(e)}:function(e){return e()},c.prototype.resetStyle=function(){var e,t,i,n,o;for(o=[],t=0,i=(n=this.boxes).length;t<i;t++)e=n[t],o.push(e.style.visibility="visible");return o},c.prototype.resetAnimation=function(e){var t;if(0<=e.type.toLowerCase().indexOf("animationend"))return(t=e.target||e.srcElement).className=t.className.replace(this.config.animateClass,"").trim()},c.prototype.customStyle=function(e,t,i,n,o){return t&&this.cacheAnimationName(e),e.style.visibility=t?"hidden":"visible",i&&this.vendorSet(e.style,{animationDuration:i}),n&&this.vendorSet(e.style,{animationDelay:n}),o&&this.vendorSet(e.style,{animationIterationCount:o}),this.vendorSet(e.style,{animationName:t?"none":this.cachedAnimationName(e)}),e},c.prototype.vendors=["moz","webkit"],c.prototype.vendorSet=function(o,e){var r,t,s,a;for(r in t=[],e)s=e[r],o[""+r]=s,t.push(function(){var e,t,i,n;for(n=[],e=0,t=(i=this.vendors).length;e<t;e++)a=i[e],n.push(o[""+a+r.charAt(0).toUpperCase()+r.substr(1)]=s);return n}.call(this));return t},c.prototype.vendorCSS=function(e,t){var i,n,o,r,s,a;for(r=(s=l(e)).getPropertyCSSValue(t),i=0,n=(o=this.vendors).length;i<n;i++)a=o[i],r=r||s.getPropertyCSSValue("-"+a+"-"+t);return r},c.prototype.animationName=function(t){var i;try{i=this.vendorCSS(t,"animation-name").cssText}catch(e){i=l(t).getPropertyValue("animation-name")}return"none"===i?"":i},c.prototype.cacheAnimationName=function(e){return this.animationNameCache.set(e,this.animationName(e))},c.prototype.cachedAnimationName=function(e){return this.animationNameCache.get(e)},c.prototype.scrollHandler=function(){return this.scrolled=!0},c.prototype.scrollCallback=function(){var o;if(this.scrolled&&(this.scrolled=!1,this.boxes=function(){var e,t,i,n;for(n=[],e=0,t=(i=this.boxes).length;e<t;e++)(o=i[e])&&(this.isVisible(o)?this.show(o):n.push(o));return n}.call(this),!this.boxes.length&&!this.config.live))return this.stop()},c.prototype.offsetTop=function(e){for(var t;void 0===e.offsetTop;)e=e.parentNode;for(t=e.offsetTop;e=e.offsetParent;)t+=e.offsetTop;return t},c.prototype.isVisible=function(e){var t,i,n,o,r;return i=e.getAttribute("data-wow-offset")||this.config.offset,o=(r=this.config.scrollContainer&&this.config.scrollContainer.scrollTop||window.pageYOffset)+Math.min(this.element.clientHeight,this.util().innerHeight())-i,t=(n=this.offsetTop(e))+e.clientHeight,n<=o&&r<=t},c.prototype.util=function(){return null!=this._util?this._util:this._util=new e},c.prototype.disabled=function(){return!this.config.mobile&&this.util().isMobile(navigator.userAgent)},c)}.call(this),function(t,i){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(e){return i(e,t,t.document)}):"object"==typeof module&&module.exports?module.exports=i(require("jquery"),t,t.document):i(jQuery,t,t.document)}("undefined"!=typeof window?window:this,function(o,r,s,t){"use strict";var u,c,d,p,f,h,m=[],g=[],v=[],y=[],w=0,a=0,b=1,x=!1,T=o(r),S=T.scrollTop(),C=!1,k=!1,E=!1,I=!1,A=[],$=(new Date).getTime(),l=!0,L=!1,z=0,_="onwheel"in s?"wheel":s.onmousewheel!==t?"mousewheel":"DOMMouseScroll",O={section:".section",sectionName:"section-name",interstitialSection:"",easing:"easeOutExpo",scrollSpeed:1100,offset:0,scrollbars:!0,target:"html,body",standardScrollElements:!1,setHeights:!0,overflowScroll:!0,updateHash:!0,touchScroll:!0,before:function(){},after:function(){},afterResize:function(){},afterRender:function(){}};function H(){return r.innerHeight+O.offset}function j(e,t,i,n){if(a===e&&(i=!1),!0===I)return!0;if(g[e]){if(!(C=!1)===l&&(l=!1,O.afterRender()),i&&"function"==typeof O.before&&!1===O.before(e,v))return!0;if(b=1,z=e?m[e]:0,!1===l&&e<a&&!1===n&&y[e]&&(d=H(),b=parseInt(v[e].outerHeight()/d),z=parseInt(m[e])+(v[e].outerHeight()-d)),O.updateHash&&O.sectionName&&(!0!==l||0!==e))if(history.pushState)try{history.replaceState(null,null,g[e])}catch(e){r.console&&console.warn("Scrollify warning: Page must be hosted to manipulate the hash value.")}else r.location.hash=g[e];if(a=e,t)o(O.target).stop().scrollTop(z),i&&O.after(e,v);else{if(k=!0,o().velocity?o(O.target).stop().velocity("scroll",{duration:O.scrollSpeed,easing:O.easing,offset:z,mobileHA:!1}):o(O.target).stop().animate({scrollTop:z},O.scrollSpeed,O.easing),r.location.hash.length&&O.sectionName&&r.console)try{o(r.location.hash).length&&console.warn("Scrollify warning: ID matches hash value - this will cause the page to anchor.")}catch(e){}o(O.target).promise().done(function(){l=k=!1,i&&O.after(e,v)})}}}function D(o){function e(e){for(var t=0,i=o.slice(Math.max(o.length-e,1)),n=0;n<i.length;n++)t+=i[n];return Math.ceil(t/e)}var t=e(10);return e(70)<=t}function e(e){function t(e){o().velocity?o(O.target).stop().velocity("scroll",{duration:O.scrollSpeed,easing:O.easing,offset:e,mobileHA:!1}):o(O.target).stop().animate({scrollTop:e},O.scrollSpeed,O.easing)}function i(e){e&&(S=T.scrollTop());var t=O.section;y=[],O.interstitialSection.length&&(t+=","+O.interstitialSection),!1===O.scrollbars&&(O.overflowScroll=!1),d=H(),o(t).each(function(e){var t=o(this);O.setHeights?t.is(O.interstitialSection)?y[e]=!1:t.css("height","auto").outerHeight()<d||"hidden"===t.css("overflow")?(t.css({height:d}),y[e]=!1):(t.css({height:t.outerHeight()}),O.overflowScroll?y[e]=!0:y[e]=!1):t.outerHeight()<d||!1===O.overflowScroll?y[e]=!1:y[e]=!0}),e&&T.scrollTop(S)}function n(e){var i=O.section;O.interstitialSection.length&&(i+=","+O.interstitialSection),m=[],g=[],v=[],o(i).each(function(e){var t=o(this);m[e]=0<e?parseInt(t.offset().top)+O.offset:parseInt(t.offset().top),O.sectionName&&t.data(O.sectionName)?g[e]="#"+t.data(O.sectionName).toString().replace(/ /g,"-"):!1===t.is(O.interstitialSection)?g[e]="#"+(e+1):(g[e]="#",e===o(i).length-1&&1<e&&(m[e]=m[e-1]+(parseInt(o(o(i)[e-1]).outerHeight())-parseInt(o(r).height()))+parseInt(t.outerHeight()))),v[e]=t;try{o(g[e]).length&&r.console&&console.warn("Scrollify warning: Section names can't match IDs - this will cause the browser to anchor.")}catch(e){}r.location.hash===g[e]&&(w=e,x=!0)}),!0===e&&j(w,!1,!1,!1)}function a(){return!y[w]||!((S=T.scrollTop())>parseInt(m[w]))}function l(){return!y[w]||(S=T.scrollTop(),d=H(),!(S<parseInt(m[w])+(v[w].outerHeight()-d)-28))}L=!0,o.easing.easeOutExpo=function(e,t,i,n,o){return t==o?i+n:n*(1-Math.pow(2,-10*t/o))+i},f={touches:{touchstart:{y:-1,x:-1},touchmove:{y:-1,x:-1},touchend:!(p={handleMousedown:function(){if(!0===I)return!0;E=C=!1},handleMouseup:function(){if(!0===I)return!0;C=!0,E&&p.calculateNearest(!1,!0)},handleScroll:function(){if(!0===I)return!0;u&&clearTimeout(u),u=setTimeout(function(){if(!(E=!0)===C)return!1;C=!1,p.calculateNearest(!1,!0)},200)},calculateNearest:function(e,t){S=T.scrollTop();for(var i,n=1,o=m.length,r=0,s=Math.abs(m[0]-S);n<o;n++)(i=Math.abs(m[n]-S))<s&&(s=i,r=n);(l()&&w<r||a())&&j(w=r,e,t,!1)},wheelHandler:function(e){if(!0===I)return!0;if(O.standardScrollElements&&(o(e.target).is(O.standardScrollElements)||o(e.target).closest(O.standardScrollElements).length))return!0;y[w]||e.preventDefault();var t,i=(new Date).getTime();t=(e=e||r.event).originalEvent?e.originalEvent.wheelDelta||-e.originalEvent.deltaY||-e.originalEvent.detail:e.wheelDelta||-e.deltaY||-e.detail;var n=Math.max(-1,Math.min(1,t));if(149<A.length&&A.shift(),A.push(Math.abs(t)),200<i-$&&(A=[]),$=i,k)return e.preventDefault(),!1;if(n<0){if(w<m.length-1&&l()){if(!D(A))return!1;e.preventDefault(),j(++w,!(k=!0),!0,!1)}}else if(0<n&&0<w&&a()){if(!D(A))return!1;e.preventDefault(),j(--w,!(k=!0),!0,!1)}},keyHandler:function(e){return!0===I||!1===s.activeElement.readOnly||(!(!O.standardScrollElements||!o(e.target).is(O.standardScrollElements)&&!o(e.target).closest(O.standardScrollElements).length)||!0!==k&&void(38==e.keyCode||33==e.keyCode?0<w&&a()&&(e.preventDefault(),j(--w,!1,!0,!1)):40!=e.keyCode&&34!=e.keyCode||w<m.length-1&&l()&&(e.preventDefault(),j(++w,!1,!0,!1))))},init:function(){O.scrollbars?(T.on("mousedown",p.handleMousedown),T.on("mouseup",p.handleMouseup),T.on("scroll",p.handleScroll)):o("body").css({overflow:"hidden"}),r.addEventListener(_,p.wheelHandler,{passive:!1}),T.on("keydown",p.keyHandler)}}),direction:"undetermined"},options:{distance:30,timeGap:800,timeStamp:(new Date).getTime()},touchHandler:function(e){if(!0===I)return!0;if(O.standardScrollElements&&(o(e.target).is(O.standardScrollElements)||o(e.target).closest(O.standardScrollElements).length))return!0;var t;if(void 0!==e&&void 0!==e.touches)switch(t=e.touches[0],e.type){case"touchstart":f.touches.touchstart.y=t.pageY,f.touches.touchmove.y=-1,f.touches.touchstart.x=t.pageX,f.touches.touchmove.x=-1,f.options.timeStamp=(new Date).getTime(),f.touches.touchend=!1;case"touchmove":f.touches.touchmove.y=t.pageY,f.touches.touchmove.x=t.pageX,f.touches.touchstart.y!==f.touches.touchmove.y&&Math.abs(f.touches.touchstart.y-f.touches.touchmove.y)>Math.abs(f.touches.touchstart.x-f.touches.touchmove.x)&&(e.preventDefault(),f.touches.direction="y",f.options.timeStamp+f.options.timeGap<(new Date).getTime()&&0==f.touches.touchend&&(f.touches.touchend=!0,-1<f.touches.touchstart.y&&Math.abs(f.touches.touchmove.y-f.touches.touchstart.y)>f.options.distance&&(f.touches.touchstart.y<f.touches.touchmove.y?f.up():f.down())));break;case"touchend":!1===f.touches[e.type]&&(f.touches[e.type]=!0,-1<f.touches.touchstart.y&&-1<f.touches.touchmove.y&&"y"===f.touches.direction&&(Math.abs(f.touches.touchmove.y-f.touches.touchstart.y)>f.options.distance&&(f.touches.touchstart.y<f.touches.touchmove.y?f.up():f.down()),f.touches.touchstart.y=-1,f.touches.touchstart.x=-1,f.touches.direction="undetermined"))}},down:function(){w<m.length&&(l()&&w<m.length-1?j(++w,!1,!0,!1):(d=H(),Math.floor(v[w].height()/d)>b?(t(parseInt(m[w])+d*b),b+=1):t(parseInt(m[w])+(v[w].outerHeight()-d))))},up:function(){0<=w&&(a()&&0<w?j(--w,!1,!0,!1):2<b?(d=H(),b-=1,t(parseInt(m[w])+d*b)):(b=1,t(parseInt(m[w]))))},init:function(){if(s.addEventListener&&O.touchScroll){var e={passive:!1};s.addEventListener("touchstart",f.touchHandler,e),s.addEventListener("touchmove",f.touchHandler,e),s.addEventListener("touchend",f.touchHandler,e)}}},h={refresh:function(e,t){clearTimeout(c),c=setTimeout(function(){i(!0),n(t,!1),e&&O.afterResize()},400)},handleUpdate:function(){h.refresh(!1,!1)},handleResize:function(){h.refresh(!0,!0)},handleOrientation:function(){h.refresh(!0,!0)}},O=o.extend(O,e),i(!1),n(!1,!0),!0===x?j(w,!1,!0,!0):setTimeout(function(){p.calculateNearest(!0,!1)},200),m.length&&(p.init(),f.init(),T.on("resize",h.handleResize),s.addEventListener&&r.addEventListener("orientationchange",h.handleOrientation,!1))}function i(e,t){for(var i=g.length;0<=i;i--)"string"==typeof e?g[i]===e&&j(w=i,t,!0,!0):i===e&&j(w=i,t,!0,!0)}return e.move=function(e){if(e===t)return!1;e.originalEvent&&(e=o(this).attr("href")),i(e,!1)},e.instantMove=function(e){if(e===t)return!1;i(e,!0)},e.next=function(){w<g.length&&j(w+=1,!1,!0,!0)},e.previous=function(){0<w&&j(w-=1,!1,!0,!0)},e.instantNext=function(){w<g.length&&j(w+=1,!0,!0,!0)},e.instantPrevious=function(){0<w&&j(w-=1,!0,!0,!0)},e.destroy=function(){if(!L)return!1;O.setHeights&&o(O.section).each(function(){o(this).css("height","auto")}),T.off("resize",h.handleResize),O.scrollbars&&(T.off("mousedown",p.handleMousedown),T.off("mouseup",p.handleMouseup),T.off("scroll",p.handleScroll)),r.removeEventListener(_,p.wheelHandler),T.off("keydown",p.keyHandler),s.addEventListener&&O.touchScroll&&(s.removeEventListener("touchstart",f.touchHandler,!1),s.removeEventListener("touchmove",f.touchHandler,!1),s.removeEventListener("touchend",f.touchHandler,!1)),m=[],g=[],v=[],y=[]},e.update=function(){if(!L)return!1;h.handleUpdate()},e.current=function(){return v[w]},e.currentIndex=function(){return w},e.disable=function(){I=!0},e.enable=function(){I=!1,L&&p.calculateNearest(!1,!1)},e.isDisabled=function(){return I},e.setOptions=function(e){if(!L)return!1;"object"==typeof e?(O=o.extend(O,e),h.handleUpdate()):r.console&&console.warn("Scrollify warning: setOptions expects an object.")},o.scrollify=e}),function(e,t){if("function"==typeof define&&define.amd)define(["exports"],t);else if("undefined"!=typeof exports)t(exports);else{var i={};t(i),e.bodyScrollLock=i}}(this,function(e){"use strict";function o(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}Object.defineProperty(e,"__esModule",{value:!0});var r=!1;if("undefined"!=typeof window){var t={get passive(){r=!0}};window.addEventListener("testPassive",null,t),window.removeEventListener("testPassive",null,t)}function s(t){return u.some(function(e){return!(!e.options.allowTouchMove||!e.options.allowTouchMove(t))})}function a(e){var t=e||window.event;return!!s(t.target)||(1<t.touches.length||(t.preventDefault&&t.preventDefault(),!1))}function i(){setTimeout(function(){void 0!==f&&(document.body.style.paddingRight=f,f=void 0),void 0!==p&&(document.body.style.overflow=p,p=void 0)})}var l="undefined"!=typeof window&&window.navigator&&window.navigator.platform&&/iP(ad|hone|od)/.test(window.navigator.platform),u=[],c=!1,d=-1,p=void 0,f=void 0;e.disableBodyScroll=function(t,e){if(l){if(!t)return void console.error("disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.");if(t&&!u.some(function(e){return e.targetElement===t})){var i={targetElement:t,options:e||{}};u=[].concat(o(u),[i]),t.ontouchstart=function(e){1===e.targetTouches.length&&(d=e.targetTouches[0].clientY)},t.ontouchmove=function(e){1===e.targetTouches.length&&function(e,t){var i=e.targetTouches[0].clientY-d;s(e.target)||(t&&0===t.scrollTop&&0<i?a(e):function(e){return!!e&&e.scrollHeight-e.scrollTop<=e.clientHeight}(t)&&i<0?a(e):e.stopPropagation())}(e,t)},c||(document.addEventListener("touchmove",a,r?{passive:!1}:void 0),c=!0)}}else{!function(i){setTimeout(function(){if(void 0===f){var e=!!i&&!0===i.reserveScrollBarGap,t=window.innerWidth-document.documentElement.clientWidth;e&&0<t&&(f=document.body.style.paddingRight,document.body.style.paddingRight=t+"px")}void 0===p&&(p=document.body.style.overflow,document.body.style.overflow="hidden")})}(e);var n={targetElement:t,options:e||{}};u=[].concat(o(u),[n])}},e.clearAllBodyScrollLocks=function(){l?(u.forEach(function(e){e.targetElement.ontouchstart=null,e.targetElement.ontouchmove=null}),c&&(document.removeEventListener("touchmove",a,r?{passive:!1}:void 0),c=!1),u=[],d=-1):(i(),u=[])},e.enableBodyScroll=function(t){if(l){if(!t)return void console.error("enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.");t.ontouchstart=null,t.ontouchmove=null,u=u.filter(function(e){return e.targetElement!==t}),c&&0===u.length&&(document.removeEventListener("touchmove",a,r?{passive:!1}:void 0),c=!1)}else(u=u.filter(function(e){return e.targetElement!==t})).length||i()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
