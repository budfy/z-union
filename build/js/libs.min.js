function distToSqEdge(e,t,i,n,o){return vx=n-t,vy=o-i,i=t=0,vx>vy?vx>-vy?t=1:i=1:vx>-vy?i=-1:t=-1,vlength=Math.sqrt(vx*vx+vy*vy),vux=vx/vlength,vuy=vy/vlength,cosA=vux*t+vuy*i,centreToSqEdge=Math.abs(.5*e/cosA),mouseToSquareEdge=vlength-centreToSqEdge}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(S,e){"use strict";function m(e){return null!=e&&e===e.window}var t=[],C=S.document,n=Object.getPrototypeOf,a=t.slice,g=t.concat,l=t.push,o=t.indexOf,i={},r=i.toString,v=i.hasOwnProperty,s=v.toString,u=s.call(Object),y={},w=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,i){var n,o,r=(i=i||C).createElement("script");if(r.text=e,t)for(n in c)(o=t[n]||t.getAttribute&&t.getAttribute(n))&&r.setAttribute(n,o);i.head.appendChild(r).parentNode.removeChild(r)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[r.call(e)]||"object":typeof e}var d="3.4.1",k=function(e,t){return new k.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function f(e){var t=!!e&&"length"in e&&e.length,i=x(e);return!w(e)&&!m(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:d,constructor:k,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(i){return this.pushStack(k.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,i,n,o,r,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||w(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=e[t],"__proto__"!==t&&s!==n&&(u&&n&&(k.isPlainObject(n)||(o=Array.isArray(n)))?(i=s[t],r=o&&!Array.isArray(i)?[]:o||k.isPlainObject(i)?i:{},o=!1,s[t]=k.extend(u,r,n)):void 0!==n&&(s[t]=n));return s},k.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==r.call(e))&&(!(t=n(e))||"function"==typeof(i=v.call(t,"constructor")&&t.constructor)&&s.call(i)===u)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var i,n=0;if(f(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(f(Object(e))?k.merge(i,"string"==typeof e?[e]:e):l.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:o.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,o=e.length;n<i;n++)e[o++]=t[n];return e.length=o,e},grep:function(e,t,i){for(var n=[],o=0,r=e.length,s=!i;o<r;o++)!t(e[o],o)!=s&&n.push(e[o]);return n},map:function(e,t,i){var n,o,r=0,s=[];if(f(e))for(n=e.length;r<n;r++)null!=(o=t(e[r],r,i))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,i))&&s.push(o);return g.apply([],s)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var h=function(i){function d(e,t,i){var n="0x"+t-65536;return n!=n||i?t:n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320)}function o(){T()}var e,f,b,r,s,h,p,m,x,l,u,T,S,a,C,g,c,v,y,k="sizzle"+1*new Date,w=i.document,E=0,n=0,I=le(),A=le(),$=le(),L=le(),z=function(e,t){return e===t&&(u=!0),0},_={}.hasOwnProperty,t=[],O=t.pop,H=t.push,D=t.push,j=t.slice,M=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",W="\\["+N+"*("+q+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+N+"*\\]",R=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",B=new RegExp(N+"+","g"),F=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),U=new RegExp("^"+N+"*,"+N+"*"),Y=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),X=new RegExp(N+"|>"),G=new RegExp(R),Q=new RegExp("^"+q+"$"),V={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ie=/[+~]/,ne=new RegExp("\\\\([\\da-f]{1,6}"+N+"?|("+N+")|.)","ig"),oe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{D.apply(t=j.call(w.childNodes),w.childNodes),t[w.childNodes.length].nodeType}catch(e){D={apply:t.length?function(e,t){H.apply(e,j.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function ae(t,e,i,n){var o,r,s,a,l,u,c,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return i;if(!n&&((e?e.ownerDocument||e:w)!==S&&T(e),e=e||S,C)){if(11!==p&&(l=te.exec(t)))if(o=l[1]){if(9===p){if(!(s=e.getElementById(o)))return i;if(s.id===o)return i.push(s),i}else if(d&&(s=d.getElementById(o))&&y(e,s)&&s.id===o)return i.push(s),i}else{if(l[2])return D.apply(i,e.getElementsByTagName(t)),i;if((o=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return D.apply(i,e.getElementsByClassName(o)),i}if(f.qsa&&!L[t+" "]&&(!g||!g.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,d=e,1===p&&X.test(t)){for((a=e.getAttribute("id"))?a=a.replace(oe,re):e.setAttribute("id",a=k),r=(u=h(t)).length;r--;)u[r]="#"+a+" "+we(u[r]);c=u.join(","),d=ie.test(t)&&ve(e.parentNode)||e}try{return D.apply(i,d.querySelectorAll(c)),i}catch(e){L(t,!0)}finally{a===k&&e.removeAttribute("id")}}}return m(t.replace(F,"$1"),e,i,n)}function le(){var n=[];return function e(t,i){return n.push(t+" ")>b.cacheLength&&delete e[n.shift()],e[t+" "]=i}}function ue(e){return e[k]=!0,e}function ce(e){var t=S.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var i=e.split("|"),n=i.length;n--;)b.attrHandle[i[n]]=t}function pe(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function fe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function me(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&se(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ge(s){return ue(function(r){return r=+r,ue(function(e,t){for(var i,n=s([],e.length,r),o=n.length;o--;)e[i=n[o]]&&(e[i]=!(t[i]=e[i]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=ae.support={},s=ae.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!Z.test(t||i&&i.nodeName||"HTML")},T=ae.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:w;return n!==S&&9===n.nodeType&&n.documentElement&&(a=(S=n).documentElement,C=!s(S),w!==S&&(i=S.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",o,!1):i.attachEvent&&i.attachEvent("onunload",o)),f.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=ce(function(e){return e.appendChild(S.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=ee.test(S.getElementsByClassName),f.getById=ce(function(e){return a.appendChild(e).id=k,!S.getElementsByName||!S.getElementsByName(k).length}),f.getById?(b.filter.ID=function(e){var t=e.replace(ne,d);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i=t.getElementById(e);return i?[i]:[]}}):(b.filter.ID=function(e){var i=e.replace(ne,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i,n,o,r=t.getElementById(e);if(r){if((i=r.getAttributeNode("id"))&&i.value===e)return[r];for(o=t.getElementsByName(e),n=0;r=o[n++];)if((i=r.getAttributeNode("id"))&&i.value===e)return[r]}return[]}}),b.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],o=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;i=r[o++];)1===i.nodeType&&n.push(i);return n},b.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},c=[],g=[],(f.qsa=ee.test(S.querySelectorAll))&&(ce(function(e){a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+N+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+N+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+k+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||g.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=S.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+N+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(f.matchesSelector=ee.test(v=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){f.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),c.push("!=",R)}),g=g.length&&new RegExp(g.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(a.compareDocumentPosition),y=t||ee.test(a.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return u=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===i?e===S||e.ownerDocument===w&&y(w,e)?-1:t===S||t.ownerDocument===w&&y(w,t)?1:l?M(l,e)-M(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return u=!0,0;var i,n=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e===S?-1:t===S?1:o?-1:r?1:l?M(l,e)-M(l,t):0;if(o===r)return pe(e,t);for(i=e;i=i.parentNode;)s.unshift(i);for(i=t;i=i.parentNode;)a.unshift(i);for(;s[n]===a[n];)n++;return n?pe(s[n],a[n]):s[n]===w?-1:a[n]===w?1:0}),S},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if((e.ownerDocument||e)!==S&&T(e),f.matchesSelector&&C&&!L[t+" "]&&(!c||!c.test(t))&&(!g||!g.test(t)))try{var i=v.call(e,t);if(i||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){L(t,!0)}return 0<ae(t,S,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!==S&&T(e),y(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!==S&&T(e);var i=b.attrHandle[t.toLowerCase()],n=i&&_.call(b.attrHandle,t.toLowerCase())?i(e,t,!C):void 0;return void 0!==n?n:f.attributes||!C?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},ae.escape=function(e){return(e+"").replace(oe,re)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],n=0,o=0;if(u=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(z),u){for(;t=e[o++];)t===e[o]&&(n=i.push(o));for(;n--;)e.splice(i[n],1)}return l=null,e},r=ae.getText=function(e){var t,i="",n=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[n++];)i+=r(t);return i},(b=ae.selectors={cacheLength:50,createPseudo:ue,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&G.test(i)&&(t=h(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ne,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=I[e+" "];return t||(t=new RegExp("(^|"+N+")"+e+"("+N+"|$)"))&&I(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,n,o){return function(e){var t=ae.attr(e,i);return null==t?"!="===n:!n||(t+="","="===n?t===o:"!="===n?t!==o:"^="===n?o&&0===t.indexOf(o):"*="===n?o&&-1<t.indexOf(o):"$="===n?o&&t.slice(-o.length)===o:"~="===n?-1<(" "+t.replace(B," ")+" ").indexOf(o):"|="===n&&(t===o||t.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,e,t,m,g){var v="nth"!==h.slice(0,3),y="last"!==h.slice(-4),w="of-type"===e;return 1===m&&0===g?function(e){return!!e.parentNode}:function(e,t,i){var n,o,r,s,a,l,u=v!=y?"nextSibling":"previousSibling",c=e.parentNode,d=w&&e.nodeName.toLowerCase(),p=!i&&!w,f=!1;if(c){if(v){for(;u;){for(s=e;s=s[u];)if(w?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=u="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&p){for(f=(a=(n=(o=(r=(s=c)[k]||(s[k]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&n[1])&&n[2],s=a&&c.childNodes[a];s=++a&&s&&s[u]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===e){o[h]=[E,a,f];break}}else if(p&&(f=a=(n=(o=(r=(s=e)[k]||(s[k]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&n[1]),!1===f)for(;(s=++a&&s&&s[u]||(f=a=0)||l.pop())&&((w?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++f||(p&&((o=(r=s[k]||(s[k]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[E,f]),s!==e)););return(f-=g)===m||f%m==0&&0<=f/m}}},PSEUDO:function(e,r){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return s[k]?s(r):1<s.length?(t=[e,e,"",r],b.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,t){for(var i,n=s(e,r),o=n.length;o--;)e[i=M(e,n[o])]=!(t[i]=n[o])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ue(function(e){var n=[],o=[],a=p(e.replace(F,"$1"));return a[k]?ue(function(e,t,i,n){for(var o,r=a(e,null,n,[]),s=e.length;s--;)(o=r[s])&&(e[s]=!(t[s]=o))}):function(e,t,i){return n[0]=e,a(n,null,i,o),n[0]=null,!o.pop()}}),has:ue(function(t){return function(e){return 0<ae(t,e).length}}),contains:ue(function(t){return t=t.replace(ne,d),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:ue(function(i){return Q.test(i||"")||ae.error("unsupported lang: "+i),i=i.replace(ne,d).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,i){return[i<0?i+t:i]}),even:ge(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:ge(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:ge(function(e,t,i){for(var n=i<0?i+t:t<i?t:i;0<=--n;)e.push(n);return e}),gt:ge(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=fe(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function ye(){}function we(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function be(a,e,t){var l=e.dir,u=e.next,c=u||l,d=t&&"parentNode"===c,p=n++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||d)return a(e,t,i);return!1}:function(e,t,i){var n,o,r,s=[E,p];if(i){for(;e=e[l];)if((1===e.nodeType||d)&&a(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(o=(r=e[k]||(e[k]={}))[e.uniqueID]||(r[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((n=o[c])&&n[0]===E&&n[1]===p)return s[2]=n[2];if((o[c]=s)[2]=a(e,t,i))return!0}return!1}}function xe(o){return 1<o.length?function(e,t,i){for(var n=o.length;n--;)if(!o[n](e,t,i))return!1;return!0}:o[0]}function Te(e,t,i,n,o){for(var r,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(r=e[a])&&(i&&!i(r,n,o)||(s.push(r),u&&t.push(a)));return s}function Se(f,h,m,g,v,e){return g&&!g[k]&&(g=Se(g)),v&&!v[k]&&(v=Se(v,e)),ue(function(e,t,i,n){var o,r,s,a=[],l=[],u=t.length,c=e||function(e,t,i){for(var n=0,o=t.length;n<o;n++)ae(e,t[n],i);return i}(h||"*",i.nodeType?[i]:i,[]),d=!f||!e&&h?c:Te(c,a,f,i,n),p=m?v||(e?f:u||g)?[]:t:d;if(m&&m(d,p,i,n),g)for(o=Te(p,l),g(o,[],i,n),r=o.length;r--;)(s=o[r])&&(p[l[r]]=!(d[l[r]]=s));if(e){if(v||f){if(v){for(o=[],r=p.length;r--;)(s=p[r])&&o.push(d[r]=s);v(null,p=[],o,n)}for(r=p.length;r--;)(s=p[r])&&-1<(o=v?M(e,s):a[r])&&(e[o]=!(t[o]=s))}}else p=Te(p===t?p.splice(u,p.length):p),v?v(null,t,p,n):D.apply(t,p)})}function Ce(e){for(var o,t,i,n=e.length,r=b.relative[e[0].type],s=r||b.relative[" "],a=r?1:0,l=be(function(e){return e===o},s,!0),u=be(function(e){return-1<M(o,e)},s,!0),c=[function(e,t,i){var n=!r&&(i||t!==x)||((o=t).nodeType?l(e,t,i):u(e,t,i));return o=null,n}];a<n;a++)if(t=b.relative[e[a].type])c=[be(xe(c),t)];else{if((t=b.filter[e[a].type].apply(null,e[a].matches))[k]){for(i=++a;i<n&&!b.relative[e[i].type];i++);return Se(1<a&&xe(c),1<a&&we(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(F,"$1"),t,a<i&&Ce(e.slice(a,i)),i<n&&Ce(e=e.slice(i)),i<n&&we(e))}c.push(t)}return xe(c)}function ke(g,v){function e(e,t,i,n,o){var r,s,a,l=0,u="0",c=e&&[],d=[],p=x,f=e||w&&b.find.TAG("*",o),h=E+=null==p?1:Math.random()||.1,m=f.length;for(o&&(x=t===S||t||o);u!==m&&null!=(r=f[u]);u++){if(w&&r){for(s=0,t||r.ownerDocument===S||(T(r),i=!C);a=g[s++];)if(a(r,t||S,i)){n.push(r);break}o&&(E=h)}y&&((r=!a&&r)&&l--,e&&c.push(r))}if(l+=u,y&&u!==l){for(s=0;a=v[s++];)a(c,d,t,i);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=O.call(n));d=Te(d)}D.apply(n,d),o&&!e&&0<d.length&&1<l+v.length&&ae.uniqueSort(n)}return o&&(E=h,x=p),c}var y=0<v.length,w=0<g.length;return y?ue(e):e}return ye.prototype=b.filters=b.pseudos,b.setFilters=new ye,h=ae.tokenize=function(e,t){var i,n,o,r,s,a,l,u=A[e+" "];if(u)return t?0:u.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(r in i&&!(n=U.exec(s))||(n&&(s=s.slice(n[0].length)||s),a.push(o=[])),i=!1,(n=Y.exec(s))&&(i=n.shift(),o.push({value:i,type:n[0].replace(F," ")}),s=s.slice(i.length)),b.filter)!(n=V[r].exec(s))||l[r]&&!(n=l[r](n))||(i=n.shift(),o.push({value:i,type:r,matches:n}),s=s.slice(i.length));if(!i)break}return t?s.length:s?ae.error(e):A(e,a).slice(0)},p=ae.compile=function(e,t){var i,n=[],o=[],r=$[e+" "];if(!r){for(i=(t=t||h(e)).length;i--;)(r=Ce(t[i]))[k]?n.push(r):o.push(r);(r=$(e,ke(o,n))).selector=e}return r},m=ae.select=function(e,t,i,n){var o,r,s,a,l,u="function"==typeof e&&e,c=!n&&h(e=u.selector||e);if(i=i||[],1===c.length){if(2<(r=c[0]=c[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===t.nodeType&&C&&b.relative[r[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(ne,d),t)||[])[0]))return i;u&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=V.needsContext.test(e)?0:r.length;o--&&(s=r[o],!b.relative[a=s.type]);)if((l=b.find[a])&&(n=l(s.matches[0].replace(ne,d),ie.test(r[0].type)&&ve(t.parentNode)||t))){if(r.splice(o,1),!(e=n.length&&we(r)))return D.apply(i,n),i;break}}return(u||p(e,c))(n,t,!C,i,!t||ie.test(e)&&ve(t.parentNode)||t),i},f.sortStable=k.split("").sort(z).join("")===k,f.detectDuplicates=!!u,T(),f.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(S.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||de(P,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),ae}(S);k.find=h,k.expr=h.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=h.uniqueSort,k.text=h.getText,k.isXMLDoc=h.isXML,k.contains=h.contains,k.escapeSelector=h.escape;function T(e,t,i){for(var n=[],o=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&k(e).is(i))break;n.push(e)}return n}function E(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i}var I=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var $=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,i,n){return w(i)?k.grep(e,function(e,t){return!!i.call(e,t,e)!==n}):i.nodeType?k.grep(e,function(e){return e===i!==n}):"string"!=typeof i?k.grep(e,function(e){return-1<o.call(i,e)!==n}):k.filter(i,e,n)}k.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?k.find.matchesSelector(n,e)?[n]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,i,n=this.length,o=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<n;t++)if(k.contains(o[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)k.find(e,o[t],i);return 1<n?k.uniqueSort(i):i},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&I.test(e)?k(e):e||[],!1).length}});var z,_=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,i){var n,o;if(!e)return this;if(i=i||z,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):w(e)?void 0!==i.ready?i.ready(e):e(k):k.makeArray(e,this);if(!(n="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:_.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),$.test(n[1])&&k.isPlainObject(t))for(n in t)w(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(o=C.getElementById(n[2]))&&(this[0]=o,this.length=1),this}).prototype=k.fn,z=k(C);var O=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function D(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,o=this.length,r=[],s="string"!=typeof e&&k(e);if(!I.test(e))for(;n<o;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(s?-1<s.index(i):1===i.nodeType&&k.find.matchesSelector(i,e))){r.push(i);break}return this.pushStack(1<r.length?k.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?o.call(k(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,i){return T(e,"parentNode",i)},next:function(e){return D(e,"nextSibling")},prev:function(e){return D(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,i){return T(e,"nextSibling",i)},prevUntil:function(e,t,i){return T(e,"previousSibling",i)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(n,o){k.fn[n]=function(e,t){var i=k.map(this,o,e);return"Until"!==n.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=k.filter(t,i)),1<this.length&&(H[n]||k.uniqueSort(i),O.test(n)&&i.reverse()),this.pushStack(i)}});var j=/[^\x20\t\r\n\f]+/g;function M(e){return e}function P(e){throw e}function N(e,t,i,n){var o;try{e&&w(o=e.promise)?o.call(e).done(t).fail(i):e&&w(o=e.then)?o.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}k.Callbacks=function(n){n="string"==typeof n?function(e){var i={};return k.each(e.match(j)||[],function(e,t){i[t]=!0}),i}(n):k.extend({},n);function i(){for(r=r||n.once,t=o=!0;a.length;l=-1)for(e=a.shift();++l<s.length;)!1===s[l].apply(e[0],e[1])&&n.stopOnFalse&&(l=s.length,e=!1);n.memory||(e=!1),o=!1,r&&(s=e?[]:"")}var o,e,t,r,s=[],a=[],l=-1,u={add:function(){return s&&(e&&!o&&(l=s.length-1,a.push(e)),function i(e){k.each(e,function(e,t){w(t)?n.unique&&u.has(t)||s.push(t):t&&t.length&&"string"!==x(t)&&i(t)})}(arguments),e&&!o&&i()),this},remove:function(){return k.each(arguments,function(e,t){for(var i;-1<(i=k.inArray(t,s,i));)s.splice(i,1),i<=l&&l--}),this},has:function(e){return e?-1<k.inArray(e,s):0<s.length},empty:function(){return s=s&&[],this},disable:function(){return r=a=[],s=e="",this},disabled:function(){return!s},lock:function(){return r=a=[],e||o||(s=e=""),this},locked:function(){return!!r},fireWith:function(e,t){return r||(t=[e,(t=t||[]).slice?t.slice():t],a.push(t),o||i()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!t}};return u},k.extend({Deferred:function(e){var r=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],o="pending",s={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var o=arguments;return k.Deferred(function(n){k.each(r,function(e,t){var i=w(o[t[4]])&&o[t[4]];a[t[1]](function(){var e=i&&i.apply(this,arguments);e&&w(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,i?[e]:arguments)})}),o=null}).promise()},then:function(t,i,n){var l=0;function u(o,r,s,a){return function(){function e(){var e,t;if(!(o<l)){if((e=s.apply(i,n))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,w(t)?a?t.call(e,u(l,r,M,a),u(l,r,P,a)):(l++,t.call(e,u(l,r,M,a),u(l,r,P,a),u(l,r,M,r.notifyWith))):(s!==M&&(i=void 0,n=[e]),(a||r.resolveWith)(i,n))}}var i=this,n=arguments,t=a?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),l<=o+1&&(s!==P&&(i=void 0,n=[e]),r.rejectWith(i,n))}};o?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),S.setTimeout(t))}}return k.Deferred(function(e){r[0][3].add(u(0,e,w(n)?n:M,e.notifyWith)),r[1][3].add(u(0,e,w(t)?t:M)),r[2][3].add(u(0,e,w(i)?i:P))}).promise()},promise:function(e){return null!=e?k.extend(e,s):s}},a={};return k.each(r,function(e,t){var i=t[2],n=t[5];s[t[1]]=i.add,n&&i.add(function(){o=n},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),i.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=i.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){o[t]=this,r[t]=1<arguments.length?a.call(arguments):e,--i||s.resolveWith(o,r)}}var i=arguments.length,n=i,o=Array(n),r=a.call(arguments),s=k.Deferred();if(i<=1&&(N(e,s.done(t(n)).resolve,s.reject,!i),"pending"===s.state()||w(r[n]&&r[n].then)))return s.then();for(;n--;)N(r[n],t(n),s.reject);return s.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){S.console&&S.console.warn&&e&&q.test(e.name)&&S.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){S.setTimeout(function(){throw e})};var W=k.Deferred();function R(){C.removeEventListener("DOMContentLoaded",R),S.removeEventListener("load",R),k.ready()}k.fn.ready=function(e){return W.then(e).catch(function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||W.resolveWith(C,[k])}}),k.ready.then=W.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?S.setTimeout(k.ready):(C.addEventListener("DOMContentLoaded",R),S.addEventListener("load",R));var B=function(e,t,i,n,o,r,s){var a=0,l=e.length,u=null==i;if("object"===x(i))for(a in o=!0,i)B(e,t,a,i[a],!0,r,s);else if(void 0!==n&&(o=!0,w(n)||(s=!0),u&&(t=s?(t.call(e,n),null):(u=t,function(e,t,i){return u.call(k(e),i)})),t))for(;a<l;a++)t(e[a],i,s?n:n.call(e[a],a,t(e[a],i)));return o?e:u?t.call(e):l?t(e[0],i):r},F=/^-ms-/,U=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function X(e){return e.replace(F,"ms-").replace(U,Y)}function G(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function Q(){this.expando=k.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,o=this.cache(e);if("string"==typeof t)o[X(t)]=i;else for(n in t)o[X(n)]=t[n];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(X):(t=X(t))in n?[t]:t.match(j)||[]).length;for(;i--;)delete n[t[i]]}void 0!==t&&!k.isEmptyObject(n)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var V=new Q,Z=new Q,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function ee(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:K.test(e)?JSON.parse(e):e)}(i)}catch(e){}Z.set(e,t,i)}else i=void 0;return i}k.extend({hasData:function(e){return Z.hasData(e)||V.hasData(e)},data:function(e,t,i){return Z.access(e,t,i)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,i){return V.access(e,t,i)},_removeData:function(e,t){V.remove(e,t)}}),k.fn.extend({data:function(i,e){var t,n,o,r=this[0],s=r&&r.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){Z.set(this,i)}):B(this,function(e){var t;if(r&&void 0===e)return void 0!==(t=Z.get(r,i))?t:void 0!==(t=ee(r,i))?t:void 0;this.each(function(){Z.set(this,i,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=Z.get(r),1===r.nodeType&&!V.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(n=s[t].name).indexOf("data-")&&(n=X(n.slice(5)),ee(r,n,o[n]));V.set(r,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),k.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=V.get(e,t),i&&(!n||Array.isArray(i)?n=V.access(e,t,k.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=k.queue(e,t),n=i.length,o=i.shift(),r=k._queueHooks(e,t);"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===t&&i.unshift("inprogress"),delete r.stop,o.call(e,function(){k.dequeue(e,t)},r)),!n&&r&&r.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return V.get(e,i)||V.access(e,i,{empty:k.Callbacks("once memory").add(function(){V.remove(e,[t+"queue",i])})})}}),k.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===i?this:this.each(function(){var e=k.queue(this,t,i);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function i(){--o||r.resolveWith(s,[s])}var n,o=1,r=k.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=V.get(s[a],e+"queueHooks"))&&n.empty&&(o++,n.empty.add(i));return i(),r.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],oe=C.documentElement,re=function(e){return k.contains(e.ownerDocument,e)},se={composed:!0};oe.getRootNode&&(re=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});function ae(e,t,i,n){var o,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];for(r in o=i.apply(e,n||[]),t)e.style[r]=s[r];return o}var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&re(e)&&"none"===k.css(e,"display")};function ue(e,t,i,n){var o,r,s=20,a=n?function(){return n.cur()}:function(){return k.css(e,t,"")},l=a(),u=i&&i[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==u&&+l)&&ie.exec(k.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)k.style(e,t,c+u),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),c/=r;c*=2,k.style(e,t,c+u),i=i||[]}return i&&(c=+c||+l||0,o=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=c,n.end=o)),o}var ce={};function de(e,t){for(var i,n,o,r,s,a,l,u=[],c=0,d=e.length;c<d;c++)(n=e[c]).style&&(i=n.style.display,t?("none"===i&&(u[c]=V.get(n,"display")||null,u[c]||(n.style.display="")),""===n.style.display&&le(n)&&(u[c]=(l=s=r=void 0,s=(o=n).ownerDocument,a=o.nodeName,(l=ce[a])||(r=s.body.appendChild(s.createElement(a)),l=k.css(r,"display"),r.parentNode.removeChild(r),"none"===l&&(l="block"),ce[a]=l)))):"none"!==i&&(u[c]="none",V.set(n,"display",i)));for(c=0;c<d;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}k.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){le(this)?k(this).show():k(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?k.merge([e],i):i}function ve(e,t){for(var i=0,n=e.length;i<n;i++)V.set(e[i],"globalEval",!t||V.get(t[i],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var ye,we,be=/<|&#?\w+;/;function xe(e,t,i,n,o){for(var r,s,a,l,u,c,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===x(r))k.merge(p,r.nodeType?[r]:r);else if(be.test(r)){for(s=s||d.appendChild(t.createElement("div")),a=(fe.exec(r)||["",""])[1].toLowerCase(),l=me[a]||me._default,s.innerHTML=l[1]+k.htmlPrefilter(r)+l[2],c=l[0];c--;)s=s.lastChild;k.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",f=0;r=p[f++];)if(n&&-1<k.inArray(r,n))o&&o.push(r);else if(u=re(r),s=ge(d.appendChild(r),"script"),u&&ve(s),i)for(c=0;r=s[c++];)he.test(r.type||"")&&i.push(r);return d}ye=C.createDocumentFragment().appendChild(C.createElement("div")),(we=C.createElement("input")).setAttribute("type","radio"),we.setAttribute("checked","checked"),we.setAttribute("name","t"),ye.appendChild(we),y.checkClone=ye.cloneNode(!0).cloneNode(!0).lastChild.checked,ye.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ye.cloneNode(!0).lastChild.defaultValue;var Te=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Ee(){return!1}function Ie(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,i,n,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof i&&(n=n||i,i=void 0),t)Ae(e,a,i,n,t[a],r);return e}if(null==n&&null==o?(o=i,n=i=void 0):null==o&&("string"==typeof i?(o=n,n=void 0):(o=n,n=i,i=void 0)),!1===o)o=Ee;else if(!o)return e;return 1===r&&(s=o,(o=function(e){return k().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=k.guid++)),e.each(function(){k.event.add(this,t,o,n,i)})}function $e(e,o,r){r?(V.set(e,o,!1),k.event.add(e,o,{namespace:!1,handler:function(e){var t,i,n=V.get(this,o);if(1&e.isTrigger&&this[o]){if(n.length)(k.event.special[o]||{}).delegateType&&e.stopPropagation();else if(n=a.call(arguments),V.set(this,o,n),t=r(this,o),this[o](),n!==(i=V.get(this,o))||t?V.set(this,o,!1):i={},n!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else n.length&&(V.set(this,o,{value:k.event.trigger(k.extend(n[0],k.Event.prototype),n.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===V.get(e,o)&&k.event.add(e,o,ke)}k.event={global:{},add:function(t,e,i,n,o){var r,s,a,l,u,c,d,p,f,h,m,g=V.get(t);if(g)for(i.handler&&(i=(r=i).handler,o=r.selector),o&&k.find.matchesSelector(oe,o),i.guid||(i.guid=k.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(e){return void 0!==k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(j)||[""]).length;u--;)f=m=(a=Ce.exec(e[u])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=k.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=k.event.special[f]||{},c=k.extend({type:f,origType:m,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&k.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,n,h,s)||t.addEventListener&&t.addEventListener(f,s)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),k.event.global[f]=!0)},remove:function(e,t,i,n,o){var r,s,a,l,u,c,d,p,f,h,m,g=V.hasData(e)&&V.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(j)||[""]).length;u--;)if(f=m=(a=Ce.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=k.event.special[f]||{},p=l[f=(n?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)c=p[r],!o&&m!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(p.splice(r,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||k.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)k.event.remove(e,f+t[u],i,n,!0);k.isEmptyObject(l)&&V.remove(e,"handle events")}},dispatch:function(e){var t,i,n,o,r,s,a=k.event.fix(e),l=new Array(arguments.length),u=(V.get(this,"events")||{})[a.type]||[],c=k.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=k.event.handlers.call(this,a,u),t=0;(o=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,i=0;(r=o.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==r.namespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,void 0!==(n=((k.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var i,n,o,r,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(r=[],s={},i=0;i<l;i++)void 0===s[o=(n=t[i]).selector+" "]&&(s[o]=n.needsContext?-1<k(o,this).index(u):k.find(o,this,null,[u]).length),s[o]&&r.push(n);r.length&&a.push({elem:u,handlers:r})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:w(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&$e(t,"click",ke),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&$e(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&V.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return $e(this,e,Ie),!1},trigger:function(){return $e(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){k.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,i=e.relatedTarget,n=e.handleObj;return i&&(i===this||k.contains(this,i))||(e.type=n.origType,t=n.handler.apply(this,arguments),e.type=o),t}}}),k.fn.extend({on:function(e,t,i,n){return Ae(this,e,t,i,n)},one:function(e,t,i,n){return Ae(this,e,t,i,n,1)},off:function(e,t,i){var n,o;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,k(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Ee),this.each(function(){k.event.remove(this,e,i,t)});for(o in e)this.off(o,t,e[o]);return this}});var Le=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ze=/<script|<style|<link/i,_e=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function He(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function De(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function je(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var i,n,o,r,s,a,l,u;if(1===t.nodeType){if(V.hasData(e)&&(r=V.access(e),s=V.set(t,r),u=r.events))for(o in delete s.handle,s.events={},u)for(i=0,n=u[o].length;i<n;i++)k.event.add(t,o,u[o][i]);Z.hasData(e)&&(a=Z.access(e),l=k.extend({},a),Z.set(t,l))}}function Pe(i,n,o,r){n=g.apply([],n);var e,t,s,a,l,u,c=0,d=i.length,p=d-1,f=n[0],h=w(f);if(h||1<d&&"string"==typeof f&&!y.checkClone&&_e.test(f))return i.each(function(e){var t=i.eq(e);h&&(n[0]=f.call(this,e,t.html())),Pe(t,n,o,r)});if(d&&(t=(e=xe(n,i[0].ownerDocument,!1,i,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(a=(s=k.map(ge(e,"script"),De)).length;c<d;c++)l=e,c!==p&&(l=k.clone(l,!0,!0),a&&k.merge(s,ge(l,"script"))),o.call(i[c],l,c);if(a)for(u=s[s.length-1].ownerDocument,k.map(s,je),c=0;c<a;c++)l=s[c],he.test(l.type||"")&&!V.access(l,"globalEval")&&k.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?k._evalUrl&&!l.noModule&&k._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):b(l.textContent.replace(Oe,""),l,u))}return i}function Ne(e,t,i){for(var n,o=t?k.filter(t,e):e,r=0;null!=(n=o[r]);r++)i||1!==n.nodeType||k.cleanData(ge(n)),n.parentNode&&(i&&re(n)&&ve(ge(n,"script")),n.parentNode.removeChild(n));return e}k.extend({htmlPrefilter:function(e){return e.replace(Le,"<$1></$2>")},clone:function(e,t,i){var n,o,r,s,a,l,u,c=e.cloneNode(!0),d=re(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(s=ge(c),n=0,o=(r=ge(e)).length;n<o;n++)a=r[n],l=s[n],void 0,"input"===(u=l.nodeName.toLowerCase())&&pe.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(i)for(r=r||ge(e),s=s||ge(c),n=0,o=r.length;n<o;n++)Me(r[n],s[n]);else Me(e,c);return 0<(s=ge(c,"script")).length&&ve(s,!d&&ge(e,"script")),c},cleanData:function(e){for(var t,i,n,o=k.event.special,r=0;void 0!==(i=e[r]);r++)if(G(i)){if(t=i[V.expando]){if(t.events)for(n in t.events)o[n]?k.event.remove(i,n):k.removeEvent(i,n,t.handle);i[V.expando]=void 0}i[Z.expando]&&(i[Z.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Ne(this,e,!0)},remove:function(e){return Ne(this,e)},text:function(e){return B(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Pe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||He(this,e).appendChild(e)})},prepend:function(){return Pe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=He(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ze.test(e)&&!me[(fe.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(k.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return Pe(this,arguments,function(e){var t=this.parentNode;k.inArray(this,i)<0&&(k.cleanData(ge(this)),t&&t.replaceChild(e,this))},i)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){k.fn[e]=function(e){for(var t,i=[],n=k(e),o=n.length-1,r=0;r<=o;r++)t=r===o?this:this.clone(!0),k(n[r])[s](t),l.apply(i,t.get());return this.pushStack(i)}});var qe,We,Re,Be,Fe,Ue,Ye,Xe=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Ge=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=S),t.getComputedStyle(e)},Qe=new RegExp(ne.join("|"),"i");function Ve(){if(Ye){Ue.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ye.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(Ue).appendChild(Ye);var e=S.getComputedStyle(Ye);qe="1%"!==e.top,Fe=12===Ze(e.marginLeft),Ye.style.right="60%",Be=36===Ze(e.right),We=36===Ze(e.width),Ye.style.position="absolute",Re=12===Ze(Ye.offsetWidth/3),oe.removeChild(Ue),Ye=null}}function Ze(e){return Math.round(parseFloat(e))}function Ke(e,t,i){var n,o,r,s,a=e.style;return(i=i||Ge(e))&&(""!==(s=i.getPropertyValue(t)||i[t])||re(e)||(s=k.style(e,t)),!y.pixelBoxStyles()&&Xe.test(s)&&Qe.test(t)&&(n=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=i.width,a.width=n,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ue=C.createElement("div"),(Ye=C.createElement("div")).style&&(Ye.style.backgroundClip="content-box",Ye.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Ye.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return Ve(),We},pixelBoxStyles:function(){return Ve(),Be},pixelPosition:function(){return Ve(),qe},reliableMarginLeft:function(){return Ve(),Fe},scrollboxSize:function(){return Ve(),Re}}));var et=["Webkit","Moz","ms"],tt=C.createElement("div").style,it={};function nt(e){var t=k.cssProps[e]||it[e];return t||(e in tt?e:it[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=et.length;i--;)if((e=et[i]+t)in tt)return e}(e)||e)}var ot=/^(none|table(?!-c[ea]).+)/,rt=/^--/,st={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function lt(e,t,i){var n=ie.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function ut(e,t,i,n,o,r){var s="width"===t?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;s<4;s+=2)"margin"===i&&(l+=k.css(e,i+ne[s],!0,o)),n?("content"===i&&(l-=k.css(e,"padding"+ne[s],!0,o)),"margin"!==i&&(l-=k.css(e,"border"+ne[s]+"Width",!0,o))):(l+=k.css(e,"padding"+ne[s],!0,o),"padding"!==i?l+=k.css(e,"border"+ne[s]+"Width",!0,o):a+=k.css(e,"border"+ne[s]+"Width",!0,o));return!n&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l}function ct(e,t,i){var n=Ge(e),o=(!y.boxSizingReliable()||i)&&"border-box"===k.css(e,"boxSizing",!1,n),r=o,s=Ke(e,t,n),a="offset"+t[0].toUpperCase()+t.slice(1);if(Xe.test(s)){if(!i)return s;s="auto"}return(!y.boxSizingReliable()&&o||"auto"===s||!parseFloat(s)&&"inline"===k.css(e,"display",!1,n))&&e.getClientRects().length&&(o="border-box"===k.css(e,"boxSizing",!1,n),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ut(e,t,i||(o?"border":"content"),r,n,s)+"px"}function dt(e,t,i,n,o){return new dt.prototype.init(e,t,i,n,o)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Ke(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=X(t),l=rt.test(t),u=e.style;if(l||(t=nt(a)),s=k.cssHooks[t]||k.cssHooks[a],void 0===i)return s&&"get"in s&&void 0!==(o=s.get(e,!1,n))?o:u[t];"string"===(r=typeof i)&&(o=ie.exec(i))&&o[1]&&(i=ue(e,t,o),r="number"),null!=i&&i==i&&("number"!==r||l||(i+=o&&o[3]||(k.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==i||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(i=s.set(e,i,n))||(l?u.setProperty(t,i):u[t]=i))}},css:function(e,t,i,n){var o,r,s,a=X(t);return rt.test(t)||(t=nt(a)),(s=k.cssHooks[t]||k.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,i)),void 0===o&&(o=Ke(e,t,n)),"normal"===o&&t in at&&(o=at[t]),""===i||i?(r=parseFloat(o),!0===i||isFinite(r)?r||0:o):o}}),k.each(["height","width"],function(e,l){k.cssHooks[l]={get:function(e,t,i){if(t)return!ot.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,i):ae(e,st,function(){return ct(e,l,i)})},set:function(e,t,i){var n,o=Ge(e),r=!y.scrollboxSize()&&"absolute"===o.position,s=(r||i)&&"border-box"===k.css(e,"boxSizing",!1,o),a=i?ut(e,l,i,s,o):0;return s&&r&&(a-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(o[l])-ut(e,l,"border",!1,o)-.5)),a&&(n=ie.exec(t))&&"px"!==(n[3]||"px")&&(e.style[l]=t,t=k.css(e,l)),lt(0,t,a)}}}),k.cssHooks.marginLeft=Je(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ke(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(o,r){k.cssHooks[o+r]={expand:function(e){for(var t=0,i={},n="string"==typeof e?e.split(" "):[e];t<4;t++)i[o+ne[t]+r]=n[t]||n[t-2]||n[0];return i}},"margin"!==o&&(k.cssHooks[o+r].set=lt)}),k.fn.extend({css:function(e,t){return B(this,function(e,t,i){var n,o,r={},s=0;if(Array.isArray(t)){for(n=Ge(e),o=t.length;s<o;s++)r[t[s]]=k.css(e,t[s],!1,n);return r}return void 0!==i?k.style(e,t,i):k.css(e,t)},e,t,1<arguments.length)}}),((k.Tween=dt).prototype={constructor:dt,init:function(e,t,i,n,o,r){this.elem=e,this.prop=i,this.easing=o||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=r||(k.cssNumber[i]?"":"px")},cur:function(){var e=dt.propHooks[this.prop];return e&&e.get?e.get(this):dt.propHooks._default.get(this)},run:function(e){var t,i=dt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):dt.propHooks._default.set(this),this}}).init.prototype=dt.prototype,(dt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=dt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=dt.prototype.init,k.fx.step={};var pt,ft,ht,mt,gt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function yt(){ft&&(!1===C.hidden&&S.requestAnimationFrame?S.requestAnimationFrame(yt):S.setTimeout(yt,k.fx.interval),k.fx.tick())}function wt(){return S.setTimeout(function(){pt=void 0}),pt=Date.now()}function bt(e,t){var i,n=0,o={height:e};for(t=t?1:0;n<4;n+=2-t)o["margin"+(i=ne[n])]=o["padding"+i]=e;return t&&(o.opacity=o.width=e),o}function xt(e,t,i){for(var n,o=(Tt.tweeners[t]||[]).concat(Tt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(n=o[r].call(i,t,e))return n}function Tt(r,e,t){var i,s,n=0,o=Tt.prefilters.length,a=k.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=pt||wt(),t=Math.max(0,u.startTime+u.duration-e),i=1-(t/u.duration||0),n=0,o=u.tweens.length;n<o;n++)u.tweens[n].run(i);return a.notifyWith(r,[u,i,t]),i<1&&o?t:(o||a.notifyWith(r,[u,1,0]),a.resolveWith(r,[u]),!1)},u=a.promise({elem:r,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:pt||wt(),duration:t.duration,tweens:[],createTween:function(e,t){var i=k.Tween(r,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var t=0,i=e?u.tweens.length:0;if(s)return this;for(s=!0;t<i;t++)u.tweens[t].run(1);return e?(a.notifyWith(r,[u,1,0]),a.resolveWith(r,[u,e])):a.rejectWith(r,[u,e]),this}}),c=u.props;for(!function(e,t){var i,n,o,r,s;for(i in e)if(o=t[n=X(i)],r=e[i],Array.isArray(r)&&(o=r[1],r=e[i]=r[0]),i!==n&&(e[n]=r,delete e[i]),(s=k.cssHooks[n])&&"expand"in s)for(i in r=s.expand(r),delete e[n],r)i in e||(e[i]=r[i],t[i]=o);else t[n]=o}(c,u.opts.specialEasing);n<o;n++)if(i=Tt.prefilters[n].call(u,r,c,u.opts))return w(i.stop)&&(k._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return k.map(c,xt,u),w(u.opts.start)&&u.opts.start.call(r,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),k.fx.timer(k.extend(l,{elem:r,anim:u,queue:u.opts.queue})),u}k.Animation=k.extend(Tt,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return ue(i.elem,e,ie.exec(t),i),i}]},tweener:function(e,t){for(var i,n=0,o=(e=w(e)?(t=e,["*"]):e.match(j)).length;n<o;n++)i=e[n],Tt.tweeners[i]=Tt.tweeners[i]||[],Tt.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,o,r,s,a,l,u,c,d="width"in t||"height"in t,p=this,f={},h=e.style,m=e.nodeType&&le(e),g=V.get(e,"fxshow");for(n in i.queue||(null==(s=k._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,k.queue(e,"fx").length||s.empty.fire()})})),t)if(o=t[n],gt.test(o)){if(delete t[n],r=r||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;m=!0}f[n]=g&&g[n]||k.style(e,n)}if((l=!k.isEmptyObject(t))||!k.isEmptyObject(f))for(n in d&&1===e.nodeType&&(i.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=g&&g.display)&&(u=V.get(e,"display")),"none"===(c=k.css(e,"display"))&&(u?c=u:(de([e],!0),u=e.style.display||u,c=k.css(e,"display"),de([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===k.css(e,"float")&&(l||(p.done(function(){h.display=u}),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),i.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=i.overflow[0],h.overflowX=i.overflow[1],h.overflowY=i.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=V.access(e,"fxshow",{display:u}),r&&(g.hidden=!m),m&&de([e],!0),p.done(function(){for(n in m||de([e]),V.remove(e,"fxshow"),f)k.style(e,n,f[n])})),l=xt(m?g[n]:0,n,p),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?Tt.prefilters.unshift(e):Tt.prefilters.push(e)}}),k.speed=function(e,t,i){var n=e&&"object"==typeof e?k.extend({},e):{complete:i||!i&&t||w(e)&&e,duration:e,easing:i&&t||t&&!w(t)&&t};return k.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in k.fx.speeds?n.duration=k.fx.speeds[n.duration]:n.duration=k.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){w(n.old)&&n.old.call(this),n.queue&&k.dequeue(this,n.queue)},n},k.fn.extend({fadeTo:function(e,t,i,n){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(t,e,i,n){function o(){var e=Tt(this,k.extend({},t),s);(r||V.get(this,"finish"))&&e.stop(!0)}var r=k.isEmptyObject(t),s=k.speed(e,i,n);return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(o,e,r){function s(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof o&&(r=e,e=o,o=void 0),e&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",i=k.timers,n=V.get(this);if(t)n[t]&&n[t].stop&&s(n[t]);else for(t in n)n[t]&&n[t].stop&&vt.test(t)&&s(n[t]);for(t=i.length;t--;)i[t].elem!==this||null!=o&&i[t].queue!==o||(i[t].anim.stop(r),e=!1,i.splice(t,1));!e&&r||k.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=V.get(this),i=t[s+"queue"],n=t[s+"queueHooks"],o=k.timers,r=i?i.length:0;for(t.finish=!0,k.queue(this,s,[]),n&&n.stop&&n.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===s&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,n){var o=k.fn[n];k.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(bt(n,!0),e,t,i)}}),k.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,n){k.fn[e]=function(e,t,i){return this.animate(n,e,t,i)}}),k.timers=[],k.fx.tick=function(){var e,t=0,i=k.timers;for(pt=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||k.fx.stop(),pt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){ft||(ft=!0,yt())},k.fx.stop=function(){ft=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(n,e){return n=k.fx&&k.fx.speeds[n]||n,e=e||"fx",this.queue(e,function(e,t){var i=S.setTimeout(e,n);t.stop=function(){S.clearTimeout(i)}})},ht=C.createElement("input"),mt=C.createElement("select").appendChild(C.createElement("option")),ht.type="checkbox",y.checkOn=""!==ht.value,y.optSelected=mt.selected,(ht=C.createElement("input")).value="t",ht.type="radio",y.radioValue="t"===ht.value;var St,Ct=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return B(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,i){var n,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?k.prop(e,t,i):(1===r&&k.isXMLDoc(e)||(o=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?St:void 0)),void 0!==i?null===i?void k.removeAttr(e,t):o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:(e.setAttribute(t,i+""),i):o&&"get"in o&&null!==(n=o.get(e,t))?n:null==(n=k.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,o=t&&t.match(j);if(o&&1===e.nodeType)for(;i=o[n++];)e.removeAttribute(i)}}),St={set:function(e,t,i){return!1===t?k.removeAttr(e,i):e.setAttribute(i,i),i}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var s=Ct[t]||k.find.attr;Ct[t]=function(e,t,i){var n,o,r=t.toLowerCase();return i||(o=Ct[r],Ct[r]=n,n=null!=s(e,t,i)?r:null,Ct[r]=o),n}});var kt=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function It(e){return(e.match(j)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function $t(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(j)||[]}k.fn.extend({prop:function(e,t){return B(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,i){var n,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&k.isXMLDoc(e)||(t=k.propFix[t]||t,o=k.propHooks[t]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(e,i,t))?n:e[t]=i:o&&"get"in o&&null!==(n=o.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):kt.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,i,n,o,r,s,a,l=0;if(w(t))return this.each(function(e){k(this).addClass(t.call(this,e,At(this)))});if((e=$t(t)).length)for(;i=this[l++];)if(o=At(i),n=1===i.nodeType&&" "+It(o)+" "){for(s=0;r=e[s++];)n.indexOf(" "+r+" ")<0&&(n+=r+" ");o!==(a=It(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,o,r,s,a,l=0;if(w(t))return this.each(function(e){k(this).removeClass(t.call(this,e,At(this)))});if(!arguments.length)return this.attr("class","");if((e=$t(t)).length)for(;i=this[l++];)if(o=At(i),n=1===i.nodeType&&" "+It(o)+" "){for(s=0;r=e[s++];)for(;-1<n.indexOf(" "+r+" ");)n=n.replace(" "+r+" "," ");o!==(a=It(n))&&i.setAttribute("class",a)}return this},toggleClass:function(o,t){var r=typeof o,s="string"==r||Array.isArray(o);return"boolean"==typeof t&&s?t?this.addClass(o):this.removeClass(o):w(o)?this.each(function(e){k(this).toggleClass(o.call(this,e,At(this),t),t)}):this.each(function(){var e,t,i,n;if(s)for(t=0,i=k(this),n=$t(o);e=n[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==o&&"boolean"!=r||((e=At(this))&&V.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===o?"":V.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&-1<(" "+It(At(i))+" ").indexOf(t))return!0;return!1}});var Lt=/\r/g;k.fn.extend({val:function(i){var n,e,o,t=this[0];return arguments.length?(o=w(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=o?i.call(this,e,k(this).val()):i)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(n=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):t?(n=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Lt,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:It(k.text(e))}},select:{get:function(e){var t,i,n,o=e.options,r=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?r+1:o.length;for(n=r<0?l:s?r:0;n<l;n++)if(((i=o[n]).selected||n===r)&&!i.disabled&&(!i.parentNode.disabled||!A(i.parentNode,"optgroup"))){if(t=k(i).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var i,n,o=e.options,r=k.makeArray(t),s=o.length;s--;)((n=o[s]).selected=-1<k.inArray(k.valHooks.option.get(n),r))&&(i=!0);return i||(e.selectedIndex=-1),r}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in S;function zt(e){e.stopPropagation()}var _t=/^(?:focusinfocus|focusoutblur)$/;k.extend(k.event,{trigger:function(e,t,i,n){var o,r,s,a,l,u,c,d,p=[i||C],f=v.call(e,"type")?e.type:e,h=v.call(e,"namespace")?e.namespace.split("."):[];if(r=d=s=i=i||C,3!==i.nodeType&&8!==i.nodeType&&!_t.test(f+k.event.triggered)&&(-1<f.indexOf(".")&&(f=(h=f.split(".")).shift(),h.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[k.expando]?e:new k.Event(f,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[f]||{},n||!c.trigger||!1!==c.trigger.apply(i,t))){if(!n&&!c.noBubble&&!m(i)){for(a=c.delegateType||f,_t.test(a+f)||(r=r.parentNode);r;r=r.parentNode)p.push(r),s=r;s===(i.ownerDocument||C)&&p.push(s.defaultView||s.parentWindow||S)}for(o=0;(r=p[o++])&&!e.isPropagationStopped();)d=r,e.type=1<o?a:c.bindType||f,(u=(V.get(r,"events")||{})[e.type]&&V.get(r,"handle"))&&u.apply(r,t),(u=l&&r[l])&&u.apply&&G(r)&&(e.result=u.apply(r,t),!1===e.result&&e.preventDefault());return e.type=f,n||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!G(i)||l&&w(i[f])&&!m(i)&&((s=i[l])&&(i[l]=null),k.event.triggered=f,e.isPropagationStopped()&&d.addEventListener(f,zt),i[f](),e.isPropagationStopped()&&d.removeEventListener(f,zt),k.event.triggered=void 0,s&&(i[l]=s)),e.result}},simulate:function(e,t,i){var n=k.extend(new k.Event,i,{type:e,isSimulated:!0});k.event.trigger(n,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return k.event.trigger(e,t,i,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(i,n){function o(e){k.event.simulate(n,e.target,k.event.fix(e))}k.event.special[n]={setup:function(){var e=this.ownerDocument||this,t=V.access(e,n);t||e.addEventListener(i,o,!0),V.access(e,n,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=V.access(e,n)-1;t?V.access(e,n,t):(e.removeEventListener(i,o,!0),V.remove(e,n))}}});var Ot=S.location,Ht=Date.now(),Dt=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new S.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var jt=/\[\]$/,Mt=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function qt(i,e,n,o){var t;if(Array.isArray(e))k.each(e,function(e,t){n||jt.test(i)?o(i,t):qt(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,n,o)});else if(n||"object"!==x(e))o(i,e);else for(t in e)qt(i+"["+t+"]",e[t],n,o)}k.param=function(e,t){function i(e,t){var i=w(t)?t():t;o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)}var n,o=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return o.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Nt.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var i=k(this).val();return null==i?null:Array.isArray(i)?k.map(i,function(e){return{name:t.name,value:e.replace(Mt,"\r\n")}}):{name:t.name,value:i.replace(Mt,"\r\n")}}).get()}});var Wt=/%20/g,Rt=/#.*$/,Bt=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ut=/^(?:GET|HEAD)$/,Yt=/^\/\//,Xt={},Gt={},Qt="*/".concat("*"),Vt=C.createElement("a");function Zt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,n=0,o=e.toLowerCase().match(j)||[];if(w(t))for(;i=o[n++];)"+"===i[0]?(i=i.slice(1)||"*",(r[i]=r[i]||[]).unshift(t)):(r[i]=r[i]||[]).push(t)}}function Kt(t,o,r,s){var a={},l=t===Gt;function u(e){var n;return a[e]=!0,k.each(t[e]||[],function(e,t){var i=t(o,r,s);return"string"!=typeof i||l||a[i]?l?!(n=i):void 0:(o.dataTypes.unshift(i),u(i),!1)}),n}return u(o.dataTypes[0])||!a["*"]&&u("*")}function Jt(e,t){var i,n,o=k.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((o[i]?e:n=n||{})[i]=t[i]);return n&&k.extend(!0,e,n),e}Vt.href=Ot.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ot.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ot.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,k.ajaxSettings),t):Jt(k.ajaxSettings,e)},ajaxPrefilter:Zt(Xt),ajaxTransport:Zt(Gt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,d,p,i,f,n,h,m,o,r,g=k.ajaxSetup({},t),v=g.context||g,y=g.context&&(v.nodeType||v.jquery)?k(v):k.event,w=k.Deferred(),b=k.Callbacks("once memory"),x=g.statusCode||{},s={},a={},l="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!i)for(i={};t=Ft.exec(p);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==h&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),u(0,t),this}};if(w.promise(T),g.url=((e||g.url||Ot.href)+"").replace(Yt,Ot.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(j)||[""],null==g.crossDomain){n=C.createElement("a");try{n.href=g.url,n.href=n.href,g.crossDomain=Vt.protocol+"//"+Vt.host!=n.protocol+"//"+n.host}catch(e){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=k.param(g.data,g.traditional)),Kt(Xt,g,t,T),h)return T;for(o in(m=k.event&&g.global)&&0==k.active++&&k.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Ut.test(g.type),d=g.url.replace(Rt,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Wt,"+")):(r=g.url.slice(d.length),g.data&&(g.processData||"string"==typeof g.data)&&(d+=(Dt.test(d)?"&":"?")+g.data,delete g.data),!1===g.cache&&(d=d.replace(Bt,"$1"),r=(Dt.test(d)?"&":"?")+"_="+Ht+++r),g.url=d+r),g.ifModified&&(k.lastModified[d]&&T.setRequestHeader("If-Modified-Since",k.lastModified[d]),k.etag[d]&&T.setRequestHeader("If-None-Match",k.etag[d])),(g.data&&g.hasContent&&!1!==g.contentType||t.contentType)&&T.setRequestHeader("Content-Type",g.contentType),T.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Qt+"; q=0.01":""):g.accepts["*"]),g.headers)T.setRequestHeader(o,g.headers[o]);if(g.beforeSend&&(!1===g.beforeSend.call(v,T,g)||h))return T.abort();if(l="abort",b.add(g.complete),T.done(g.success),T.fail(g.error),c=Kt(Gt,g,t,T)){if(T.readyState=1,m&&y.trigger("ajaxSend",[T,g]),h)return T;g.async&&0<g.timeout&&(f=S.setTimeout(function(){T.abort("timeout")},g.timeout));try{h=!1,c.send(s,u)}catch(e){if(h)throw e;u(-1,e)}}else u(-1,"No Transport");function u(e,t,i,n){var o,r,s,a,l,u=t;h||(h=!0,f&&S.clearTimeout(f),c=void 0,p=n||"",T.readyState=0<e?4:0,o=200<=e&&e<300||304===e,i&&(a=function(e,t,i){for(var n,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){l.unshift(o);break}if(l[0]in i)r=l[0];else{for(o in i){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s=s||o}r=r||s}if(r)return r!==l[0]&&l.unshift(r),i[r]}(g,T,i)),a=function(e,t,i,n){var o,r,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(r=c.shift();r;)if(e.responseFields[r]&&(i[e.responseFields[r]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=u[l+" "+r]||u["* "+r]))for(o in u)if((a=o.split(" "))[1]===r&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[o]:!0!==u[o]&&(r=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(g,a,T,o),o?(g.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(k.lastModified[d]=l),(l=T.getResponseHeader("etag"))&&(k.etag[d]=l)),204===e||"HEAD"===g.type?u="nocontent":304===e?u="notmodified":(u=a.state,r=a.data,o=!(s=a.error))):(s=u,!e&&u||(u="error",e<0&&(e=0))),T.status=e,T.statusText=(t||u)+"",o?w.resolveWith(v,[r,u,T]):w.rejectWith(v,[T,u,s]),T.statusCode(x),x=void 0,m&&y.trigger(o?"ajaxSuccess":"ajaxError",[T,g,o?r:s]),b.fireWith(v,[T,u]),m&&(y.trigger("ajaxComplete",[T,g]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,i){return k.get(e,t,i,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,o){k[o]=function(e,t,i,n){return w(t)&&(n=n||i,i=t,t=void 0),k.ajax(k.extend({url:e,type:o,dataType:n,data:t,success:i},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e,t){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(w(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(i){return w(i)?this.each(function(e){k(this).wrapInner(i.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=w(t);return this.each(function(e){k(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(e){}};var ei={0:200,1223:204},ti=k.ajaxSettings.xhr();y.cors=!!ti&&"withCredentials"in ti,y.ajax=ti=!!ti,k.ajaxTransport(function(o){var r,s;if(y.cors||ti&&!o.crossDomain)return{send:function(e,t){var i,n=o.xhr();if(n.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(i in o.xhrFields)n[i]=o.xhrFields[i];for(i in o.mimeType&&n.overrideMimeType&&n.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)n.setRequestHeader(i,e[i]);r=function(e){return function(){r&&(r=s=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===e?n.abort():"error"===e?"number"!=typeof n.status?t(0,"error"):t(n.status,n.statusText):t(ei[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=r(),s=n.onerror=n.ontimeout=r("error"),void 0!==n.onabort?n.onabort=s:n.onreadystatechange=function(){4===n.readyState&&S.setTimeout(function(){r&&s()})},r=r("abort");try{n.send(o.hasContent&&o.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(i){var n,o;if(i.crossDomain||i.scriptAttrs)return{send:function(e,t){n=k("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",o=function(e){n.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(n[0])},abort:function(){o&&o()}}});var ii,ni=[],oi=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=ni.pop()||k.expando+"_"+Ht++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,i){var n,o,r,s=!1!==e.jsonp&&(oi.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&oi.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=w(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(oi,"$1"+n):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return r||k.error(n+" was not called"),r[0]},e.dataTypes[0]="json",o=S[n],S[n]=function(){r=arguments},i.always(function(){void 0===o?k(S).removeProp(n):S[n]=o,e[n]&&(e.jsonpCallback=t.jsonpCallback,ni.push(n)),r&&w(o)&&o(r[0]),r=o=void 0}),"script"}),y.createHTMLDocument=((ii=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ii.childNodes.length),k.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(y.createHTMLDocument?((n=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(n)):t=C),r=!i&&[],(o=$.exec(e))?[t.createElement(o[1])]:(o=xe([e],t,r),r&&r.length&&k(r).remove(),k.merge([],o.childNodes)));var n,o,r},k.fn.load=function(e,t,i){var n,o,r,s=this,a=e.indexOf(" ");return-1<a&&(n=It(e.slice(a)),e=e.slice(0,a)),w(t)?(i=t,t=void 0):t&&"object"==typeof t&&(o="POST"),0<s.length&&k.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(n?k("<div>").append(k.parseHTML(e)).find(n):e)}).always(i&&function(e,t){s.each(function(){i.apply(this,r||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,i){var n,o,r,s,a,l,u=k.css(e,"position"),c=k(e),d={};"static"===u&&(e.style.position="relative"),a=c.offset(),r=k.css(e,"top"),l=k.css(e,"left"),o=("absolute"===u||"fixed"===u)&&-1<(r+l).indexOf("auto")?(s=(n=c.position()).top,n.left):(s=parseFloat(r)||0,parseFloat(l)||0),w(t)&&(t=t.call(e,i,k.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):c.css(d)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],o={top:0,left:0};if("fixed"===k.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((o=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),o.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-k.css(n,"marginTop",!0),left:t.left-o.left-k.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||oe})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var r="pageYOffset"===o;k.fn[t]=function(e){return B(this,function(e,t,i){var n;if(m(e)?n=e:9===e.nodeType&&(n=e.defaultView),void 0===i)return n?n[o]:e[t];n?n.scrollTo(r?n.pageXOffset:i,r?i:n.pageYOffset):e[t]=i},t,e,arguments.length)}}),k.each(["top","left"],function(e,i){k.cssHooks[i]=Je(y.pixelPosition,function(e,t){if(t)return t=Ke(e,i),Xe.test(t)?k(e).position()[i]+"px":t})}),k.each({Height:"height",Width:"width"},function(s,a){k.each({padding:"inner"+s,content:a,"":"outer"+s},function(n,r){k.fn[r]=function(e,t){var i=arguments.length&&(n||"boolean"!=typeof e),o=n||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,i){var n;return m(e)?0===r.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+s],n["scroll"+s],e.body["offset"+s],n["offset"+s],n["client"+s])):void 0===i?k.css(e,t,o):k.style(e,t,i,o)},a,i?e:void 0,i)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,i){k.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),k.proxy=function(e,t){var i,n,o;if("string"==typeof t&&(i=e[t],t=e,e=i),w(e))return n=a.call(arguments,2),(o=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||k.guid++,o},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=w,k.isWindow=m,k.camelCase=X,k.type=x,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var ri=S.jQuery,si=S.$;return k.noConflict=function(e){return S.$===k&&(S.$=si),e&&S.jQuery===k&&(S.jQuery=ri),k},e||(S.jQuery=S.$=k),k}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(u){"use strict";var o,s=window.Slick||{};o=0,(s=function(e,t){var i,n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:u(e),appendDots:u(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return u('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},u.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=u(e),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,i=u(e).data("slick")||{},n.options=u.extend({},n.defaults,t,i),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=u.proxy(n.autoPlay,n),n.autoPlayClear=u.proxy(n.autoPlayClear,n),n.autoPlayIterator=u.proxy(n.autoPlayIterator,n),n.changeSlide=u.proxy(n.changeSlide,n),n.clickHandler=u.proxy(n.clickHandler,n),n.selectHandler=u.proxy(n.selectHandler,n),n.setPosition=u.proxy(n.setPosition,n),n.swipeHandler=u.proxy(n.swipeHandler,n),n.dragHandler=u.proxy(n.dragHandler,n),n.keyHandler=u.proxy(n.keyHandler,n),n.instanceUid=o++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},s.prototype.addSlide=s.prototype.slickAdd=function(e,t,i){var n=this;if("boolean"==typeof t)i=t,t=null;else if(t<0||t>=n.slideCount)return!1;n.unload(),"number"==typeof t?0===t&&0===n.$slides.length?u(e).appendTo(n.$slideTrack):i?u(e).insertBefore(n.$slides.eq(t)):u(e).insertAfter(n.$slides.eq(t)):!0===i?u(e).prependTo(n.$slideTrack):u(e).appendTo(n.$slideTrack),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slides.each(function(e,t){u(t).attr("data-slick-index",e)}),n.$slidesCache=n.$slides,n.reinit()},s.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},s.prototype.animateSlide=function(e,t){var i={},n=this;n.animateHeight(),!0===n.options.rtl&&!1===n.options.vertical&&(e=-e),!1===n.transformsEnabled?!1===n.options.vertical?n.$slideTrack.animate({left:e},n.options.speed,n.options.easing,t):n.$slideTrack.animate({top:e},n.options.speed,n.options.easing,t):!1===n.cssTransitions?(!0===n.options.rtl&&(n.currentLeft=-n.currentLeft),u({animStart:n.currentLeft}).animate({animStart:e},{duration:n.options.speed,easing:n.options.easing,step:function(e){e=Math.ceil(e),!1===n.options.vertical?i[n.animType]="translate("+e+"px, 0px)":i[n.animType]="translate(0px,"+e+"px)",n.$slideTrack.css(i)},complete:function(){t&&t.call()}})):(n.applyTransition(),e=Math.ceil(e),!1===n.options.vertical?i[n.animType]="translate3d("+e+"px, 0px, 0px)":i[n.animType]="translate3d(0px,"+e+"px, 0px)",n.$slideTrack.css(i),t&&setTimeout(function(){n.disableTransition(),t.call()},n.options.speed))},s.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=u(e).not(this.$slider)),e},s.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var e=u(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},s.prototype.applyTransition=function(e){var t=this,i={};!1===t.options.fade?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},s.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},s.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},s.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},s.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=u(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=u(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},s.prototype.buildDots=function(){var e,t,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),t=u("<ul />").addClass(i.options.dotsClass),e=0;e<=i.getDotCount();e+=1)t.append(u("<li />").append(i.options.customPaging.call(this,i,e)));i.$dots=t.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},s.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){u(t).attr("data-slick-index",e).data("originalStyling",u(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?u('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),u("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},s.prototype.buildRows=function(){var e,t,i,n,o,r,s,a=this;if(n=document.createDocumentFragment(),r=a.$slider.children(),0<a.options.rows){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var u=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var c=e*s+(t*a.options.slidesPerRow+i);r.get(c)&&u.appendChild(r.get(c))}l.appendChild(u)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},s.prototype.checkResponsive=function(e,t){var i,n,o,r=this,s=!1,a=r.$slider.width(),l=window.innerWidth||u(window).width();if("window"===r.respondTo?o=l:"slider"===r.respondTo?o=a:"min"===r.respondTo&&(o=Math.min(l,a)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(i in n=null,r.breakpoints)r.breakpoints.hasOwnProperty(i)&&(!1===r.originalSettings.mobileFirst?o<r.breakpoints[i]&&(n=r.breakpoints[i]):o>r.breakpoints[i]&&(n=r.breakpoints[i]));null!==n?null!==r.activeBreakpoint&&n===r.activeBreakpoint&&!t||(r.activeBreakpoint=n,"unslick"===r.breakpointSettings[n]?r.unslick(n):(r.options=u.extend({},r.originalSettings,r.breakpointSettings[n]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),s=n):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),s=n),e||!1===s||r.$slider.trigger("breakpoint",[r,s])}},s.prototype.changeSlide=function(e,t){var i,n,o=this,r=u(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),i=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,e.data.message){case"previous":n=0==i?o.options.slidesToScroll:o.options.slidesToShow-i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-n,!1,t);break;case"next":n=0==i?o.options.slidesToScroll:i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+n,!1,t);break;case"index":var s=0===e.data.index?0:e.data.index||r.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(s),!1,t),r.children().trigger("focus");break;default:return}},s.prototype.checkNavigable=function(e){var t,i;if(i=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var n in t){if(e<t[n]){e=i;break}i=t[n]}return e},s.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(u("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",u.proxy(e.interrupt,e,!0)).off("mouseleave.slick",u.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),u(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&u(e.$slideTrack).children().off("click.slick",e.selectHandler),u(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),u(window).off("resize.slick.slick-"+e.instanceUid,e.resize),u("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),u(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},s.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",u.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",u.proxy(e.interrupt,e,!1))},s.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},s.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},s.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),u(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){u(this).attr("style",u(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},s.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(t):this.$slides.eq(e).css(t)},s.prototype.fadeSlide=function(e,t){var i=this;!1===i.cssTransitions?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout(function(){i.disableTransition(e),t.call()},i.options.speed))},s.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},s.prototype.filterSlides=s.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},s.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(e){e.stopImmediatePropagation();var t=u(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=t.is(":focus"),i.autoPlay())},0)})},s.prototype.getCurrent=s.prototype.slickCurrentSlide=function(){return this.currentSlide},s.prototype.getDotCount=function(){var e=this,t=0,i=0,n=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++n;else for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)n=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else n=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return n-1},s.prototype.getLeft=function(e){var t,i,n,o,r=this,s=0;return r.slideOffset=0,i=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=i*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(s=e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,(r.options.slidesToShow-(e-r.slideCount))*i*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,r.slideCount%r.options.slidesToScroll*i*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(e+r.options.slidesToShow-r.slideCount)*i),r.slideCount<=r.options.slidesToShow&&(s=r.slideOffset=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*i*-1+s,!0===r.options.variableWidth&&(n=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?n[0]?-1*(r.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===r.options.centerMode&&(n=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?n[0]?-1*(r.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,t+=(r.$list.width()-n.outerWidth())/2)),t},s.prototype.getOption=s.prototype.slickGetOption=function(e){return this.options[e]},s.prototype.getNavigableIndexes=function(){var e,t=this,i=0,n=0,o=[];for(e=!1===t.options.infinite?t.slideCount:(i=-1*t.options.slidesToScroll,n=-1*t.options.slidesToScroll,2*t.slideCount);i<e;)o.push(i),i=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},s.prototype.getSlick=function(){return this},s.prototype.getSlideCount=function(){var i,n,o=this;return n=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0,!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(e,t){if(t.offsetLeft-n+u(t).outerWidth()/2>-1*o.swipeLeft)return i=t,!1}),Math.abs(u(i).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},s.prototype.goTo=s.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},s.prototype.init=function(e){var t=this;u(t.$slider).hasClass("slick-initialized")||(u(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},s.prototype.initADA=function(){var n=this,i=Math.ceil(n.slideCount/n.options.slidesToShow),o=n.getNavigableIndexes().filter(function(e){return 0<=e&&e<n.slideCount});n.$slides.add(n.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==n.$dots&&(n.$slides.not(n.$slideTrack.find(".slick-cloned")).each(function(e){var t=o.indexOf(e);if(u(this).attr({role:"tabpanel",id:"slick-slide"+n.instanceUid+e,tabindex:-1}),-1!==t){var i="slick-slide-control"+n.instanceUid+t;u("#"+i).length&&u(this).attr({"aria-describedby":i})}}),n.$dots.attr("role","tablist").find("li").each(function(e){var t=o[e];u(this).attr({role:"presentation"}),u(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+n.instanceUid+e,"aria-controls":"slick-slide"+n.instanceUid+t,"aria-label":e+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(n.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=n.currentSlide,t=e+n.options.slidesToShow;e<t;e++)n.options.focusOnChange?n.$slides.eq(e).attr({tabindex:"0"}):n.$slides.eq(e).removeAttr("tabindex");n.activateADA()},s.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},s.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(u("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&u("li",e.$dots).on("mouseenter.slick",u.proxy(e.interrupt,e,!0)).on("mouseleave.slick",u.proxy(e.interrupt,e,!1))},s.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",u.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",u.proxy(e.interrupt,e,!1)))},s.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),u(document).on(e.visibilityChange,u.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&u(e.$slideTrack).children().on("click.slick",e.selectHandler),u(window).on("orientationchange.slick.slick-"+e.instanceUid,u.proxy(e.orientationChange,e)),u(window).on("resize.slick.slick-"+e.instanceUid,u.proxy(e.resize,e)),u("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),u(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),u(e.setPosition)},s.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},s.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},s.prototype.lazyLoad=function(){var e,t,i,r=this;function n(e){u("img[data-lazy]",e).each(function(){var e=u(this),t=u(this).attr("data-lazy"),i=u(this).attr("data-srcset"),n=u(this).attr("data-sizes")||r.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){e.animate({opacity:0},100,function(){i&&(e.attr("srcset",i),n&&e.attr("sizes",n)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,e,t])})},o.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,t])},o.src=t})}if(!0===r.options.centerMode?i=!0===r.options.infinite?(t=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(t=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),r.options.slidesToShow/2+1+2+r.currentSlide):(t=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,i=Math.ceil(t+r.options.slidesToShow),!0===r.options.fade&&(0<t&&t--,i<=r.slideCount&&i++)),e=r.$slider.find(".slick-slide").slice(t,i),"anticipated"===r.options.lazyLoad)for(var o=t-1,s=i,a=r.$slider.find(".slick-slide"),l=0;l<r.options.slidesToScroll;l++)o<0&&(o=r.slideCount-1),e=(e=e.add(a.eq(o))).add(a.eq(s)),o--,s++;n(e),r.slideCount<=r.options.slidesToShow?n(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?n(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&n(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},s.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},s.prototype.next=s.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},s.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},s.prototype.pause=s.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},s.prototype.play=s.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},s.prototype.postSlide=function(e){var t=this;t.unslicked||(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange&&u(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()))},s.prototype.prev=s.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},s.prototype.preventDefault=function(e){e.preventDefault()},s.prototype.progressiveLazyLoad=function(e){e=e||1;var t,i,n,o,r,s=this,a=u("img[data-lazy]",s.$slider);a.length?(t=a.first(),i=t.attr("data-lazy"),n=t.attr("data-srcset"),o=t.attr("data-sizes")||s.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){n&&(t.attr("srcset",n),o&&t.attr("sizes",o)),t.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,t,i]),s.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout(function(){s.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,i]),s.progressiveLazyLoad())},r.src=i):s.$slider.trigger("allImagesLoaded",[s])},s.prototype.refresh=function(e){var t,i,n=this;i=n.slideCount-n.options.slidesToShow,!n.options.infinite&&n.currentSlide>i&&(n.currentSlide=i),n.slideCount<=n.options.slidesToShow&&(n.currentSlide=0),t=n.currentSlide,n.destroy(!0),u.extend(n,n.initials,{currentSlide:t}),n.init(),e||n.changeSlide({data:{message:"index",index:t}},!1)},s.prototype.registerBreakpoints=function(){var e,t,i,n=this,o=n.options.responsive||null;if("array"===u.type(o)&&o.length){for(e in n.respondTo=n.options.respondTo||"window",o)if(i=n.breakpoints.length-1,o.hasOwnProperty(e)){for(t=o[e].breakpoint;0<=i;)n.breakpoints[i]&&n.breakpoints[i]===t&&n.breakpoints.splice(i,1),i--;n.breakpoints.push(t),n.breakpointSettings[t]=o[e].settings}n.breakpoints.sort(function(e,t){return n.options.mobileFirst?e-t:t-e})}},s.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&u(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},s.prototype.resize=function(){var e=this;u(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=u(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},s.prototype.removeSlide=s.prototype.slickRemove=function(e,t,i){var n=this;if(e="boolean"==typeof e?!0===(t=e)?0:n.slideCount-1:!0===t?--e:e,n.slideCount<1||e<0||e>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(e).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},s.prototype.setCSS=function(e){var t,i,n=this,o={};!0===n.options.rtl&&(e=-e),t="left"==n.positionProp?Math.ceil(e)+"px":"0px",i="top"==n.positionProp?Math.ceil(e)+"px":"0px",o[n.positionProp]=e,!1===n.transformsEnabled||(!(o={})===n.cssTransitions?o[n.animType]="translate("+t+", "+i+")":o[n.animType]="translate3d("+t+", "+i+", 0px)"),n.$slideTrack.css(o)},s.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},s.prototype.setFade=function(){var i,n=this;n.$slides.each(function(e,t){i=n.slideWidth*e*-1,!0===n.options.rtl?u(t).css({position:"relative",right:i,top:0,zIndex:n.options.zIndex-2,opacity:0}):u(t).css({position:"relative",left:i,top:0,zIndex:n.options.zIndex-2,opacity:0})}),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},s.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},s.prototype.setOption=s.prototype.slickSetOption=function(){var e,t,i,n,o,r=this,s=!1;if("object"===u.type(arguments[0])?(i=arguments[0],s=arguments[1],o="multiple"):"string"===u.type(arguments[0])&&(n=arguments[1],s=arguments[2],"responsive"===(i=arguments[0])&&"array"===u.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[i]=n;else if("multiple"===o)u.each(i,function(e,t){r.options[e]=t});else if("responsive"===o)for(t in n)if("array"!==u.type(r.options.responsive))r.options.responsive=[n[t]];else{for(e=r.options.responsive.length-1;0<=e;)r.options.responsive[e].breakpoint===n[t].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(n[t])}s&&(r.unload(),r.reinit())},s.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},s.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},s.prototype.setSlideClasses=function(e){var t,i,n,o,r=this;if(i=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(t<=e&&e<=r.slideCount-1-t?r.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(n=r.options.slidesToShow+e,i.slice(n-t+1+s,n+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&i.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=r.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,n=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?i.slice(n-(r.options.slidesToShow-o),n+o).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},s.prototype.setupInfinite=function(){var e,t,i,n=this;if(!0===n.options.fade&&(n.options.centerMode=!1),!0===n.options.infinite&&!1===n.options.fade&&(t=null,n.slideCount>n.options.slidesToShow)){for(i=!0===n.options.centerMode?n.options.slidesToShow+1:n.options.slidesToShow,e=n.slideCount;e>n.slideCount-i;e-=1)t=e-1,u(n.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-n.slideCount).prependTo(n.$slideTrack).addClass("slick-cloned");for(e=0;e<i+n.slideCount;e+=1)t=e,u(n.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+n.slideCount).appendTo(n.$slideTrack).addClass("slick-cloned");n.$slideTrack.find(".slick-cloned").find("[id]").each(function(){u(this).attr("id","")})}},s.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},s.prototype.selectHandler=function(e){var t=u(e.target).is(".slick-slide")?u(e.target):u(e.target).parents(".slick-slide"),i=parseInt(t.attr("data-slick-index"));i=i||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},s.prototype.slideHandler=function(e,t,i){var n,o,r,s,a,l,u=this;if(t=t||!1,!(!0===u.animating&&!0===u.options.waitForAnimate||!0===u.options.fade&&u.currentSlide===e))if(!1===t&&u.asNavFor(e),n=e,a=u.getLeft(n),s=u.getLeft(u.currentSlide),u.currentLeft=null===u.swipeLeft?s:u.swipeLeft,!1===u.options.infinite&&!1===u.options.centerMode&&(e<0||e>u.getDotCount()*u.options.slidesToScroll))!1===u.options.fade&&(n=u.currentSlide,!0!==i&&u.slideCount>u.options.slidesToShow?u.animateSlide(s,function(){u.postSlide(n)}):u.postSlide(n));else if(!1===u.options.infinite&&!0===u.options.centerMode&&(e<0||e>u.slideCount-u.options.slidesToScroll))!1===u.options.fade&&(n=u.currentSlide,!0!==i&&u.slideCount>u.options.slidesToShow?u.animateSlide(s,function(){u.postSlide(n)}):u.postSlide(n));else{if(u.options.autoplay&&clearInterval(u.autoPlayTimer),o=n<0?u.slideCount%u.options.slidesToScroll!=0?u.slideCount-u.slideCount%u.options.slidesToScroll:u.slideCount+n:n>=u.slideCount?u.slideCount%u.options.slidesToScroll!=0?0:n-u.slideCount:n,u.animating=!0,u.$slider.trigger("beforeChange",[u,u.currentSlide,o]),r=u.currentSlide,u.currentSlide=o,u.setSlideClasses(u.currentSlide),u.options.asNavFor&&(l=(l=u.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(u.currentSlide),u.updateDots(),u.updateArrows(),!0===u.options.fade)return!0!==i?(u.fadeSlideOut(r),u.fadeSlide(o,function(){u.postSlide(o)})):u.postSlide(o),void u.animateHeight();!0!==i&&u.slideCount>u.options.slidesToShow?u.animateSlide(a,function(){u.postSlide(o)}):u.postSlide(o)}},s.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},s.prototype.swipeDirection=function(){var e,t,i,n,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,i=Math.atan2(t,e),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&0<=n?!1===o.options.rtl?"left":"right":n<=360&&315<=n?!1===o.options.rtl?"left":"right":135<=n&&n<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?35<=n&&n<=135?"down":"up":"vertical"},s.prototype.swipeEnd=function(e){var t,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1;if(n.interrupted=!1,n.shouldClick=!(10<n.touchObject.swipeLength),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(t),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},s.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},s.prototype.swipeMove=function(e){var t,i,n,o,r,s,a=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<s?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),i=a.swipeDirection(),void 0!==e.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+n*o:a.swipeLeft=t+n*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+n*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},s.prototype.swipeStart=function(e){var t,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,i.dragging=!0},s.prototype.unfilterSlides=s.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},s.prototype.unload=function(){var e=this;u(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},s.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},s.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},s.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},s.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},u.fn.slick=function(){var e,t,i=this,n=arguments[0],o=Array.prototype.slice.call(arguments,1),r=i.length;for(e=0;e<r;e++)if("object"==typeof n||void 0===n?i[e].slick=new s(i[e],n):t=i[e].slick[n].apply(i[e].slick,o),void 0!==t)return t;return i}}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?e(require("jquery")):e(window.jQuery||window.Zepto)}(function(c){function e(){}function d(e,t){m.ev.on("mfp"+e+b,t)}function p(e,t,i,n){var o=document.createElement("div");return o.className="mfp-"+e,i&&(o.innerHTML=i),n?t&&t.appendChild(o):(o=c(o),t&&o.appendTo(t)),o}function f(e,t){m.ev.triggerHandler("mfp"+e,t),m.st.callbacks&&(e=e.charAt(0).toLowerCase()+e.slice(1),m.st.callbacks[e]&&m.st.callbacks[e].apply(m,c.isArray(t)?t:[t]))}function h(e){return e===t&&m.currTemplate.closeBtn||(m.currTemplate.closeBtn=c(m.st.closeMarkup.replace("%title%",m.st.tClose)),t=e),m.currTemplate.closeBtn}function r(){c.magnificPopup.instance||((m=new e).init(),c.magnificPopup.instance=m)}var m,n,g,o,v,t,l="Close",u="BeforeClose",y="MarkupParse",w="Open",b=".mfp",x="mfp-ready",i="mfp-removing",s="mfp-prevent-close",a=!!window.jQuery,T=c(window);e.prototype={constructor:e,init:function(){var e=navigator.appVersion;m.isLowIE=m.isIE8=document.all&&!document.addEventListener,m.isAndroid=/android/gi.test(e),m.isIOS=/iphone|ipad|ipod/gi.test(e),m.supportsTransition=function(){var e=document.createElement("p").style,t=["ms","O","Moz","Webkit"];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+"Transition"in e)return!0;return!1}(),m.probablyMobile=m.isAndroid||m.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),g=c(document),m.popupsCache={}},open:function(e){var t;if(!1===e.isObj){m.items=e.items.toArray(),m.index=0;var i,n=e.items;for(t=0;t<n.length;t++)if((i=n[t]).parsed&&(i=i.el[0]),i===e.el[0]){m.index=t;break}}else m.items=c.isArray(e.items)?e.items:[e.items],m.index=e.index||0;if(!m.isOpen){m.types=[],v="",e.mainEl&&e.mainEl.length?m.ev=e.mainEl.eq(0):m.ev=g,e.key?(m.popupsCache[e.key]||(m.popupsCache[e.key]={}),m.currTemplate=m.popupsCache[e.key]):m.currTemplate={},m.st=c.extend(!0,{},c.magnificPopup.defaults,e),m.fixedContentPos="auto"===m.st.fixedContentPos?!m.probablyMobile:m.st.fixedContentPos,m.st.modal&&(m.st.closeOnContentClick=!1,m.st.closeOnBgClick=!1,m.st.showCloseBtn=!1,m.st.enableEscapeKey=!1),m.bgOverlay||(m.bgOverlay=p("bg").on("click"+b,function(){m.close()}),m.wrap=p("wrap").attr("tabindex",-1).on("click"+b,function(e){m._checkIfClose(e.target)&&m.close()}),m.container=p("container",m.wrap)),m.contentContainer=p("content"),m.st.preloader&&(m.preloader=p("preloader",m.container,m.st.tLoading));var o=c.magnificPopup.modules;for(t=0;t<o.length;t++){var r=o[t];r=r.charAt(0).toUpperCase()+r.slice(1),m["init"+r].call(m)}f("BeforeOpen"),m.st.showCloseBtn&&(m.st.closeBtnInside?(d(y,function(e,t,i,n){i.close_replaceWith=h(n.type)}),v+=" mfp-close-btn-in"):m.wrap.append(h())),m.st.alignTop&&(v+=" mfp-align-top"),m.fixedContentPos?m.wrap.css({overflow:m.st.overflowY,overflowX:"hidden",overflowY:m.st.overflowY}):m.wrap.css({top:T.scrollTop(),position:"absolute"}),!1!==m.st.fixedBgPos&&("auto"!==m.st.fixedBgPos||m.fixedContentPos)||m.bgOverlay.css({height:g.height(),position:"absolute"}),m.st.enableEscapeKey&&g.on("keyup"+b,function(e){27===e.keyCode&&m.close()}),T.on("resize"+b,function(){m.updateSize()}),m.st.closeOnContentClick||(v+=" mfp-auto-cursor"),v&&m.wrap.addClass(v);var s=m.wH=T.height(),a={};if(m.fixedContentPos&&m._hasScrollBar(s)){var l=m._getScrollbarSize();l&&(a.marginRight=l)}m.fixedContentPos&&(m.isIE7?c("body, html").css("overflow","hidden"):a.overflow="hidden");var u=m.st.mainClass;return m.isIE7&&(u+=" mfp-ie7"),u&&m._addClassToMFP(u),m.updateItemHTML(),f("BuildControls"),c("html").css(a),m.bgOverlay.add(m.wrap).prependTo(m.st.prependTo||c(document.body)),m._lastFocusedEl=document.activeElement,setTimeout(function(){m.content?(m._addClassToMFP(x),m._setFocus()):m.bgOverlay.addClass(x),g.on("focusin"+b,m._onFocusIn)},16),m.isOpen=!0,m.updateSize(s),f(w),e}m.updateItemHTML()},close:function(){m.isOpen&&(f(u),m.isOpen=!1,m.st.removalDelay&&!m.isLowIE&&m.supportsTransition?(m._addClassToMFP(i),setTimeout(function(){m._close()},m.st.removalDelay)):m._close())},_close:function(){f(l);var e=i+" "+x+" ";if(m.bgOverlay.detach(),m.wrap.detach(),m.container.empty(),m.st.mainClass&&(e+=m.st.mainClass+" "),m._removeClassFromMFP(e),m.fixedContentPos){var t={marginRight:""};m.isIE7?c("body, html").css("overflow",""):t.overflow="",c("html").css(t)}g.off("keyup.mfp focusin"+b),m.ev.off(b),m.wrap.attr("class","mfp-wrap").removeAttr("style"),m.bgOverlay.attr("class","mfp-bg"),m.container.attr("class","mfp-container"),!m.st.showCloseBtn||m.st.closeBtnInside&&!0!==m.currTemplate[m.currItem.type]||m.currTemplate.closeBtn&&m.currTemplate.closeBtn.detach(),m.st.autoFocusLast&&m._lastFocusedEl&&c(m._lastFocusedEl).focus(),m.currItem=null,m.content=null,m.currTemplate=null,m.prevHeight=0,f("AfterClose")},updateSize:function(e){if(m.isIOS){var t=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*t;m.wrap.css("height",i),m.wH=i}else m.wH=e||T.height();m.fixedContentPos||m.wrap.css("height",m.wH),f("Resize")},updateItemHTML:function(){var e=m.items[m.index];m.contentContainer.detach(),m.content&&m.content.detach(),e.parsed||(e=m.parseEl(m.index));var t=e.type;if(f("BeforeChange",[m.currItem?m.currItem.type:"",t]),m.currItem=e,!m.currTemplate[t]){var i=!!m.st[t]&&m.st[t].markup;f("FirstMarkupParse",i),m.currTemplate[t]=!i||c(i)}o&&o!==e.type&&m.container.removeClass("mfp-"+o+"-holder");var n=m["get"+t.charAt(0).toUpperCase()+t.slice(1)](e,m.currTemplate[t]);m.appendContent(n,t),e.preloaded=!0,f("Change",e),o=e.type,m.container.prepend(m.contentContainer),f("AfterChange")},appendContent:function(e,t){(m.content=e)?m.st.showCloseBtn&&m.st.closeBtnInside&&!0===m.currTemplate[t]?m.content.find(".mfp-close").length||m.content.append(h()):m.content=e:m.content="",f("BeforeAppend"),m.container.addClass("mfp-"+t+"-holder"),m.contentContainer.append(m.content)},parseEl:function(e){var t,i=m.items[e];if((i=i.tagName?{el:c(i)}:(t=i.type,{data:i,src:i.src})).el){for(var n=m.types,o=0;o<n.length;o++)if(i.el.hasClass("mfp-"+n[o])){t=n[o];break}i.src=i.el.attr("data-mfp-src"),i.src||(i.src=i.el.attr("href"))}return i.type=t||m.st.type||"inline",i.index=e,i.parsed=!0,m.items[e]=i,f("ElementParse",i),m.items[e]},addGroup:function(t,i){function e(e){e.mfpEl=this,m._openClick(e,t,i)}var n="click.magnificPopup";(i=i||{}).mainEl=t,i.items?(i.isObj=!0,t.off(n).on(n,e)):(i.isObj=!1,i.delegate?t.off(n).on(n,i.delegate,e):(i.items=t).off(n).on(n,e))},_openClick:function(e,t,i){if((void 0!==i.midClick?i.midClick:c.magnificPopup.defaults.midClick)||!(2===e.which||e.ctrlKey||e.metaKey||e.altKey||e.shiftKey)){var n=void 0!==i.disableOn?i.disableOn:c.magnificPopup.defaults.disableOn;if(n)if(c.isFunction(n)){if(!n.call(m))return!0}else if(T.width()<n)return!0;e.type&&(e.preventDefault(),m.isOpen&&e.stopPropagation()),i.el=c(e.mfpEl),i.delegate&&(i.items=t.find(i.delegate)),m.open(i)}},updateStatus:function(e,t){if(m.preloader){n!==e&&m.container.removeClass("mfp-s-"+n),t||"loading"!==e||(t=m.st.tLoading);var i={status:e,text:t};f("UpdateStatus",i),e=i.status,t=i.text,m.preloader.html(t),m.preloader.find("a").on("click",function(e){e.stopImmediatePropagation()}),m.container.addClass("mfp-s-"+e),n=e}},_checkIfClose:function(e){if(!c(e).hasClass(s)){var t=m.st.closeOnContentClick,i=m.st.closeOnBgClick;if(t&&i)return!0;if(!m.content||c(e).hasClass("mfp-close")||m.preloader&&e===m.preloader[0])return!0;if(e===m.content[0]||c.contains(m.content[0],e)){if(t)return!0}else if(i&&c.contains(document,e))return!0;return!1}},_addClassToMFP:function(e){m.bgOverlay.addClass(e),m.wrap.addClass(e)},_removeClassFromMFP:function(e){this.bgOverlay.removeClass(e),m.wrap.removeClass(e)},_hasScrollBar:function(e){return(m.isIE7?g.height():document.body.scrollHeight)>(e||T.height())},_setFocus:function(){(m.st.focus?m.content.find(m.st.focus).eq(0):m.wrap).focus()},_onFocusIn:function(e){if(e.target!==m.wrap[0]&&!c.contains(m.wrap[0],e.target))return m._setFocus(),!1},_parseMarkup:function(o,e,t){var r;t.data&&(e=c.extend(t.data,e)),f(y,[o,e,t]),c.each(e,function(e,t){if(void 0===t||!1===t)return!0;if(1<(r=e.split("_")).length){var i=o.find(b+"-"+r[0]);if(0<i.length){var n=r[1];"replaceWith"===n?i[0]!==t[0]&&i.replaceWith(t):"img"===n?i.is("img")?i.attr("src",t):i.replaceWith(c("<img>").attr("src",t).attr("class",i.attr("class"))):i.attr(r[1],t)}}else o.find(b+"-"+e).html(t)})},_getScrollbarSize:function(){if(void 0===m.scrollbarSize){var e=document.createElement("div");e.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(e),m.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return m.scrollbarSize}},c.magnificPopup={instance:null,proto:e.prototype,modules:[],open:function(e,t){return r(),(e=e?c.extend(!0,{},e):{}).isObj=!0,e.index=t||0,this.instance.open(e)},close:function(){return c.magnificPopup.instance&&c.magnificPopup.instance.close()},registerModule:function(e,t){t.options&&(c.magnificPopup.defaults[e]=t.options),c.extend(this.proto,t.proto),this.modules.push(e)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},c.fn.magnificPopup=function(e){r();var t=c(this);if("string"==typeof e)if("open"===e){var i,n=a?t.data("magnificPopup"):t[0].magnificPopup,o=parseInt(arguments[1],10)||0;i=n.items?n.items[o]:(i=t,n.delegate&&(i=i.find(n.delegate)),i.eq(o)),m._openClick({mfpEl:i},t,n)}else m.isOpen&&m[e].apply(m,Array.prototype.slice.call(arguments,1));else e=c.extend(!0,{},e),a?t.data("magnificPopup",e):t[0].magnificPopup=e,m.addGroup(t,e);return t};function S(){E&&(k.after(E.addClass(C)).detach(),E=null)}var C,k,E,I="inline";c.magnificPopup.registerModule(I,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){m.types.push(I),d(l+"."+I,function(){S()})},getInline:function(e,t){if(S(),e.src){var i=m.st.inline,n=c(e.src);if(n.length){var o=n[0].parentNode;o&&o.tagName&&(k||(C=i.hiddenClass,k=p(C),C="mfp-"+C),E=n.after(k).detach().removeClass(C)),m.updateStatus("ready")}else m.updateStatus("error",i.tNotFound),n=c("<div>");return e.inlineElement=n}return m.updateStatus("ready"),m._parseMarkup(t,{},e),t}}});function A(){L&&c(document.body).removeClass(L)}function $(){A(),m.req&&m.req.abort()}var L,z="ajax";c.magnificPopup.registerModule(z,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){m.types.push(z),L=m.st.ajax.cursor,d(l+"."+z,$),d("BeforeChange."+z,$)},getAjax:function(o){L&&c(document.body).addClass(L),m.updateStatus("loading");var e=c.extend({url:o.src,success:function(e,t,i){var n={data:e,xhr:i};f("ParseAjax",n),m.appendContent(c(n.data),z),o.finished=!0,A(),m._setFocus(),setTimeout(function(){m.wrap.addClass(x)},16),m.updateStatus("ready"),f("AjaxContentAdded")},error:function(){A(),o.finished=o.loadError=!0,m.updateStatus("error",m.st.ajax.tError.replace("%url%",o.src))}},m.st.ajax.settings);return m.req=c.ajax(e),""}}});var _;c.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var e=m.st.image,t=".image";m.types.push("image"),d(w+t,function(){"image"===m.currItem.type&&e.cursor&&c(document.body).addClass(e.cursor)}),d(l+t,function(){e.cursor&&c(document.body).removeClass(e.cursor),T.off("resize"+b)}),d("Resize"+t,m.resizeImage),m.isLowIE&&d("AfterChange",m.resizeImage)},resizeImage:function(){var e=m.currItem;if(e&&e.img&&m.st.image.verticalFit){var t=0;m.isLowIE&&(t=parseInt(e.img.css("padding-top"),10)+parseInt(e.img.css("padding-bottom"),10)),e.img.css("max-height",m.wH-t)}},_onImageHasSize:function(e){e.img&&(e.hasSize=!0,_&&clearInterval(_),e.isCheckingImgSize=!1,f("ImageHasSize",e),e.imgHidden&&(m.content&&m.content.removeClass("mfp-loading"),e.imgHidden=!1))},findImageSize:function(t){var i=0,n=t.img[0],o=function(e){_&&clearInterval(_),_=setInterval(function(){0<n.naturalWidth?m._onImageHasSize(t):(200<i&&clearInterval(_),3===++i?o(10):40===i?o(50):100===i&&o(500))},e)};o(1)},getImage:function(e,t){var i=0,n=function(){e&&(e.img[0].complete?(e.img.off(".mfploader"),e===m.currItem&&(m._onImageHasSize(e),m.updateStatus("ready")),e.hasSize=!0,e.loaded=!0,f("ImageLoadComplete")):++i<200?setTimeout(n,100):o())},o=function(){e&&(e.img.off(".mfploader"),e===m.currItem&&(m._onImageHasSize(e),m.updateStatus("error",r.tError.replace("%url%",e.src))),e.hasSize=!0,e.loaded=!0,e.loadError=!0)},r=m.st.image,s=t.find(".mfp-img");if(s.length){var a=document.createElement("img");a.className="mfp-img",e.el&&e.el.find("img").length&&(a.alt=e.el.find("img").attr("alt")),e.img=c(a).on("load.mfploader",n).on("error.mfploader",o),a.src=e.src,s.is("img")&&(e.img=e.img.clone()),0<(a=e.img[0]).naturalWidth?e.hasSize=!0:a.width||(e.hasSize=!1)}return m._parseMarkup(t,{title:function(e){if(e.data&&void 0!==e.data.title)return e.data.title;var t=m.st.image.titleSrc;if(t){if(c.isFunction(t))return t.call(m,e);if(e.el)return e.el.attr(t)||""}return""}(e),img_replaceWith:e.img},e),m.resizeImage(),e.hasSize?(_&&clearInterval(_),e.loadError?(t.addClass("mfp-loading"),m.updateStatus("error",r.tError.replace("%url%",e.src))):(t.removeClass("mfp-loading"),m.updateStatus("ready"))):(m.updateStatus("loading"),e.loading=!0,e.hasSize||(e.imgHidden=!0,t.addClass("mfp-loading"),m.findImageSize(e))),t}}});var O;c.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(e){return e.is("img")?e:e.find("img")}},proto:{initZoom:function(){var e,r=m.st.zoom,t=".zoom";if(r.enabled&&m.supportsTransition){function i(e){var t=e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+r.duration/1e3+"s "+r.easing,n={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},o="transition";return n["-webkit-"+o]=n["-moz-"+o]=n["-o-"+o]=n[o]=i,t.css(n),t}function n(){m.content.css("visibility","visible")}var o,s,a=r.duration;d("BuildControls"+t,function(){if(m._allowZoom()){if(clearTimeout(o),m.content.css("visibility","hidden"),!(e=m._getItemToZoom()))return void n();(s=i(e)).css(m._getOffset()),m.wrap.append(s),o=setTimeout(function(){s.css(m._getOffset(!0)),o=setTimeout(function(){n(),setTimeout(function(){s.remove(),e=s=null,f("ZoomAnimationEnded")},16)},a)},16)}}),d(u+t,function(){if(m._allowZoom()){if(clearTimeout(o),m.st.removalDelay=a,!e){if(!(e=m._getItemToZoom()))return;s=i(e)}s.css(m._getOffset(!0)),m.wrap.append(s),m.content.css("visibility","hidden"),setTimeout(function(){s.css(m._getOffset())},16)}}),d(l+t,function(){m._allowZoom()&&(n(),s&&s.remove(),e=null)})}},_allowZoom:function(){return"image"===m.currItem.type},_getItemToZoom:function(){return!!m.currItem.hasSize&&m.currItem.img},_getOffset:function(e){var t,i=(t=e?m.currItem.img:m.st.zoom.opener(m.currItem.el||m.currItem)).offset(),n=parseInt(t.css("padding-top"),10),o=parseInt(t.css("padding-bottom"),10);i.top-=c(window).scrollTop()-n;var r={width:t.width(),height:(a?t.innerHeight():t[0].offsetHeight)-o-n};return void 0===O&&(O=void 0!==document.createElement("p").style.MozTransform),O?r["-moz-transform"]=r.transform="translate("+i.left+"px,"+i.top+"px)":(r.left=i.left,r.top=i.top),r}}});function H(e){if(m.currTemplate[D]){var t=m.currTemplate[D].find("iframe");t.length&&(e||(t[0].src="//about:blank"),m.isIE8&&t.css("display",e?"block":"none"))}}var D="iframe";c.magnificPopup.registerModule(D,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){m.types.push(D),d("BeforeChange",function(e,t,i){t!==i&&(t===D?H():i===D&&H(!0))}),d(l+"."+D,function(){H()})},getIframe:function(e,t){var i=e.src,n=m.st.iframe;c.each(n.patterns,function(){if(-1<i.indexOf(this.index))return this.id&&(i="string"==typeof this.id?i.substr(i.lastIndexOf(this.id)+this.id.length,i.length):this.id.call(this,i)),i=this.src.replace("%id%",i),!1});var o={};return n.srcAction&&(o[n.srcAction]=i),m._parseMarkup(t,o,e),m.updateStatus("ready"),t}}});function j(e){var t=m.items.length;return t-1<e?e-t:e<0?t+e:e}function M(e,t,i){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,i)}c.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var r=m.st.gallery,e=".mfp-gallery";if(m.direction=!0,!r||!r.enabled)return!1;v+=" mfp-gallery",d(w+e,function(){r.navigateByImgClick&&m.wrap.on("click"+e,".mfp-img",function(){if(1<m.items.length)return m.next(),!1}),g.on("keydown"+e,function(e){37===e.keyCode?m.prev():39===e.keyCode&&m.next()})}),d("UpdateStatus"+e,function(e,t){t.text&&(t.text=M(t.text,m.currItem.index,m.items.length))}),d(y+e,function(e,t,i,n){var o=m.items.length;i.counter=1<o?M(r.tCounter,n.index,o):""}),d("BuildControls"+e,function(){if(1<m.items.length&&r.arrows&&!m.arrowLeft){var e=r.arrowMarkup,t=m.arrowLeft=c(e.replace(/%title%/gi,r.tPrev).replace(/%dir%/gi,"left")).addClass(s),i=m.arrowRight=c(e.replace(/%title%/gi,r.tNext).replace(/%dir%/gi,"right")).addClass(s);t.click(function(){m.prev()}),i.click(function(){m.next()}),m.container.append(t.add(i))}}),d("Change"+e,function(){m._preloadTimeout&&clearTimeout(m._preloadTimeout),m._preloadTimeout=setTimeout(function(){m.preloadNearbyImages(),m._preloadTimeout=null},16)}),d(l+e,function(){g.off(e),m.wrap.off("click"+e),m.arrowRight=m.arrowLeft=null})},next:function(){m.direction=!0,m.index=j(m.index+1),m.updateItemHTML()},prev:function(){m.direction=!1,m.index=j(m.index-1),m.updateItemHTML()},goTo:function(e){m.direction=e>=m.index,m.index=e,m.updateItemHTML()},preloadNearbyImages:function(){var e,t=m.st.gallery.preload,i=Math.min(t[0],m.items.length),n=Math.min(t[1],m.items.length);for(e=1;e<=(m.direction?n:i);e++)m._preloadItem(m.index+e);for(e=1;e<=(m.direction?i:n);e++)m._preloadItem(m.index-e)},_preloadItem:function(e){if(e=j(e),!m.items[e].preloaded){var t=m.items[e];t.parsed||(t=m.parseEl(e)),f("LazyLoad",t),"image"===t.type&&(t.img=c('<img class="mfp-img" />').on("load.mfploader",function(){t.hasSize=!0}).on("error.mfploader",function(){t.hasSize=!0,t.loadError=!0,f("LazyLoadError",t)}).attr("src",t.src)),t.preloaded=!0}}}});var P="retina";c.magnificPopup.registerModule(P,{options:{replaceSrc:function(e){return e.src.replace(/\.\w+$/,function(e){return"@2x"+e})},ratio:1},proto:{initRetina:function(){if(1<window.devicePixelRatio){var i=m.st.retina,n=i.ratio;1<(n=isNaN(n)?n():n)&&(d("ImageHasSize."+P,function(e,t){t.img.css({"max-width":t.img[0].naturalWidth/n,width:"100%"})}),d("ElementParse."+P,function(e,t){t.src=i.replaceSrc(t,n)}))}}}}),r()}),function(u){u.fn.resizeOnApproach=function(e){var t={elementDefault:35,elementClosest:55,triggerDistance:200,setWidthAndHeight:!1};e&&u.extend(t,e);var n=t.setWidthAndHeight,o=this,r=t.elementDefault,s=t.triggerDistance,a=t.elementClosest-r,l=a/s;u(document).ready(function(){o.each(function(){this.style.width=r+"px",n&&(this.style.height=r+"px")})}),u(document).mousemove(function(e){var t=e.pageX,i=e.pageY;o.each(function(){var e=u(this).offset();(e=distToSqEdge(this.width,e.left+this.width/2,e.top+this.height/2,t,i))<s?(e<0&&(e=0),!0,e=r+(a-e*l),this.style.width=e+"px",n&&(this.style.height=e+"px")):(this.style.width=r+"px",n&&(this.style.height=r+"px"))})})}}(jQuery),function(t,i){"function"==typeof define&&define.amd?define("jquery-bridget/jquery-bridget",["jquery"],function(e){return i(t,e)}):"object"==typeof module&&module.exports?module.exports=i(t,require("jquery")):t.jQueryBridget=i(t,t.jQuery)}(window,function(e,t){"use strict";var i=Array.prototype.slice,n=e.console,d=void 0===n?function(){}:function(e){n.error(e)};function o(u,o,c){(c=c||t||e.jQuery)&&(o.prototype.option||(o.prototype.option=function(e){c.isPlainObject(e)&&(this.options=c.extend(!0,this.options,e))}),c.fn[u]=function(e){return"string"==typeof e?function(e,r,s){var a,l="$()."+u+'("'+r+'")';return e.each(function(e,t){var i=c.data(t,u);if(i){var n=i[r];if(n&&"_"!=r.charAt(0)){var o=n.apply(i,s);a=void 0===a?o:a}else d(l+" is not a valid method")}else d(u+" not initialized. Cannot call methods, i.e. "+l)}),void 0!==a?a:e}(this,e,i.call(arguments,1)):(function(e,n){e.each(function(e,t){var i=c.data(t,u);i?(i.option(n),i._init()):(i=new o(t,n),c.data(t,u,i))})}(this,e),this)},r(c))}function r(e){!e||e&&e.bridget||(e.bridget=o)}return r(t||e.jQuery),o}),function(e,t){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",t):"object"==typeof module&&module.exports?module.exports=t():e.EvEmitter=t()}("undefined"!=typeof window?window:this,function(){function e(){}var t=e.prototype;return t.on=function(e,t){if(e&&t){var i=this._events=this._events||{},n=i[e]=i[e]||[];return-1==n.indexOf(t)&&n.push(t),this}},t.once=function(e,t){if(e&&t){this.on(e,t);var i=this._onceEvents=this._onceEvents||{};return(i[e]=i[e]||{})[t]=!0,this}},t.off=function(e,t){var i=this._events&&this._events[e];if(i&&i.length){var n=i.indexOf(t);return-1!=n&&i.splice(n,1),this}},t.emitEvent=function(e,t){var i=this._events&&this._events[e];if(i&&i.length){i=i.slice(0),t=t||[];for(var n=this._onceEvents&&this._onceEvents[e],o=0;o<i.length;o++){var r=i[o];n&&n[r]&&(this.off(e,r),delete n[r]),r.apply(this,t)}return this}},t.allOff=function(){delete this._events,delete this._onceEvents},e}),function(e,t){"function"==typeof define&&define.amd?define("get-size/get-size",t):"object"==typeof module&&module.exports?module.exports=t():e.getSize=t()}(window,function(){"use strict";function v(e){var t=parseFloat(e);return-1==e.indexOf("%")&&!isNaN(t)&&t}var i="undefined"==typeof console?function(){}:function(e){console.error(e)},y=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],w=y.length;function b(e){var t=getComputedStyle(e);return t||i("Style returned "+t+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),t}var x,T=!1;function S(e){if(!function(){if(!T){T=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var t=document.body||document.documentElement;t.appendChild(e);var i=b(e);x=200==Math.round(v(i.width)),S.isBoxSizeOuter=x,t.removeChild(e)}}(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var t=b(e);if("none"==t.display)return function(){for(var e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},t=0;t<w;t++){e[y[t]]=0}return e}();var i={};i.width=e.offsetWidth,i.height=e.offsetHeight;for(var n=i.isBorderBox="border-box"==t.boxSizing,o=0;o<w;o++){var r=y[o],s=t[r],a=parseFloat(s);i[r]=isNaN(a)?0:a}var l=i.paddingLeft+i.paddingRight,u=i.paddingTop+i.paddingBottom,c=i.marginLeft+i.marginRight,d=i.marginTop+i.marginBottom,p=i.borderLeftWidth+i.borderRightWidth,f=i.borderTopWidth+i.borderBottomWidth,h=n&&x,m=v(t.width);!1!==m&&(i.width=m+(h?0:l+p));var g=v(t.height);return!1!==g&&(i.height=g+(h?0:u+f)),i.innerWidth=i.width-(l+p),i.innerHeight=i.height-(u+f),i.outerWidth=i.width+c,i.outerHeight=i.height+d,i}}return S}),function(e,t){"use strict";"function"==typeof define&&define.amd?define("desandro-matches-selector/matches-selector",t):"object"==typeof module&&module.exports?module.exports=t():e.matchesSelector=t()}(window,function(){"use strict";var i=function(){var e=window.Element.prototype;if(e.matches)return"matches";if(e.matchesSelector)return"matchesSelector";for(var t=["webkit","moz","ms","o"],i=0;i<t.length;i++){var n=t[i]+"MatchesSelector";if(e[n])return n}}();return function(e,t){return e[i](t)}}),function(t,i){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["desandro-matches-selector/matches-selector"],function(e){return i(t,e)}):"object"==typeof module&&module.exports?module.exports=i(t,require("desandro-matches-selector")):t.fizzyUIUtils=i(t,t.matchesSelector)}(window,function(u,r){var c={extend:function(e,t){for(var i in t)e[i]=t[i];return e},modulo:function(e,t){return(e%t+t)%t}},t=Array.prototype.slice;c.makeArray=function(e){return Array.isArray(e)?e:null==e?[]:"object"==typeof e&&"number"==typeof e.length?t.call(e):[e]},c.removeFrom=function(e,t){var i=e.indexOf(t);-1!=i&&e.splice(i,1)},c.getParent=function(e,t){for(;e.parentNode&&e!=document.body;)if(e=e.parentNode,r(e,t))return e},c.getQueryElement=function(e){return"string"==typeof e?document.querySelector(e):e},c.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},c.filterFindElements=function(e,n){e=c.makeArray(e);var o=[];return e.forEach(function(e){if(e instanceof HTMLElement)if(n){r(e,n)&&o.push(e);for(var t=e.querySelectorAll(n),i=0;i<t.length;i++)o.push(t[i])}else o.push(e)}),o},c.debounceMethod=function(e,t,n){n=n||100;var o=e.prototype[t],r=t+"Timeout";e.prototype[t]=function(){var e=this[r];clearTimeout(e);var t=arguments,i=this;this[r]=setTimeout(function(){o.apply(i,t),delete i[r]},n)}},c.docReady=function(e){var t=document.readyState;"complete"==t||"interactive"==t?setTimeout(e):document.addEventListener("DOMContentLoaded",e)},c.toDashed=function(e){return e.replace(/(.)([A-Z])/g,function(e,t,i){return t+"-"+i}).toLowerCase()};var d=u.console;return c.htmlInit=function(a,l){c.docReady(function(){var e=c.toDashed(l),o="data-"+e,t=document.querySelectorAll("["+o+"]"),i=document.querySelectorAll(".js-"+e),n=c.makeArray(t).concat(c.makeArray(i)),r=o+"-options",s=u.jQuery;n.forEach(function(t){var e,i=t.getAttribute(o)||t.getAttribute(r);try{e=i&&JSON.parse(i)}catch(e){return void(d&&d.error("Error parsing "+o+" on "+t.className+": "+e))}var n=new a(t,e);s&&s.data(t,l,n)})})},c}),function(e,t){"function"==typeof define&&define.amd?define("outlayer/item",["ev-emitter/ev-emitter","get-size/get-size"],t):"object"==typeof module&&module.exports?module.exports=t(require("ev-emitter"),require("get-size")):(e.Outlayer={},e.Outlayer.Item=t(e.EvEmitter,e.getSize))}(window,function(e,t){"use strict";var i=document.documentElement.style,n="string"==typeof i.transition?"transition":"WebkitTransition",o="string"==typeof i.transform?"transform":"WebkitTransform",r={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[n],s={transform:o,transition:n,transitionDuration:n+"Duration",transitionProperty:n+"Property",transitionDelay:n+"Delay"};function a(e,t){e&&(this.element=e,this.layout=t,this.position={x:0,y:0},this._create())}var l=a.prototype=Object.create(e.prototype);l.constructor=a,l._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},l.handleEvent=function(e){var t="on"+e.type;this[t]&&this[t](e)},l.getSize=function(){this.size=t(this.element)},l.css=function(e){var t=this.element.style;for(var i in e){t[s[i]||i]=e[i]}},l.getPosition=function(){var e=getComputedStyle(this.element),t=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),n=e[t?"left":"right"],o=e[i?"top":"bottom"],r=parseFloat(n),s=parseFloat(o),a=this.layout.size;-1!=n.indexOf("%")&&(r=r/100*a.width),-1!=o.indexOf("%")&&(s=s/100*a.height),r=isNaN(r)?0:r,s=isNaN(s)?0:s,r-=t?a.paddingLeft:a.paddingRight,s-=i?a.paddingTop:a.paddingBottom,this.position.x=r,this.position.y=s},l.layoutPosition=function(){var e=this.layout.size,t={},i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),o=i?"paddingLeft":"paddingRight",r=i?"left":"right",s=i?"right":"left",a=this.position.x+e[o];t[r]=this.getXValue(a),t[s]="";var l=n?"paddingTop":"paddingBottom",u=n?"top":"bottom",c=n?"bottom":"top",d=this.position.y+e[l];t[u]=this.getYValue(d),t[c]="",this.css(t),this.emitEvent("layout",[this])},l.getXValue=function(e){var t=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!t?e/this.layout.size.width*100+"%":e+"px"},l.getYValue=function(e){var t=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&t?e/this.layout.size.height*100+"%":e+"px"},l._transitionTo=function(e,t){this.getPosition();var i=this.position.x,n=this.position.y,o=e==this.position.x&&t==this.position.y;if(this.setPosition(e,t),!o||this.isTransitioning){var r=e-i,s=t-n,a={};a.transform=this.getTranslate(r,s),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},l.getTranslate=function(e,t){return"translate3d("+(e=this.layout._getOption("originLeft")?e:-e)+"px, "+(t=this.layout._getOption("originTop")?t:-t)+"px, 0)"},l.goTo=function(e,t){this.setPosition(e,t),this.layoutPosition()},l.moveTo=l._transitionTo,l.setPosition=function(e,t){this.position.x=parseFloat(e),this.position.y=parseFloat(t)},l._nonTransition=function(e){for(var t in this.css(e.to),e.isCleaning&&this._removeStyles(e.to),e.onTransitionEnd)e.onTransitionEnd[t].call(this)},l.transition=function(e){if(parseFloat(this.layout.options.transitionDuration)){var t=this._transn;for(var i in e.onTransitionEnd)t.onEnd[i]=e.onTransitionEnd[i];for(i in e.to)t.ingProperties[i]=!0,e.isCleaning&&(t.clean[i]=!0);if(e.from){this.css(e.from);this.element.offsetHeight;null}this.enableTransition(e.to),this.css(e.to),this.isTransitioning=!0}else this._nonTransition(e)};var u="opacity,"+o.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()});l.enableTransition=function(){if(!this.isTransitioning){var e=this.layout.options.transitionDuration;e="number"==typeof e?e+"ms":e,this.css({transitionProperty:u,transitionDuration:e,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(r,this,!1)}},l.onwebkitTransitionEnd=function(e){this.ontransitionend(e)},l.onotransitionend=function(e){this.ontransitionend(e)};var c={"-webkit-transform":"transform"};l.ontransitionend=function(e){if(e.target===this.element){var t=this._transn,i=c[e.propertyName]||e.propertyName;if(delete t.ingProperties[i],function(e){for(var t in e)return!1;return!null}(t.ingProperties)&&this.disableTransition(),i in t.clean&&(this.element.style[e.propertyName]="",delete t.clean[i]),i in t.onEnd)t.onEnd[i].call(this),delete t.onEnd[i];this.emitEvent("transitionEnd",[this])}},l.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(r,this,!1),this.isTransitioning=!1},l._removeStyles=function(e){var t={};for(var i in e)t[i]="";this.css(t)};var d={transitionProperty:"",transitionDuration:"",transitionDelay:""};return l.removeTransitionStyles=function(){this.css(d)},l.stagger=function(e){e=isNaN(e)?0:e,this.staggerDelay=e+"ms"},l.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},l.remove=function(){n&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",function(){this.removeElem()}),this.hide()):this.removeElem()},l.reveal=function(){delete this.isHidden,this.css({display:""});var e=this.layout.options,t={};t[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:e.hiddenStyle,to:e.visibleStyle,isCleaning:!0,onTransitionEnd:t})},l.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},l.getHideRevealTransitionEndProperty=function(e){var t=this.layout.options[e];if(t.opacity)return"opacity";for(var i in t)return i},l.hide=function(){this.isHidden=!0,this.css({display:""});var e=this.layout.options,t={};t[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:e.visibleStyle,to:e.hiddenStyle,isCleaning:!0,onTransitionEnd:t})},l.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},l.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},a}),function(o,r){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["ev-emitter/ev-emitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(e,t,i,n){return r(o,e,t,i,n)}):"object"==typeof module&&module.exports?module.exports=r(o,require("ev-emitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):o.Outlayer=r(o,o.EvEmitter,o.getSize,o.fizzyUIUtils,o.Outlayer.Item)}(window,function(e,t,o,r,n){"use strict";function i(){}var s=e.console,a=e.jQuery,l=0,u={};function c(e,t){var i=r.getQueryElement(e);if(i){this.element=i,a&&(this.$element=a(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(t);var n=++l;this.element.outlayerGUID=n,(u[n]=this)._create(),this._getOption("initLayout")&&this.layout()}else s&&s.error("Bad element for "+this.constructor.namespace+": "+(i||e))}c.namespace="outlayer",c.Item=n,c.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var d=c.prototype;function p(e){function t(){e.apply(this,arguments)}return(t.prototype=Object.create(e.prototype)).constructor=t}r.extend(d,t.prototype),d.option=function(e){r.extend(this.options,e)},d._getOption=function(e){var t=this.constructor.compatOptions[e];return t&&void 0!==this.options[t]?this.options[t]:this.options[e]},c.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},d._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},d.reloadItems=function(){this.items=this._itemize(this.element.children)},d._itemize=function(e){for(var t=this._filterFindItemElements(e),i=this.constructor.Item,n=[],o=0;o<t.length;o++){var r=new i(t[o],this);n.push(r)}return n},d._filterFindItemElements=function(e){return r.filterFindElements(e,this.options.itemSelector)},d.getItemElements=function(){return this.items.map(function(e){return e.element})},d.layout=function(){this._resetLayout(),this._manageStamps();var e=this._getOption("layoutInstant"),t=void 0!==e?e:!this._isLayoutInited;this.layoutItems(this.items,t),this._isLayoutInited=!0},d._init=d.layout,d._resetLayout=function(){this.getSize()},d.getSize=function(){this.size=o(this.element)},d._getMeasurement=function(e,t){var i,n=this.options[e];n?("string"==typeof n?i=this.element.querySelector(n):n instanceof HTMLElement&&(i=n),this[e]=i?o(i)[t]:n):this[e]=0},d.layoutItems=function(e,t){e=this._getItemsForLayout(e),this._layoutItems(e,t),this._postLayout()},d._getItemsForLayout=function(e){return e.filter(function(e){return!e.isIgnored})},d._layoutItems=function(e,i){if(this._emitCompleteOnItems("layout",e),e&&e.length){var n=[];e.forEach(function(e){var t=this._getItemLayoutPosition(e);t.item=e,t.isInstant=i||e.isLayoutInstant,n.push(t)},this),this._processLayoutQueue(n)}},d._getItemLayoutPosition=function(){return{x:0,y:0}},d._processLayoutQueue=function(e){this.updateStagger(),e.forEach(function(e,t){this._positionItem(e.item,e.x,e.y,e.isInstant,t)},this)},d.updateStagger=function(){var e=this.options.stagger;if(null!=e)return this.stagger=function(e){if("number"==typeof e)return e;var t=e.match(/(^\d*\.?\d*)(\w*)/),i=t&&t[1],n=t&&t[2];if(!i.length)return 0;i=parseFloat(i);var o=f[n]||1;return i*o}(e),this.stagger;this.stagger=0},d._positionItem=function(e,t,i,n,o){n?e.goTo(t,i):(e.stagger(o*this.stagger),e.moveTo(t,i))},d._postLayout=function(){this.resizeContainer()},d.resizeContainer=function(){if(this._getOption("resizeContainer")){var e=this._getContainerSize();e&&(this._setContainerMeasure(e.width,!0),this._setContainerMeasure(e.height,!1))}},d._getContainerSize=i,d._setContainerMeasure=function(e,t){if(void 0!==e){var i=this.size;i.isBorderBox&&(e+=t?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),e=Math.max(e,0),this.element.style[t?"width":"height"]=e+"px"}},d._emitCompleteOnItems=function(t,e){var i=this;function n(){i.dispatchEvent(t+"Complete",null,[e])}var o=e.length;if(e&&o){var r=0;e.forEach(function(e){e.once(t,s)})}else n();function s(){++r==o&&n()}},d.dispatchEvent=function(e,t,i){var n=t?[t].concat(i):i;if(this.emitEvent(e,n),a)if(this.$element=this.$element||a(this.element),t){var o=a.Event(t);o.type=e,this.$element.trigger(o,i)}else this.$element.trigger(e,i)},d.ignore=function(e){var t=this.getItem(e);t&&(t.isIgnored=!0)},d.unignore=function(e){var t=this.getItem(e);t&&delete t.isIgnored},d.stamp=function(e){(e=this._find(e))&&(this.stamps=this.stamps.concat(e),e.forEach(this.ignore,this))},d.unstamp=function(e){(e=this._find(e))&&e.forEach(function(e){r.removeFrom(this.stamps,e),this.unignore(e)},this)},d._find=function(e){if(e)return"string"==typeof e&&(e=this.element.querySelectorAll(e)),e=r.makeArray(e)},d._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},d._getBoundingRect=function(){var e=this.element.getBoundingClientRect(),t=this.size;this._boundingRect={left:e.left+t.paddingLeft+t.borderLeftWidth,top:e.top+t.paddingTop+t.borderTopWidth,right:e.right-(t.paddingRight+t.borderRightWidth),bottom:e.bottom-(t.paddingBottom+t.borderBottomWidth)}},d._manageStamp=i,d._getElementOffset=function(e){var t=e.getBoundingClientRect(),i=this._boundingRect,n=o(e);return{left:t.left-i.left-n.marginLeft,top:t.top-i.top-n.marginTop,right:i.right-t.right-n.marginRight,bottom:i.bottom-t.bottom-n.marginBottom}},d.handleEvent=r.handleEvent,d.bindResize=function(){e.addEventListener("resize",this),this.isResizeBound=!0},d.unbindResize=function(){e.removeEventListener("resize",this),this.isResizeBound=!1},d.onresize=function(){this.resize()},r.debounceMethod(c,"onresize",100),d.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},d.needsResizeLayout=function(){var e=o(this.element);return this.size&&e&&e.innerWidth!==this.size.innerWidth},d.addItems=function(e){var t=this._itemize(e);return t.length&&(this.items=this.items.concat(t)),t},d.appended=function(e){var t=this.addItems(e);t.length&&(this.layoutItems(t,!0),this.reveal(t))},d.prepended=function(e){var t=this._itemize(e);if(t.length){var i=this.items.slice(0);this.items=t.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(t,!0),this.reveal(t),this.layoutItems(i)}},d.reveal=function(e){if(this._emitCompleteOnItems("reveal",e),e&&e.length){var i=this.updateStagger();e.forEach(function(e,t){e.stagger(t*i),e.reveal()})}},d.hide=function(e){if(this._emitCompleteOnItems("hide",e),e&&e.length){var i=this.updateStagger();e.forEach(function(e,t){e.stagger(t*i),e.hide()})}},d.revealItemElements=function(e){var t=this.getItems(e);this.reveal(t)},d.hideItemElements=function(e){var t=this.getItems(e);this.hide(t)},d.getItem=function(e){for(var t=0;t<this.items.length;t++){var i=this.items[t];if(i.element==e)return i}},d.getItems=function(e){e=r.makeArray(e);var i=[];return e.forEach(function(e){var t=this.getItem(e);t&&i.push(t)},this),i},d.remove=function(e){var t=this.getItems(e);this._emitCompleteOnItems("remove",t),t&&t.length&&t.forEach(function(e){e.remove(),r.removeFrom(this.items,e)},this)},d.destroy=function(){var e=this.element.style;e.height="",e.position="",e.width="",this.items.forEach(function(e){e.destroy()}),this.unbindResize();var t=this.element.outlayerGUID;delete u[t],delete this.element.outlayerGUID,a&&a.removeData(this.element,this.constructor.namespace)},c.data=function(e){var t=(e=r.getQueryElement(e))&&e.outlayerGUID;return t&&u[t]},c.create=function(e,t){var i=p(c);return i.defaults=r.extend({},c.defaults),r.extend(i.defaults,t),i.compatOptions=r.extend({},c.compatOptions),i.namespace=e,i.data=c.data,i.Item=p(n),r.htmlInit(i,e),a&&a.bridget&&a.bridget(e,i),i};var f={ms:1,s:1e3};return c.Item=n,c}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/item",["outlayer/outlayer"],t):"object"==typeof module&&module.exports?module.exports=t(require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.Item=t(e.Outlayer))}(window,function(e){"use strict";function t(){e.Item.apply(this,arguments)}var i=t.prototype=Object.create(e.Item.prototype),n=i._create;i._create=function(){this.id=this.layout.itemGUID++,n.call(this),this.sortData={}},i.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var e=this.layout.options.getSortData,t=this.layout._sorters;for(var i in e){var n=t[i];this.sortData[i]=n(this.element,this)}}};var o=i.destroy;return i.destroy=function(){o.apply(this,arguments),this.css({display:""})},t}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-mode",["get-size/get-size","outlayer/outlayer"],t):"object"==typeof module&&module.exports?module.exports=t(require("get-size"),require("outlayer")):(e.Isotope=e.Isotope||{},e.Isotope.LayoutMode=t(e.getSize,e.Outlayer))}(window,function(t,i){"use strict";function n(e){(this.isotope=e)&&(this.options=e.options[this.namespace],this.element=e.element,this.items=e.filteredItems,this.size=e.size)}var o=n.prototype;return["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout","_getOption"].forEach(function(e){o[e]=function(){return i.prototype[e].apply(this.isotope,arguments)}}),o.needsVerticalResizeLayout=function(){var e=t(this.isotope.element);return this.isotope.size&&e&&e.innerHeight!=this.isotope.size.innerHeight},o._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},o.getColumnWidth=function(){this.getSegmentSize("column","Width")},o.getRowHeight=function(){this.getSegmentSize("row","Height")},o.getSegmentSize=function(e,t){var i=e+t,n="outer"+t;if(this._getMeasurement(i,n),!this[i]){var o=this.getFirstItemSize();this[i]=o&&o[n]||this.isotope.size["inner"+t]}},o.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},o.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},o.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(e,t){function i(){n.apply(this,arguments)}return(i.prototype=Object.create(o)).constructor=i,t&&(i.options=t),n.modes[i.prototype.namespace=e]=i},n}),function(e,t){"function"==typeof define&&define.amd?define("masonry-layout/masonry",["outlayer/outlayer","get-size/get-size"],t):"object"==typeof module&&module.exports?module.exports=t(require("outlayer"),require("get-size")):e.Masonry=t(e.Outlayer,e.getSize)}(window,function(e,u){var t=e.create("masonry");t.compatOptions.fitWidth="isFitWidth";var i=t.prototype;return i._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var e=0;e<this.cols;e++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},i.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var e=this.items[0],t=e&&e.element;this.columnWidth=t&&u(t).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,n=this.containerWidth+this.gutter,o=n/i,r=i-n%i;o=Math[r&&r<1?"round":"floor"](o),this.cols=Math.max(o,1)},i.getContainerWidth=function(){var e=this._getOption("fitWidth")?this.element.parentNode:this.element,t=u(e);this.containerWidth=t&&t.innerWidth},i._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth%this.columnWidth,i=Math[t&&t<1?"round":"ceil"](e.size.outerWidth/this.columnWidth);i=Math.min(i,this.cols);for(var n=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](i,e),o={x:this.columnWidth*n.col,y:n.y},r=n.y+e.size.outerHeight,s=i+n.col,a=n.col;a<s;a++)this.colYs[a]=r;return o},i._getTopColPosition=function(e){var t=this._getTopColGroup(e),i=Math.min.apply(Math,t);return{col:t.indexOf(i),y:i}},i._getTopColGroup=function(e){if(e<2)return this.colYs;for(var t=[],i=this.cols+1-e,n=0;n<i;n++)t[n]=this._getColGroupY(n,e);return t},i._getColGroupY=function(e,t){if(t<2)return this.colYs[e];var i=this.colYs.slice(e,e+t);return Math.max.apply(Math,i)},i._getHorizontalColPosition=function(e,t){var i=this.horizontalColIndex%this.cols;i=1<e&&i+e>this.cols?0:i;var n=t.size.outerWidth&&t.size.outerHeight;return this.horizontalColIndex=n?i+e:this.horizontalColIndex,{col:i,y:this._getColGroupY(i,e)}},i._manageStamp=function(e){var t=u(e),i=this._getElementOffset(e),n=this._getOption("originLeft")?i.left:i.right,o=n+t.outerWidth,r=Math.floor(n/this.columnWidth);r=Math.max(0,r);var s=Math.floor(o/this.columnWidth);s-=o%this.columnWidth?0:1,s=Math.min(this.cols-1,s);for(var a=(this._getOption("originTop")?i.top:i.bottom)+t.outerHeight,l=r;l<=s;l++)this.colYs[l]=Math.max(a,this.colYs[l])},i._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var e={height:this.maxY};return this._getOption("fitWidth")&&(e.width=this._getContainerFitWidth()),e},i._getContainerFitWidth=function(){for(var e=0,t=this.cols;--t&&0===this.colYs[t];)e++;return(this.cols-e)*this.columnWidth-this.gutter},i.needsResizeLayout=function(){var e=this.containerWidth;return this.getContainerWidth(),e!=this.containerWidth},t}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/masonry",["../layout-mode","masonry-layout/masonry"],t):"object"==typeof module&&module.exports?module.exports=t(require("../layout-mode"),require("masonry-layout")):t(e.Isotope.LayoutMode,e.Masonry)}(window,function(e,t){"use strict";var i=e.create("masonry"),n=i.prototype,o={_getElementOffset:!0,layout:!0,_getMeasurement:!0};for(var r in t.prototype)o[r]||(n[r]=t.prototype[r]);var s=n.measureColumns;n.measureColumns=function(){this.items=this.isotope.filteredItems,s.call(this)};var a=n._getOption;return n._getOption=function(e){return"fitWidth"==e?void 0!==this.options.isFitWidth?this.options.isFitWidth:this.options.fitWidth:a.apply(this.isotope,arguments)},i}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/fit-rows",["../layout-mode"],t):"object"==typeof exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("fitRows"),i=t.prototype;return i._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},i._getItemLayoutPosition=function(e){e.getSize();var t=e.size.outerWidth+this.gutter,i=this.isotope.size.innerWidth+this.gutter;0!==this.x&&t+this.x>i&&(this.x=0,this.y=this.maxY);var n={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+e.size.outerHeight),this.x+=t,n},i._getContainerSize=function(){return{height:this.maxY}},t}),function(e,t){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/vertical",["../layout-mode"],t):"object"==typeof module&&module.exports?module.exports=t(require("../layout-mode")):t(e.Isotope.LayoutMode)}(window,function(e){"use strict";var t=e.create("vertical",{horizontalAlignment:0}),i=t.prototype;return i._resetLayout=function(){this.y=0},i._getItemLayoutPosition=function(e){e.getSize();var t=(this.isotope.size.innerWidth-e.size.outerWidth)*this.options.horizontalAlignment,i=this.y;return this.y+=e.size.outerHeight,{x:t,y:i}},i._getContainerSize=function(){return{height:this.y}},t}),function(s,a){"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","desandro-matches-selector/matches-selector","fizzy-ui-utils/utils","isotope-layout/js/item","isotope-layout/js/layout-mode","isotope-layout/js/layout-modes/masonry","isotope-layout/js/layout-modes/fit-rows","isotope-layout/js/layout-modes/vertical"],function(e,t,i,n,o,r){return a(s,e,t,i,n,o,r)}):"object"==typeof module&&module.exports?module.exports=a(s,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("isotope-layout/js/item"),require("isotope-layout/js/layout-mode"),require("isotope-layout/js/layout-modes/masonry"),require("isotope-layout/js/layout-modes/fit-rows"),require("isotope-layout/js/layout-modes/vertical")):s.Isotope=a(s,s.Outlayer,s.getSize,s.matchesSelector,s.fizzyUIUtils,s.Isotope.Item,s.Isotope.LayoutMode)}(window,function(e,i,t,n,r,o,s){var a=e.jQuery,l=String.prototype.trim?function(e){return e.trim()}:function(e){return e.replace(/^\s+|\s+$/g,"")},u=i.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});u.Item=o,u.LayoutMode=s;var c=u.prototype;c._create=function(){for(var e in this.itemGUID=0,this._sorters={},this._getSorters(),i.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"],s.modes)this._initLayoutMode(e)},c.reloadItems=function(){this.itemGUID=0,i.prototype.reloadItems.call(this)},c._itemize=function(){for(var e=i.prototype._itemize.apply(this,arguments),t=0;t<e.length;t++){e[t].id=this.itemGUID++}return this._updateItemsSortData(e),e},c._initLayoutMode=function(e){var t=s.modes[e],i=this.options[e]||{};this.options[e]=t.options?r.extend(t.options,i):i,this.modes[e]=new t(this)},c.layout=function(){this._isLayoutInited||!this._getOption("initLayout")?this._layout():this.arrange()},c._layout=function(){var e=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,e),this._isLayoutInited=!0},c.arrange=function(e){this.option(e),this._getIsInstant();var t=this._filter(this.items);this.filteredItems=t.matches,this._bindArrangeComplete(),this._isInstant?this._noTransition(this._hideReveal,[t]):this._hideReveal(t),this._sort(),this._layout()},c._init=c.arrange,c._hideReveal=function(e){this.reveal(e.needReveal),this.hide(e.needHide)},c._getIsInstant=function(){var e=this._getOption("layoutInstant"),t=void 0!==e?e:!this._isLayoutInited;return this._isInstant=t},c._bindArrangeComplete=function(){var e,t,i,n=this;function o(){e&&t&&i&&n.dispatchEvent("arrangeComplete",null,[n.filteredItems])}this.once("layoutComplete",function(){e=!0,o()}),this.once("hideComplete",function(){t=!0,o()}),this.once("revealComplete",function(){i=!0,o()})},c._filter=function(e){var t=this.options.filter;t=t||"*";for(var i=[],n=[],o=[],r=this._getFilterTest(t),s=0;s<e.length;s++){var a=e[s];if(!a.isIgnored){var l=r(a);l&&i.push(a),l&&a.isHidden?n.push(a):l||a.isHidden||o.push(a)}}return{matches:i,needReveal:n,needHide:o}},c._getFilterTest=function(t){return a&&this.options.isJQueryFiltering?function(e){return a(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return n(e.element,t)}},c.updateSortData=function(e){var t;t=e?(e=r.makeArray(e),this.getItems(e)):this.items,this._getSorters(),this._updateItemsSortData(t)},c._getSorters=function(){var e=this.options.getSortData;for(var t in e){var i=e[t];this._sorters[t]=d(i)}},c._updateItemsSortData=function(e){for(var t=e&&e.length,i=0;t&&i<t;i++){e[i].updateSortData()}};var d=function(e){if("string"!=typeof e)return e;var t=l(e).split(" "),i=t[0],n=i.match(/^\[(.+)\]$/),o=function(t,i){return t?function(e){return e.getAttribute(t)}:function(e){var t=e.querySelector(i);return t&&t.textContent}}(n&&n[1],i),r=u.sortDataParsers[t[1]];return e=r?function(e){return e&&r(o(e))}:function(e){return e&&o(e)}};u.sortDataParsers={parseInt:function(e){return parseInt(e,10)},parseFloat:function(e){return parseFloat(e)}},c._sort=function(){if(this.options.sortBy){var e=r.makeArray(this.options.sortBy);this._getIsSameSortBy(e)||(this.sortHistory=e.concat(this.sortHistory));var t=function(s,a){return function(e,t){for(var i=0;i<s.length;i++){var n=s[i],o=e.sortData[n],r=t.sortData[n];if(r<o||o<r)return(r<o?1:-1)*((void 0!==a[n]?a[n]:a)?1:-1)}return 0}}(this.sortHistory,this.options.sortAscending);this.filteredItems.sort(t)}},c._getIsSameSortBy=function(e){for(var t=0;t<e.length;t++)if(e[t]!=this.sortHistory[t])return!1;return!0},c._mode=function(){var e=this.options.layoutMode,t=this.modes[e];if(!t)throw new Error("No layout mode: "+e);return t.options=this.options[e],t},c._resetLayout=function(){i.prototype._resetLayout.call(this),this._mode()._resetLayout()},c._getItemLayoutPosition=function(e){return this._mode()._getItemLayoutPosition(e)},c._manageStamp=function(e){this._mode()._manageStamp(e)},c._getContainerSize=function(){return this._mode()._getContainerSize()},c.needsResizeLayout=function(){return this._mode().needsResizeLayout()},c.appended=function(e){var t=this.addItems(e);if(t.length){var i=this._filterRevealAdded(t);this.filteredItems=this.filteredItems.concat(i)}},c.prepended=function(e){var t=this._itemize(e);if(t.length){this._resetLayout(),this._manageStamps();var i=this._filterRevealAdded(t);this.layoutItems(this.filteredItems),this.filteredItems=i.concat(this.filteredItems),this.items=t.concat(this.items)}},c._filterRevealAdded=function(e){var t=this._filter(e);return this.hide(t.needHide),this.reveal(t.matches),this.layoutItems(t.matches,!0),t.matches},c.insert=function(e){var t=this.addItems(e);if(t.length){var i,n,o=t.length;for(i=0;i<o;i++)n=t[i],this.element.appendChild(n.element);var r=this._filter(t).matches;for(i=0;i<o;i++)t[i].isLayoutInstant=!0;for(this.arrange(),i=0;i<o;i++)delete t[i].isLayoutInstant;this.reveal(r)}};var p=c.remove;return c.remove=function(e){e=r.makeArray(e);var t=this.getItems(e);p.call(this,e);for(var i=t&&t.length,n=0;i&&n<i;n++){var o=t[n];r.removeFrom(this.filteredItems,o)}},c.shuffle=function(){for(var e=0;e<this.items.length;e++){this.items[e].sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},c._noTransition=function(e,t){var i=this.options.transitionDuration;this.options.transitionDuration=0;var n=e.apply(this,t);return this.options.transitionDuration=i,n},c.getFilteredItemElements=function(){return this.filteredItems.map(function(e){return e.element})},u}),function(){function t(e,t){return function(){return e.apply(t,arguments)}}var n,e,i,l,o,s=[].indexOf||function(e){for(var t=0,i=this.length;t<i;t++)if(t in this&&this[t]===e)return t;return-1};function r(){}function a(){this.keys=[],this.values=[]}function u(){"undefined"!=typeof console&&null!==console&&console.warn("MutationObserver is not supported by your browser."),"undefined"!=typeof console&&null!==console&&console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.")}function c(e){null==e&&(e={}),this.scrollCallback=t(this.scrollCallback,this),this.scrollHandler=t(this.scrollHandler,this),this.resetAnimation=t(this.resetAnimation,this),this.start=t(this.start,this),this.scrolled=!0,this.config=this.util().extend(e,this.defaults),null!=e.scrollContainer&&(this.config.scrollContainer=document.querySelector(e.scrollContainer)),this.animationNameCache=new i,this.wowEvent=this.util().createEvent(this.config.boxClass)}r.prototype.extend=function(e,t){var i,n;for(i in t)n=t[i],null==e[i]&&(e[i]=n);return e},r.prototype.isMobile=function(e){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(e)},r.prototype.createEvent=function(e,t,i,n){var o;return null==t&&(t=!1),null==i&&(i=!1),null==n&&(n=null),null!=document.createEvent?(o=document.createEvent("CustomEvent")).initCustomEvent(e,t,i,n):null!=document.createEventObject?(o=document.createEventObject()).eventType=e:o.eventName=e,o},r.prototype.emitEvent=function(e,t){return null!=e.dispatchEvent?e.dispatchEvent(t):t in(null!=e)?e[t]():"on"+t in(null!=e)?e["on"+t]():void 0},r.prototype.addEvent=function(e,t,i){return null!=e.addEventListener?e.addEventListener(t,i,!1):null!=e.attachEvent?e.attachEvent("on"+t,i):e[t]=i},r.prototype.removeEvent=function(e,t,i){return null!=e.removeEventListener?e.removeEventListener(t,i,!1):null!=e.detachEvent?e.detachEvent("on"+t,i):delete e[t]},r.prototype.innerHeight=function(){return"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight},e=r,i=this.WeakMap||this.MozWeakMap||(a.prototype.get=function(e){var t,i,n,o;for(t=i=0,n=(o=this.keys).length;i<n;t=++i)if(o[t]===e)return this.values[t]},a.prototype.set=function(e,t){var i,n,o,r;for(i=n=0,o=(r=this.keys).length;n<o;i=++n)if(r[i]===e)return void(this.values[i]=t);return this.keys.push(e),this.values.push(t)},i=a),n=this.MutationObserver||this.WebkitMutationObserver||this.MozMutationObserver||(u.notSupported=!0,u.prototype.observe=function(){},n=u),l=this.getComputedStyle||function(i,e){return this.getPropertyValue=function(e){var t;return"float"===e&&(e="styleFloat"),o.test(e)&&e.replace(o,function(e,t){return t.toUpperCase()}),(null!=(t=i.currentStyle)?t[e]:void 0)||null},this},o=/(\-([a-z]){1})/g,this.WOW=(c.prototype.defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0,callback:null,scrollContainer:null},c.prototype.init=function(){var e;return this.element=window.document.documentElement,"interactive"===(e=document.readyState)||"complete"===e?this.start():this.util().addEvent(document,"DOMContentLoaded",this.start),this.finished=[]},c.prototype.start=function(){var o,e,t,i,s;if(this.stopped=!1,this.boxes=function(){var e,t,i,n;for(n=[],e=0,t=(i=this.element.querySelectorAll("."+this.config.boxClass)).length;e<t;e++)o=i[e],n.push(o);return n}.call(this),this.all=function(){var e,t,i,n;for(n=[],e=0,t=(i=this.boxes).length;e<t;e++)o=i[e],n.push(o);return n}.call(this),this.boxes.length)if(this.disabled())this.resetStyle();else for(e=0,t=(i=this.boxes).length;e<t;e++)o=i[e],this.applyStyle(o,!0);if(this.disabled()||(this.util().addEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),this.util().addEvent(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live)return new n((s=this,function(e){var t,i,o,r,n;for(n=[],t=0,i=e.length;t<i;t++)r=e[t],n.push(function(){var e,t,i,n;for(n=[],e=0,t=(i=r.addedNodes||[]).length;e<t;e++)o=i[e],n.push(this.doSync(o));return n}.call(s));return n})).observe(document.body,{childList:!0,subtree:!0})},c.prototype.stop=function(){if(this.stopped=!0,this.util().removeEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),this.util().removeEvent(window,"resize",this.scrollHandler),null!=this.interval)return clearInterval(this.interval)},c.prototype.sync=function(e){if(n.notSupported)return this.doSync(this.element)},c.prototype.doSync=function(e){var t,i,n,o,r;if(null==e&&(e=this.element),1===e.nodeType){for(r=[],i=0,n=(o=(e=e.parentNode||e).querySelectorAll("."+this.config.boxClass)).length;i<n;i++)t=o[i],s.call(this.all,t)<0?(this.boxes.push(t),this.all.push(t),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(t,!0),r.push(this.scrolled=!0)):r.push(void 0);return r}},c.prototype.show=function(e){return this.applyStyle(e),e.className=e.className+" "+this.config.animateClass,null!=this.config.callback&&this.config.callback(e),this.util().emitEvent(e,this.wowEvent),this.util().addEvent(e,"animationend",this.resetAnimation),this.util().addEvent(e,"oanimationend",this.resetAnimation),this.util().addEvent(e,"webkitAnimationEnd",this.resetAnimation),this.util().addEvent(e,"MSAnimationEnd",this.resetAnimation),e},c.prototype.applyStyle=function(e,t){var i,n,o,r;return n=e.getAttribute("data-wow-duration"),i=e.getAttribute("data-wow-delay"),o=e.getAttribute("data-wow-iteration"),this.animate((r=this,function(){return r.customStyle(e,t,n,i,o)}))},c.prototype.animate="requestAnimationFrame"in window?function(e){return window.requestAnimationFrame(e)}:function(e){return e()},c.prototype.resetStyle=function(){var e,t,i,n,o;for(o=[],t=0,i=(n=this.boxes).length;t<i;t++)e=n[t],o.push(e.style.visibility="visible");return o},c.prototype.resetAnimation=function(e){var t;if(0<=e.type.toLowerCase().indexOf("animationend"))return(t=e.target||e.srcElement).className=t.className.replace(this.config.animateClass,"").trim()},c.prototype.customStyle=function(e,t,i,n,o){return t&&this.cacheAnimationName(e),e.style.visibility=t?"hidden":"visible",i&&this.vendorSet(e.style,{animationDuration:i}),n&&this.vendorSet(e.style,{animationDelay:n}),o&&this.vendorSet(e.style,{animationIterationCount:o}),this.vendorSet(e.style,{animationName:t?"none":this.cachedAnimationName(e)}),e},c.prototype.vendors=["moz","webkit"],c.prototype.vendorSet=function(o,e){var r,t,s,a;for(r in t=[],e)s=e[r],o[""+r]=s,t.push(function(){var e,t,i,n;for(n=[],e=0,t=(i=this.vendors).length;e<t;e++)a=i[e],n.push(o[""+a+r.charAt(0).toUpperCase()+r.substr(1)]=s);return n}.call(this));return t},c.prototype.vendorCSS=function(e,t){var i,n,o,r,s,a;for(r=(s=l(e)).getPropertyCSSValue(t),i=0,n=(o=this.vendors).length;i<n;i++)a=o[i],r=r||s.getPropertyCSSValue("-"+a+"-"+t);return r},c.prototype.animationName=function(t){var i;try{i=this.vendorCSS(t,"animation-name").cssText}catch(e){i=l(t).getPropertyValue("animation-name")}return"none"===i?"":i},c.prototype.cacheAnimationName=function(e){return this.animationNameCache.set(e,this.animationName(e))},c.prototype.cachedAnimationName=function(e){return this.animationNameCache.get(e)},c.prototype.scrollHandler=function(){return this.scrolled=!0},c.prototype.scrollCallback=function(){var o;if(this.scrolled&&(this.scrolled=!1,this.boxes=function(){var e,t,i,n;for(n=[],e=0,t=(i=this.boxes).length;e<t;e++)(o=i[e])&&(this.isVisible(o)?this.show(o):n.push(o));return n}.call(this),!this.boxes.length&&!this.config.live))return this.stop()},c.prototype.offsetTop=function(e){for(var t;void 0===e.offsetTop;)e=e.parentNode;for(t=e.offsetTop;e=e.offsetParent;)t+=e.offsetTop;return t},c.prototype.isVisible=function(e){var t,i,n,o,r;return i=e.getAttribute("data-wow-offset")||this.config.offset,o=(r=this.config.scrollContainer&&this.config.scrollContainer.scrollTop||window.pageYOffset)+Math.min(this.element.clientHeight,this.util().innerHeight())-i,t=(n=this.offsetTop(e))+e.clientHeight,n<=o&&r<=t},c.prototype.util=function(){return null!=this._util?this._util:this._util=new e},c.prototype.disabled=function(){return!this.config.mobile&&this.util().isMobile(navigator.userAgent)},c)}.call(this),function(t,i){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(e){return i(e,t,t.document)}):"object"==typeof module&&module.exports?module.exports=i(require("jquery"),t,t.document):i(jQuery,t,t.document)}("undefined"!=typeof window?window:this,function(o,r,s,t){"use strict";var u,c,d,p,f,h,m=[],g=[],v=[],y=[],w=0,a=0,b=1,x=!1,T=o(r),S=T.scrollTop(),C=!1,k=!1,E=!1,I=!1,A=[],$=(new Date).getTime(),l=!0,L=!1,z=0,_="onwheel"in s?"wheel":s.onmousewheel!==t?"mousewheel":"DOMMouseScroll",O={section:".section",sectionName:"section-name",interstitialSection:"",easing:"easeOutExpo",scrollSpeed:1100,offset:0,scrollbars:!0,target:"html,body",standardScrollElements:!1,setHeights:!0,overflowScroll:!0,updateHash:!0,touchScroll:!0,before:function(){},after:function(){},afterResize:function(){},afterRender:function(){}};function H(){return r.innerHeight+O.offset}function D(e,t,i,n){if(a===e&&(i=!1),!0===I)return!0;if(g[e]){if(!(C=!1)===l&&(l=!1,O.afterRender()),i&&"function"==typeof O.before&&!1===O.before(e,v))return!0;if(b=1,z=e?m[e]:0,!1===l&&e<a&&!1===n&&y[e]&&(d=H(),b=parseInt(v[e].outerHeight()/d),z=parseInt(m[e])+(v[e].outerHeight()-d)),O.updateHash&&O.sectionName&&(!0!==l||0!==e))if(history.pushState)try{history.replaceState(null,null,g[e])}catch(e){r.console&&console.warn("Scrollify warning: Page must be hosted to manipulate the hash value.")}else r.location.hash=g[e];if(a=e,t)o(O.target).stop().scrollTop(z),i&&O.after(e,v);else{if(k=!0,o().velocity?o(O.target).stop().velocity("scroll",{duration:O.scrollSpeed,easing:O.easing,offset:z,mobileHA:!1}):o(O.target).stop().animate({scrollTop:z},O.scrollSpeed,O.easing),r.location.hash.length&&O.sectionName&&r.console)try{o(r.location.hash).length&&console.warn("Scrollify warning: ID matches hash value - this will cause the page to anchor.")}catch(e){}o(O.target).promise().done(function(){l=k=!1,i&&O.after(e,v)})}}}function j(o){function e(e){for(var t=0,i=o.slice(Math.max(o.length-e,1)),n=0;n<i.length;n++)t+=i[n];return Math.ceil(t/e)}var t=e(10);return e(70)<=t}function e(e){function t(e){o().velocity?o(O.target).stop().velocity("scroll",{duration:O.scrollSpeed,easing:O.easing,offset:e,mobileHA:!1}):o(O.target).stop().animate({scrollTop:e},O.scrollSpeed,O.easing)}function i(e){e&&(S=T.scrollTop());var t=O.section;y=[],O.interstitialSection.length&&(t+=","+O.interstitialSection),!1===O.scrollbars&&(O.overflowScroll=!1),d=H(),o(t).each(function(e){var t=o(this);O.setHeights?t.is(O.interstitialSection)?y[e]=!1:t.css("height","auto").outerHeight()<d||"hidden"===t.css("overflow")?(t.css({height:d}),y[e]=!1):(t.css({height:t.outerHeight()}),O.overflowScroll?y[e]=!0:y[e]=!1):t.outerHeight()<d||!1===O.overflowScroll?y[e]=!1:y[e]=!0}),e&&T.scrollTop(S)}function n(e){var i=O.section;O.interstitialSection.length&&(i+=","+O.interstitialSection),m=[],g=[],v=[],o(i).each(function(e){var t=o(this);m[e]=0<e?parseInt(t.offset().top)+O.offset:parseInt(t.offset().top),O.sectionName&&t.data(O.sectionName)?g[e]="#"+t.data(O.sectionName).toString().replace(/ /g,"-"):!1===t.is(O.interstitialSection)?g[e]="#"+(e+1):(g[e]="#",e===o(i).length-1&&1<e&&(m[e]=m[e-1]+(parseInt(o(o(i)[e-1]).outerHeight())-parseInt(o(r).height()))+parseInt(t.outerHeight()))),v[e]=t;try{o(g[e]).length&&r.console&&console.warn("Scrollify warning: Section names can't match IDs - this will cause the browser to anchor.")}catch(e){}r.location.hash===g[e]&&(w=e,x=!0)}),!0===e&&D(w,!1,!1,!1)}function a(){return!y[w]||!((S=T.scrollTop())>parseInt(m[w]))}function l(){return!y[w]||(S=T.scrollTop(),d=H(),!(S<parseInt(m[w])+(v[w].outerHeight()-d)-28))}L=!0,o.easing.easeOutExpo=function(e,t,i,n,o){return t==o?i+n:n*(1-Math.pow(2,-10*t/o))+i},f={touches:{touchstart:{y:-1,x:-1},touchmove:{y:-1,x:-1},touchend:!(p={handleMousedown:function(){if(!0===I)return!0;E=C=!1},handleMouseup:function(){if(!0===I)return!0;C=!0,E&&p.calculateNearest(!1,!0)},handleScroll:function(){if(!0===I)return!0;u&&clearTimeout(u),u=setTimeout(function(){if(!(E=!0)===C)return!1;C=!1,p.calculateNearest(!1,!0)},200)},calculateNearest:function(e,t){S=T.scrollTop();for(var i,n=1,o=m.length,r=0,s=Math.abs(m[0]-S);n<o;n++)(i=Math.abs(m[n]-S))<s&&(s=i,r=n);(l()&&w<r||a())&&D(w=r,e,t,!1)},wheelHandler:function(e){if(!0===I)return!0;if(O.standardScrollElements&&(o(e.target).is(O.standardScrollElements)||o(e.target).closest(O.standardScrollElements).length))return!0;y[w]||e.preventDefault();var t,i=(new Date).getTime();t=(e=e||r.event).originalEvent?e.originalEvent.wheelDelta||-e.originalEvent.deltaY||-e.originalEvent.detail:e.wheelDelta||-e.deltaY||-e.detail;var n=Math.max(-1,Math.min(1,t));if(149<A.length&&A.shift(),A.push(Math.abs(t)),200<i-$&&(A=[]),$=i,k)return e.preventDefault(),!1;if(n<0){if(w<m.length-1&&l()){if(!j(A))return!1;e.preventDefault(),D(++w,!(k=!0),!0,!1)}}else if(0<n&&0<w&&a()){if(!j(A))return!1;e.preventDefault(),D(--w,!(k=!0),!0,!1)}},keyHandler:function(e){return!0===I||!1===s.activeElement.readOnly||(!(!O.standardScrollElements||!o(e.target).is(O.standardScrollElements)&&!o(e.target).closest(O.standardScrollElements).length)||!0!==k&&void(38==e.keyCode||33==e.keyCode?0<w&&a()&&(e.preventDefault(),D(--w,!1,!0,!1)):40!=e.keyCode&&34!=e.keyCode||w<m.length-1&&l()&&(e.preventDefault(),D(++w,!1,!0,!1))))},init:function(){O.scrollbars?(T.on("mousedown",p.handleMousedown),T.on("mouseup",p.handleMouseup),T.on("scroll",p.handleScroll)):o("body").css({overflow:"hidden"}),r.addEventListener(_,p.wheelHandler,{passive:!1}),T.on("keydown",p.keyHandler)}}),direction:"undetermined"},options:{distance:30,timeGap:800,timeStamp:(new Date).getTime()},touchHandler:function(e){if(!0===I)return!0;if(O.standardScrollElements&&(o(e.target).is(O.standardScrollElements)||o(e.target).closest(O.standardScrollElements).length))return!0;var t;if(void 0!==e&&void 0!==e.touches)switch(t=e.touches[0],e.type){case"touchstart":f.touches.touchstart.y=t.pageY,f.touches.touchmove.y=-1,f.touches.touchstart.x=t.pageX,f.touches.touchmove.x=-1,f.options.timeStamp=(new Date).getTime(),f.touches.touchend=!1;case"touchmove":f.touches.touchmove.y=t.pageY,f.touches.touchmove.x=t.pageX,f.touches.touchstart.y!==f.touches.touchmove.y&&Math.abs(f.touches.touchstart.y-f.touches.touchmove.y)>Math.abs(f.touches.touchstart.x-f.touches.touchmove.x)&&(e.preventDefault(),f.touches.direction="y",f.options.timeStamp+f.options.timeGap<(new Date).getTime()&&0==f.touches.touchend&&(f.touches.touchend=!0,-1<f.touches.touchstart.y&&Math.abs(f.touches.touchmove.y-f.touches.touchstart.y)>f.options.distance&&(f.touches.touchstart.y<f.touches.touchmove.y?f.up():f.down())));break;case"touchend":!1===f.touches[e.type]&&(f.touches[e.type]=!0,-1<f.touches.touchstart.y&&-1<f.touches.touchmove.y&&"y"===f.touches.direction&&(Math.abs(f.touches.touchmove.y-f.touches.touchstart.y)>f.options.distance&&(f.touches.touchstart.y<f.touches.touchmove.y?f.up():f.down()),f.touches.touchstart.y=-1,f.touches.touchstart.x=-1,f.touches.direction="undetermined"))}},down:function(){w<m.length&&(l()&&w<m.length-1?D(++w,!1,!0,!1):(d=H(),Math.floor(v[w].height()/d)>b?(t(parseInt(m[w])+d*b),b+=1):t(parseInt(m[w])+(v[w].outerHeight()-d))))},up:function(){0<=w&&(a()&&0<w?D(--w,!1,!0,!1):2<b?(d=H(),b-=1,t(parseInt(m[w])+d*b)):(b=1,t(parseInt(m[w]))))},init:function(){if(s.addEventListener&&O.touchScroll){var e={passive:!1};s.addEventListener("touchstart",f.touchHandler,e),s.addEventListener("touchmove",f.touchHandler,e),s.addEventListener("touchend",f.touchHandler,e)}}},h={refresh:function(e,t){clearTimeout(c),c=setTimeout(function(){i(!0),n(t,!1),e&&O.afterResize()},400)},handleUpdate:function(){h.refresh(!1,!1)},handleResize:function(){h.refresh(!0,!0)},handleOrientation:function(){h.refresh(!0,!0)}},O=o.extend(O,e),i(!1),n(!1,!0),!0===x?D(w,!1,!0,!0):setTimeout(function(){p.calculateNearest(!0,!1)},200),m.length&&(p.init(),f.init(),T.on("resize",h.handleResize),s.addEventListener&&r.addEventListener("orientationchange",h.handleOrientation,!1))}function i(e,t){for(var i=g.length;0<=i;i--)"string"==typeof e?g[i]===e&&D(w=i,t,!0,!0):i===e&&D(w=i,t,!0,!0)}return e.move=function(e){if(e===t)return!1;e.originalEvent&&(e=o(this).attr("href")),i(e,!1)},e.instantMove=function(e){if(e===t)return!1;i(e,!0)},e.next=function(){w<g.length&&D(w+=1,!1,!0,!0)},e.previous=function(){0<w&&D(w-=1,!1,!0,!0)},e.instantNext=function(){w<g.length&&D(w+=1,!0,!0,!0)},e.instantPrevious=function(){0<w&&D(w-=1,!0,!0,!0)},e.destroy=function(){if(!L)return!1;O.setHeights&&o(O.section).each(function(){o(this).css("height","auto")}),T.off("resize",h.handleResize),O.scrollbars&&(T.off("mousedown",p.handleMousedown),T.off("mouseup",p.handleMouseup),T.off("scroll",p.handleScroll)),r.removeEventListener(_,p.wheelHandler),T.off("keydown",p.keyHandler),s.addEventListener&&O.touchScroll&&(s.removeEventListener("touchstart",f.touchHandler,!1),s.removeEventListener("touchmove",f.touchHandler,!1),s.removeEventListener("touchend",f.touchHandler,!1)),m=[],g=[],v=[],y=[]},e.update=function(){if(!L)return!1;h.handleUpdate()},e.current=function(){return v[w]},e.currentIndex=function(){return w},e.disable=function(){I=!0},e.enable=function(){I=!1,L&&p.calculateNearest(!1,!1)},e.isDisabled=function(){return I},e.setOptions=function(e){if(!L)return!1;"object"==typeof e?(O=o.extend(O,e),h.handleUpdate()):r.console&&console.warn("Scrollify warning: setOptions expects an object.")},o.scrollify=e}),function(e,t){if("function"==typeof define&&define.amd)define(["exports"],t);else if("undefined"!=typeof exports)t(exports);else{var i={};t(i),e.bodyScrollLock=i}}(this,function(e){"use strict";function o(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}Object.defineProperty(e,"__esModule",{value:!0});var r=!1;if("undefined"!=typeof window){var t={get passive(){r=!0}};window.addEventListener("testPassive",null,t),window.removeEventListener("testPassive",null,t)}function s(t){return u.some(function(e){return!(!e.options.allowTouchMove||!e.options.allowTouchMove(t))})}function a(e){var t=e||window.event;return!!s(t.target)||(1<t.touches.length||(t.preventDefault&&t.preventDefault(),!1))}function i(){setTimeout(function(){void 0!==f&&(document.body.style.paddingRight=f,f=void 0),void 0!==p&&(document.body.style.overflow=p,p=void 0)})}var l="undefined"!=typeof window&&window.navigator&&window.navigator.platform&&/iP(ad|hone|od)/.test(window.navigator.platform),u=[],c=!1,d=-1,p=void 0,f=void 0;e.disableBodyScroll=function(t,e){if(l){if(!t)return void console.error("disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.");if(t&&!u.some(function(e){return e.targetElement===t})){var i={targetElement:t,options:e||{}};u=[].concat(o(u),[i]),t.ontouchstart=function(e){1===e.targetTouches.length&&(d=e.targetTouches[0].clientY)},t.ontouchmove=function(e){1===e.targetTouches.length&&function(e,t){var i=e.targetTouches[0].clientY-d;s(e.target)||(t&&0===t.scrollTop&&0<i?a(e):function(e){return!!e&&e.scrollHeight-e.scrollTop<=e.clientHeight}(t)&&i<0?a(e):e.stopPropagation())}(e,t)},c||(document.addEventListener("touchmove",a,r?{passive:!1}:void 0),c=!0)}}else{!function(i){setTimeout(function(){if(void 0===f){var e=!!i&&!0===i.reserveScrollBarGap,t=window.innerWidth-document.documentElement.clientWidth;e&&0<t&&(f=document.body.style.paddingRight,document.body.style.paddingRight=t+"px")}void 0===p&&(p=document.body.style.overflow,document.body.style.overflow="hidden")})}(e);var n={targetElement:t,options:e||{}};u=[].concat(o(u),[n])}},e.clearAllBodyScrollLocks=function(){l?(u.forEach(function(e){e.targetElement.ontouchstart=null,e.targetElement.ontouchmove=null}),c&&(document.removeEventListener("touchmove",a,r?{passive:!1}:void 0),c=!1),u=[],d=-1):(i(),u=[])},e.enableBodyScroll=function(t){if(l){if(!t)return void console.error("enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.");t.ontouchstart=null,t.ontouchmove=null,u=u.filter(function(e){return e.targetElement!==t}),c&&0===u.length&&(document.removeEventListener("touchmove",a,r?{passive:!1}:void 0),c=!1)}else(u=u.filter(function(e){return e.targetElement!==t})).length||i()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5yZXNpemVPbkFwcHJvYWNoLjEuMC5taW4uanMiLCJqcXVlcnkuanMiLCJzbGljay5qcyIsImpxdWVyeS5tYWduaWZpYy1wb3B1cC5qcyIsImlzb3RvcGUucGtnZC5qcyIsIndvdy5qcyIsImpxdWVyeS5zY3JvbGxpZnkuanMiLCJib2R5U2Nyb2xsTG9jay5qcyJdLCJuYW1lcyI6WyJkaXN0VG9TcUVkZ2UiLCJkIiwiYyIsImEiLCJmIiwiZyIsInZ4IiwidnkiLCJ2bGVuZ3RoIiwiTWF0aCIsInNxcnQiLCJ2dXgiLCJ2dXkiLCJjb3NBIiwiY2VudHJlVG9TcUVkZ2UiLCJhYnMiLCJtb3VzZVRvU3F1YXJlRWRnZSIsImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJpc1dpbmRvdyIsIm9iaiIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImNvbmNhdCIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJjYWxsIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJub2RlVHlwZSIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJ0eXBlIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwibm9kZSIsImRvYyIsImkiLCJ2YWwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInZlcnNpb24iLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwib3B0aW9ucyIsIm5hbWUiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwidmFsdWUiLCJndWlkIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ1bmxvYWRIYW5kbGVyIiwic2V0RG9jdW1lbnQiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsIkRhdGUiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsImIiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidG9TZWxlY3RvciIsImpvaW4iLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImtleSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwidG1wIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwiPiIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiYnlFbGVtZW50IiwiZGlycnVuc1VuaXF1ZSIsImJ5U2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInJlYWR5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsIm9iamVjdCIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyZSIsImxvY2tlZCIsIm9uY2UiLCJmaXJlZCIsImZpcmluZyIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJtZW1vcnkiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJtaWdodFRocm93IiwidGhhdCIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJ1cGRhdGVGdW5jIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInJlbWFpbmluZyIsIm1hc3RlciIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsInN3YXAiLCJvbGQiLCJzdHlsZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsImRpc3BsYXkiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiYm9keSIsImhpZGUiLCJ0b2dnbGUiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImRpdiIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJhdHRhY2hlZCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJlcnIiLCJzYWZlQWN0aXZlRWxlbWVudCIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwidHJpZ2dlciIsIkV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsInQiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInBpeGVsUG9zaXRpb25WYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInNjcm9sbGJveFNpemVWYWwiLCJwaXhlbEJveFN0eWxlc1ZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsImNvbnRhaW5lciIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJkaXZTdHlsZSIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsIndpZHRoIiwicG9zaXRpb24iLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImdyaWRBcmVhIiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3RhcnQiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTdGFydCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJvcHQiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiYmluZCIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwiZG9BbmltYXRpb24iLCJvcHRhbGwiLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJzIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRleHQgc2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsInJlcXVpcmUiLCJpbnN0YW5jZVVpZCIsIlNsaWNrIiwiZWxlbWVudCIsImRhdGFTZXR0aW5ncyIsImRlZmF1bHRzIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYXBwZW5kQXJyb3dzIiwiYXBwZW5kRG90cyIsImFycm93cyIsImFzTmF2Rm9yIiwicHJldkFycm93IiwibmV4dEFycm93IiwiYXV0b3BsYXkiLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwic2xpZGVyIiwiZG90cyIsImRvdHNDbGFzcyIsImRyYWdnYWJsZSIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiZm9jdXNPbkNoYW5nZSIsImluZmluaXRlIiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicm93cyIsInJ0bCIsInNsaWRlIiwic2xpZGVzUGVyUm93Iiwic2xpZGVzVG9TaG93Iiwic2xpZGVzVG9TY3JvbGwiLCJzd2lwZSIsInN3aXBlVG9TbGlkZSIsInRvdWNoTW92ZSIsInRvdWNoVGhyZXNob2xkIiwidXNlQ1NTIiwidXNlVHJhbnNmb3JtIiwidmFyaWFibGVXaWR0aCIsInZlcnRpY2FsIiwidmVydGljYWxTd2lwaW5nIiwid2FpdEZvckFuaW1hdGUiLCJpbml0aWFscyIsImFuaW1hdGluZyIsImRyYWdnaW5nIiwiYXV0b1BsYXlUaW1lciIsImN1cnJlbnREaXJlY3Rpb24iLCJjdXJyZW50TGVmdCIsImN1cnJlbnRTbGlkZSIsImRpcmVjdGlvbiIsIiRkb3RzIiwibGlzdFdpZHRoIiwibGlzdEhlaWdodCIsImxvYWRJbmRleCIsIiRuZXh0QXJyb3ciLCIkcHJldkFycm93Iiwic2Nyb2xsaW5nIiwic2xpZGVDb3VudCIsInNsaWRlV2lkdGgiLCIkc2xpZGVUcmFjayIsIiRzbGlkZXMiLCJzbGlkaW5nIiwic2xpZGVPZmZzZXQiLCJzd2lwZUxlZnQiLCJzd2lwaW5nIiwiJGxpc3QiLCJ0b3VjaE9iamVjdCIsInRyYW5zZm9ybXNFbmFibGVkIiwidW5zbGlja2VkIiwiYWN0aXZlQnJlYWtwb2ludCIsImFuaW1UeXBlIiwiYW5pbVByb3AiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRTZXR0aW5ncyIsImNzc1RyYW5zaXRpb25zIiwiZm9jdXNzZWQiLCJpbnRlcnJ1cHRlZCIsInBhdXNlZCIsInBvc2l0aW9uUHJvcCIsInJvd0NvdW50Iiwic2hvdWxkQ2xpY2siLCIkc2xpZGVyIiwiJHNsaWRlc0NhY2hlIiwidHJhbnNmb3JtVHlwZSIsInRyYW5zaXRpb25UeXBlIiwidmlzaWJpbGl0eUNoYW5nZSIsIndpbmRvd1dpZHRoIiwid2luZG93VGltZXIiLCJtb3pIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJhdXRvUGxheSIsImF1dG9QbGF5Q2xlYXIiLCJhdXRvUGxheUl0ZXJhdG9yIiwiY2hhbmdlU2xpZGUiLCJjbGlja0hhbmRsZXIiLCJzZWxlY3RIYW5kbGVyIiwic2V0UG9zaXRpb24iLCJzd2lwZUhhbmRsZXIiLCJkcmFnSGFuZGxlciIsImtleUhhbmRsZXIiLCJodG1sRXhwciIsInJlZ2lzdGVyQnJlYWtwb2ludHMiLCJhY3RpdmF0ZUFEQSIsImFyaWEtaGlkZGVuIiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsIm1hcmt1cCIsImFkZEJlZm9yZSIsInVubG9hZCIsInJlaW5pdCIsImFuaW1hdGVIZWlnaHQiLCJ0YXJnZXRIZWlnaHQiLCJvdXRlckhlaWdodCIsImFuaW1hdGVTbGlkZSIsInRhcmdldExlZnQiLCJhbmltUHJvcHMiLCJhbmltU3RhcnQiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsInNsaWNrIiwic2xpZGVIYW5kbGVyIiwidHJhbnNpdGlvbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsImFyaWEtZGlzYWJsZWQiLCJidWlsZERvdHMiLCJkb3QiLCJnZXREb3RDb3VudCIsImJ1aWxkT3V0Iiwic2V0dXBJbmZpbml0ZSIsInVwZGF0ZURvdHMiLCJzZXRTbGlkZUNsYXNzZXMiLCJidWlsZFJvd3MiLCJuZXdTbGlkZXMiLCJudW1PZlNsaWRlcyIsIm9yaWdpbmFsU2xpZGVzIiwic2xpZGVzUGVyU2VjdGlvbiIsInJvdyIsImNoZWNrUmVzcG9uc2l2ZSIsImZvcmNlVXBkYXRlIiwiYnJlYWtwb2ludCIsInRhcmdldEJyZWFrcG9pbnQiLCJyZXNwb25kVG9XaWR0aCIsInRyaWdnZXJCcmVha3BvaW50Iiwic2xpZGVyV2lkdGgiLCJpbm5lcldpZHRoIiwibWluIiwidW5zbGljayIsInJlZnJlc2giLCJkb250QW5pbWF0ZSIsImluZGV4T2Zmc2V0IiwiJHRhcmdldCIsImNoZWNrTmF2aWdhYmxlIiwibmF2aWdhYmxlcyIsInByZXZOYXZpZ2FibGUiLCJnZXROYXZpZ2FibGVJbmRleGVzIiwiY2xlYW5VcEV2ZW50cyIsImludGVycnVwdCIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwicmVzaXplIiwiY2xlYW5VcFJvd3MiLCJkZXN0cm95IiwiZmFkZVNsaWRlIiwic2xpZGVJbmRleCIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiJHNmIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInRhcmdldFNsaWRlIiwiY29lZiIsInZlcnRpY2FsT2Zmc2V0IiwiZmxvb3IiLCJvZmZzZXRMZWZ0Iiwib3V0ZXJXaWR0aCIsImdldE9wdGlvbiIsInNsaWNrR2V0T3B0aW9uIiwiaW5kZXhlcyIsImdldFNsaWNrIiwiZ2V0U2xpZGVDb3VudCIsInN3aXBlZFNsaWRlIiwiY2VudGVyT2Zmc2V0IiwiZ29UbyIsInNsaWNrR29UbyIsImNyZWF0aW9uIiwic2V0UHJvcHMiLCJzdGFydExvYWQiLCJsb2FkU2xpZGVyIiwiaW5pdGlhbGl6ZUV2ZW50cyIsInVwZGF0ZUFycm93cyIsImluaXRBREEiLCJudW1Eb3RHcm91cHMiLCJ0YWJDb250cm9sSW5kZXhlcyIsInNsaWRlQ29udHJvbEluZGV4Iiwicm9sZSIsImFyaWFCdXR0b25Db250cm9sIiwiYXJpYS1kZXNjcmliZWRieSIsIm1hcHBlZFNsaWRlSW5kZXgiLCJhcmlhLWNvbnRyb2xzIiwiYXJpYS1sYWJlbCIsImFyaWEtc2VsZWN0ZWQiLCJpbml0QXJyb3dFdmVudHMiLCJpbml0RG90RXZlbnRzIiwiaW5pdFNsaWRlRXZlbnRzIiwiYWN0aW9uIiwiaW5pdFVJIiwidGFnTmFtZSIsImxvYWRSYW5nZSIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsImxvYWRJbWFnZXMiLCJpbWFnZXNTY29wZSIsImltYWdlU291cmNlIiwiaW1hZ2VTcmNTZXQiLCJpbWFnZVNpemVzIiwiaW1hZ2VUb0xvYWQiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwic2xpY2tOZXh0IiwicGF1c2UiLCJzbGlja1BhdXNlIiwicGxheSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsInNsaWNrUHJldiIsInRyeUNvdW50IiwiJGltZ3NUb0xvYWQiLCJpbml0aWFsaXppbmciLCJsYXN0VmlzaWJsZUluZGV4IiwiY3VycmVudEJyZWFrcG9pbnQiLCJyZXNwb25zaXZlU2V0dGluZ3MiLCJ3aW5kb3dEZWxheSIsInJlbW92ZVNsaWRlIiwic2xpY2tSZW1vdmUiLCJyZW1vdmVCZWZvcmUiLCJyZW1vdmVBbGwiLCJzZXRDU1MiLCJ4IiwieSIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwic2V0RmFkZSIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwiaXRlbSIsImJvZHlTdHlsZSIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwibXNUcmFuc2l0aW9uIiwiT1RyYW5zZm9ybSIsInBlcnNwZWN0aXZlUHJvcGVydHkiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIk1velRyYW5zZm9ybSIsIk1velBlcnNwZWN0aXZlIiwid2Via2l0VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJhbGxTbGlkZXMiLCJyZW1haW5kZXIiLCJldmVuQ29lZiIsImluZmluaXRlQ291bnQiLCJ0YXJnZXRFbGVtZW50Iiwic3luYyIsImFuaW1TbGlkZSIsIm9sZFNsaWRlIiwic2xpZGVMZWZ0IiwibmF2VGFyZ2V0Iiwic3dpcGVEaXJlY3Rpb24iLCJ4RGlzdCIsInlEaXN0IiwiciIsInN3aXBlQW5nbGUiLCJzdGFydFgiLCJjdXJYIiwic3RhcnRZIiwiY3VyWSIsImF0YW4yIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwic3dpcGVTdGFydCIsInN3aXBlTW92ZSIsInBvc2l0aW9uT2Zmc2V0IiwidmVydGljYWxTd2lwZUxlbmd0aCIsInBvdyIsInVuZmlsdGVyU2xpZGVzIiwic2xpY2tVbmZpbHRlciIsImZyb21CcmVha3BvaW50IiwiWmVwdG8iLCJNYWduaWZpY1BvcHVwIiwiX21mcE9uIiwibWZwIiwiZXYiLCJFVkVOVF9OUyIsIl9nZXRFbCIsIl9tZnBUcmlnZ2VyIiwic3QiLCJjYWxsYmFja3MiLCJjaGFyQXQiLCJfZ2V0Q2xvc2VCdG4iLCJfY3VyclBvcHVwVHlwZSIsImN1cnJUZW1wbGF0ZSIsImNsb3NlQnRuIiwiY2xvc2VNYXJrdXAiLCJ0Q2xvc2UiLCJfY2hlY2tJbnN0YW5jZSIsIm1hZ25pZmljUG9wdXAiLCJpbnN0YW5jZSIsIl9wcmV2U3RhdHVzIiwiX2RvY3VtZW50IiwiX3ByZXZDb250ZW50VHlwZSIsIl93cmFwQ2xhc3NlcyIsIkNMT1NFX0VWRU5UIiwiQkVGT1JFX0NMT1NFX0VWRU5UIiwiTUFSS1VQX1BBUlNFX0VWRU5UIiwiT1BFTl9FVkVOVCIsIlJFQURZX0NMQVNTIiwiUkVNT1ZJTkdfQ0xBU1MiLCJQUkVWRU5UX0NMT1NFX0NMQVNTIiwiX2lzSlEiLCJfd2luZG93IiwiYXBwVmVyc2lvbiIsIm5hdmlnYXRvciIsImlzTG93SUUiLCJpc0lFOCIsImlzQW5kcm9pZCIsImlzSU9TIiwic3VwcG9ydHNUcmFuc2l0aW9uIiwic3VwcG9ydHNUcmFuc2l0aW9ucyIsInByb2JhYmx5TW9iaWxlIiwidXNlckFnZW50IiwicG9wdXBzQ2FjaGUiLCJpc09iaiIsIml0ZW1zIiwiaXNPcGVuIiwibWFpbkVsIiwiZml4ZWRDb250ZW50UG9zIiwibW9kYWwiLCJjbG9zZU9uQ29udGVudENsaWNrIiwiY2xvc2VPbkJnQ2xpY2siLCJzaG93Q2xvc2VCdG4iLCJlbmFibGVFc2NhcGVLZXkiLCJiZ092ZXJsYXkiLCJjbG9zZSIsIl9jaGVja0lmQ2xvc2UiLCJjb250ZW50Q29udGFpbmVyIiwicHJlbG9hZGVyIiwidExvYWRpbmciLCJtb2R1bGVzIiwiY2xvc2VCdG5JbnNpZGUiLCJ0ZW1wbGF0ZSIsImNsb3NlX3JlcGxhY2VXaXRoIiwiYWxpZ25Ub3AiLCJmaXhlZEJnUG9zIiwidXBkYXRlU2l6ZSIsIndpbmRvd0hlaWdodCIsIndIIiwid2luZG93U3R5bGVzIiwiX2hhc1Njcm9sbEJhciIsIl9nZXRTY3JvbGxiYXJTaXplIiwibWFyZ2luUmlnaHQiLCJpc0lFNyIsImNsYXNzZXNUb2FkZCIsIm1haW5DbGFzcyIsIl9hZGRDbGFzc1RvTUZQIiwidXBkYXRlSXRlbUhUTUwiLCJfbGFzdEZvY3VzZWRFbCIsIl9zZXRGb2N1cyIsIl9vbkZvY3VzSW4iLCJyZW1vdmFsRGVsYXkiLCJfY2xvc2UiLCJjbGFzc2VzVG9SZW1vdmUiLCJfcmVtb3ZlQ2xhc3NGcm9tTUZQIiwiY3Vyckl0ZW0iLCJhdXRvRm9jdXNMYXN0IiwicHJldkhlaWdodCIsIndpbkhlaWdodCIsInpvb21MZXZlbCIsImNsaWVudFdpZHRoIiwiaW5uZXJIZWlnaHQiLCJwYXJzZUVsIiwibmV3Q29udGVudCIsImFwcGVuZENvbnRlbnQiLCJwcmVsb2FkZWQiLCJhZGRHcm91cCIsImVIYW5kbGVyIiwibWZwRWwiLCJfb3BlbkNsaWNrIiwiZU5hbWUiLCJtaWRDbGljayIsImRpc2FibGVPbiIsInVwZGF0ZVN0YXR1cyIsImNsb3NlT25Db250ZW50IiwiY2xvc2VPbkJnIiwiY05hbWUiLCJzY3JvbGxIZWlnaHQiLCJfcGFyc2VNYXJrdXAiLCJzY3JvbGxiYXJTaXplIiwic2Nyb2xsRGl2IiwicmVnaXN0ZXJNb2R1bGUiLCJqcUVsIiwiaXRlbU9wdHMiLCJfcHV0SW5saW5lRWxlbWVudHNCYWNrIiwiX2xhc3RJbmxpbmVFbGVtZW50IiwiX2lubGluZVBsYWNlaG9sZGVyIiwiX2hpZGRlbkNsYXNzIiwiSU5MSU5FX05TIiwiaGlkZGVuQ2xhc3MiLCJ0Tm90Rm91bmQiLCJpbml0SW5saW5lIiwiZ2V0SW5saW5lIiwiaW5saW5lU3QiLCJpbmxpbmUiLCJpbmxpbmVFbGVtZW50IiwiX3JlbW92ZUFqYXhDdXJzb3IiLCJfYWpheEN1ciIsIl9kZXN0cm95QWpheFJlcXVlc3QiLCJyZXEiLCJBSkFYX05TIiwiY3Vyc29yIiwidEVycm9yIiwiaW5pdEFqYXgiLCJnZXRBamF4IiwidGV4dFN0YXR1cyIsImZpbmlzaGVkIiwibG9hZEVycm9yIiwiX2ltZ0ludGVydmFsIiwidGl0bGVTcmMiLCJ2ZXJ0aWNhbEZpdCIsImluaXRJbWFnZSIsImltZ1N0IiwibnMiLCJyZXNpemVJbWFnZSIsImltZyIsImRlY3IiLCJfb25JbWFnZUhhc1NpemUiLCJoYXNTaXplIiwiaXNDaGVja2luZ0ltZ1NpemUiLCJpbWdIaWRkZW4iLCJmaW5kSW1hZ2VTaXplIiwibWZwU2V0SW50ZXJ2YWwiLCJuYXR1cmFsV2lkdGgiLCJnZXRJbWFnZSIsImd1YXJkIiwib25Mb2FkQ29tcGxldGUiLCJsb2FkZWQiLCJvbkxvYWRFcnJvciIsImFsdCIsInRpdGxlIiwiX2dldFRpdGxlIiwiaW1nX3JlcGxhY2VXaXRoIiwibG9hZGluZyIsImhhc01velRyYW5zZm9ybSIsImluaXRab29tIiwiem9vbVN0IiwiZ2V0RWxUb0FuaW1hdGUiLCJuZXdJbWciLCJjc3NPYmoiLCItd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHkiLCJzaG93TWFpbkNvbnRlbnQiLCJvcGVuVGltZW91dCIsImFuaW1hdGVkSW1nIiwiX2FsbG93Wm9vbSIsIl9nZXRJdGVtVG9ab29tIiwiX2dldE9mZnNldCIsImlzTGFyZ2UiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIl9maXhJZnJhbWVCdWdzIiwiaXNTaG93aW5nIiwiSUZSQU1FX05TIiwic3JjQWN0aW9uIiwicGF0dGVybnMiLCJ5b3V0dWJlIiwidmltZW8iLCJnbWFwcyIsImluaXRJZnJhbWUiLCJwcmV2VHlwZSIsIm5ld1R5cGUiLCJnZXRJZnJhbWUiLCJlbWJlZFNyYyIsImlmcmFtZVN0IiwiaWZyYW1lIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJkYXRhT2JqIiwiX2dldExvb3BlZElkIiwibnVtU2xpZGVzIiwiX3JlcGxhY2VDdXJyVG90YWwiLCJjdXJyIiwidG90YWwiLCJhcnJvd01hcmt1cCIsInByZWxvYWQiLCJuYXZpZ2F0ZUJ5SW1nQ2xpY2siLCJ0UHJldiIsInROZXh0IiwidENvdW50ZXIiLCJpbml0R2FsbGVyeSIsImdTdCIsImdhbGxlcnkiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwiX3ByZWxvYWRUaW1lb3V0IiwicHJlbG9hZE5lYXJieUltYWdlcyIsIm5ld0luZGV4IiwicHJlbG9hZEJlZm9yZSIsInByZWxvYWRBZnRlciIsIl9wcmVsb2FkSXRlbSIsIlJFVElOQV9OUyIsInJlcGxhY2VTcmMiLCJyYXRpbyIsImluaXRSZXRpbmEiLCJkZXZpY2VQaXhlbFJhdGlvIiwicmV0aW5hIiwibWF4LXdpZHRoIiwicmVzaXplT25BcHByb2FjaCIsImVsZW1lbnREZWZhdWx0IiwiZWxlbWVudENsb3Nlc3QiLCJ0cmlnZ2VyRGlzdGFuY2UiLCJzZXRXaWR0aEFuZEhlaWdodCIsImgiLCJrIiwibW91c2Vtb3ZlIiwialF1ZXJ5QnJpZGdldCIsImFycmF5U2xpY2UiLCJsb2dFcnJvciIsIlBsdWdpbkNsYXNzIiwiYXJnMCIsIiRlbGVtcyIsIm1ldGhvZE5hbWUiLCJwbHVnaW5NZXRob2RTdHIiLCJtZXRob2RDYWxsIiwiX2luaXQiLCJwbGFpbkNhbGwiLCJ1cGRhdGVKUXVlcnkiLCJicmlkZ2V0IiwiRXZFbWl0dGVyIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJfZXZlbnRzIiwibGlzdGVuZXJzIiwib25jZUV2ZW50cyIsIl9vbmNlRXZlbnRzIiwiZW1pdEV2ZW50Iiwib25jZUxpc3RlbmVycyIsImFsbE9mZiIsImdldFNpemUiLCJnZXRTdHlsZVNpemUiLCJtZWFzdXJlbWVudHMiLCJtZWFzdXJlbWVudHNMZW5ndGgiLCJnZXRTdHlsZSIsImlzQm94U2l6ZU91dGVyIiwiaXNTZXR1cCIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3hTaXppbmciLCJxdWVyeVNlbGVjdG9yIiwic2l6ZSIsImdldFplcm9TaXplIiwibWVhc3VyZW1lbnQiLCJwYWRkaW5nV2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdIZWlnaHQiLCJtYXJnaW5XaWR0aCIsIm1hcmdpbkhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJIZWlnaHQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiaXNCb3JkZXJCb3hTaXplT3V0ZXIiLCJzdHlsZVdpZHRoIiwic3R5bGVIZWlnaHQiLCJtYXRjaGVzTWV0aG9kIiwiRWxlbVByb3RvIiwiRWxlbWVudCIsInByZWZpeGVzIiwiZml6enlVSVV0aWxzIiwidXRpbHMiLCJtb2R1bG8iLCJyZW1vdmVGcm9tIiwiYXJ5IiwiZ2V0UGFyZW50IiwiZ2V0UXVlcnlFbGVtZW50IiwiaGFuZGxlRXZlbnQiLCJmaWx0ZXJGaW5kRWxlbWVudHMiLCJmZkVsZW1zIiwiZm9yRWFjaCIsIkhUTUxFbGVtZW50IiwiY2hpbGRFbGVtcyIsImRlYm91bmNlTWV0aG9kIiwiX2NsYXNzIiwidGhyZXNob2xkIiwidGltZW91dE5hbWUiLCJfdGhpcyIsImRvY1JlYWR5IiwidG9EYXNoZWQiLCJzdHIiLCIkMSIsIiQyIiwiaHRtbEluaXQiLCJXaWRnZXRDbGFzcyIsImRhc2hlZE5hbWVzcGFjZSIsImRhdGFBdHRyRWxlbXMiLCJqc0Rhc2hFbGVtcyIsImRhdGFPcHRpb25zQXR0ciIsIk91dGxheWVyIiwiSXRlbSIsImRvY0VsZW1TdHlsZSIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsInRyYW5zZm9ybVByb3BlcnR5IiwidHJhbnNpdGlvbkVuZEV2ZW50IiwidmVuZG9yUHJvcGVydGllcyIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImxheW91dCIsIl9jcmVhdGUiLCJjcmVhdGUiLCJfdHJhbnNuIiwiaW5nUHJvcGVydGllcyIsImNsZWFuIiwib25FbmQiLCJlbGVtU3R5bGUiLCJnZXRQb3NpdGlvbiIsImlzT3JpZ2luTGVmdCIsIl9nZXRPcHRpb24iLCJpc09yaWdpblRvcCIsInhWYWx1ZSIsInlWYWx1ZSIsImxheW91dFNpemUiLCJsYXlvdXRQb3NpdGlvbiIsInhQYWRkaW5nIiwieFByb3BlcnR5IiwieFJlc2V0UHJvcGVydHkiLCJnZXRYVmFsdWUiLCJ5UGFkZGluZyIsInlQcm9wZXJ0eSIsInlSZXNldFByb3BlcnR5IiwiZ2V0WVZhbHVlIiwiaXNIb3Jpem9udGFsIiwicGVyY2VudFBvc2l0aW9uIiwiX3RyYW5zaXRpb25UbyIsImRpZE5vdE1vdmUiLCJpc1RyYW5zaXRpb25pbmciLCJ0cmFuc1giLCJ0cmFuc1kiLCJ0cmFuc2l0aW9uU3R5bGUiLCJnZXRUcmFuc2xhdGUiLCJvblRyYW5zaXRpb25FbmQiLCJpc0NsZWFuaW5nIiwibW92ZVRvIiwiX25vblRyYW5zaXRpb24iLCJfcmVtb3ZlU3R5bGVzIiwiX3RyYW5zaXRpb24iLCJmcm9tIiwiZW5hYmxlVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wcyIsInN0YWdnZXJEZWxheSIsIm9ud2Via2l0VHJhbnNpdGlvbkVuZCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ub3RyYW5zaXRpb25lbmQiLCJkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzIiwiLXdlYmtpdC10cmFuc2Zvcm0iLCJwcm9wZXJ0eU5hbWUiLCJpc0VtcHR5T2JqIiwicmVtb3ZlVHJhbnNpdGlvblN0eWxlcyIsImNsZWFuU3R5bGUiLCJjbGVhblRyYW5zaXRpb25TdHlsZSIsInN0YWdnZXIiLCJyZW1vdmVFbGVtIiwicmV2ZWFsIiwiaXNIaWRkZW4iLCJnZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5Iiwib25SZXZlYWxUcmFuc2l0aW9uRW5kIiwiaGlkZGVuU3R5bGUiLCJ2aXNpYmxlU3R5bGUiLCJzdHlsZVByb3BlcnR5Iiwib3B0aW9uU3R5bGUiLCJvbkhpZGVUcmFuc2l0aW9uRW5kIiwiYm90dG9tIiwiR1VJRCIsImluc3RhbmNlcyIsInF1ZXJ5RWxlbWVudCIsIiRlbGVtZW50Iiwib3V0bGF5ZXJHVUlEIiwiY29udGFpbmVyU3R5bGUiLCJpbml0TGF5b3V0Iiwib3JpZ2luTGVmdCIsIm9yaWdpblRvcCIsInJlc2l6ZUNvbnRhaW5lciIsInN1YmNsYXNzIiwiUGFyZW50IiwiU3ViQ2xhc3MiLCJvbGRPcHRpb24iLCJjb21wYXRPcHRpb25zIiwiaG9yaXpvbnRhbCIsImxheW91dEluc3RhbnQiLCJyZWxvYWRJdGVtcyIsInN0YW1wcyIsInN0YW1wIiwiYmluZFJlc2l6ZSIsIl9pdGVtaXplIiwiaXRlbUVsZW1zIiwiX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMiLCJpdGVtU2VsZWN0b3IiLCJnZXRJdGVtRWxlbWVudHMiLCJfcmVzZXRMYXlvdXQiLCJfbWFuYWdlU3RhbXBzIiwiaXNJbnN0YW50IiwiX2lzTGF5b3V0SW5pdGVkIiwibGF5b3V0SXRlbXMiLCJfZ2V0TWVhc3VyZW1lbnQiLCJfZ2V0SXRlbXNGb3JMYXlvdXQiLCJfbGF5b3V0SXRlbXMiLCJfcG9zdExheW91dCIsImlzSWdub3JlZCIsIl9lbWl0Q29tcGxldGVPbkl0ZW1zIiwiX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiIsImlzTGF5b3V0SW5zdGFudCIsIl9wcm9jZXNzTGF5b3V0UXVldWUiLCJ1cGRhdGVTdGFnZ2VyIiwiX3Bvc2l0aW9uSXRlbSIsIm11bHQiLCJtc1VuaXRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiX2dldENvbnRhaW5lclNpemUiLCJfc2V0Q29udGFpbmVyTWVhc3VyZSIsImlzV2lkdGgiLCJlbGVtU2l6ZSIsIm9uQ29tcGxldGUiLCJkaXNwYXRjaEV2ZW50IiwiZG9uZUNvdW50IiwiZW1pdEFyZ3MiLCIkZXZlbnQiLCJpZ25vcmUiLCJnZXRJdGVtIiwidW5pZ25vcmUiLCJfZmluZCIsInVuc3RhbXAiLCJfZ2V0Qm91bmRpbmdSZWN0IiwiX21hbmFnZVN0YW1wIiwiYm91bmRpbmdSZWN0IiwiX2JvdW5kaW5nUmVjdCIsIl9nZXRFbGVtZW50T2Zmc2V0IiwidGhpc1JlY3QiLCJpc1Jlc2l6ZUJvdW5kIiwidW5iaW5kUmVzaXplIiwib25yZXNpemUiLCJuZWVkc1Jlc2l6ZUxheW91dCIsImFkZEl0ZW1zIiwiYXBwZW5kZWQiLCJwcmVwZW5kZWQiLCJwcmV2aW91c0l0ZW1zIiwicmV2ZWFsSXRlbUVsZW1lbnRzIiwiZ2V0SXRlbXMiLCJoaWRlSXRlbUVsZW1lbnRzIiwicmVtb3ZlSXRlbXMiLCJMYXlvdXQiLCJtcyIsIklzb3RvcGUiLCJpdGVtR1VJRCIsInNvcnREYXRhIiwidXBkYXRlU29ydERhdGEiLCJnZXRTb3J0RGF0YSIsInNvcnRlcnMiLCJfc29ydGVycyIsInNvcnRlciIsIl9kZXN0cm95IiwiTGF5b3V0TW9kZSIsImlzb3RvcGUiLCJmaWx0ZXJlZEl0ZW1zIiwibmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dCIsImdldENvbHVtbldpZHRoIiwiZ2V0U2VnbWVudFNpemUiLCJnZXRSb3dIZWlnaHQiLCJzZWdtZW50Iiwic2VnbWVudE5hbWUiLCJvdXRlclNpemUiLCJmaXJzdEl0ZW1TaXplIiwiZ2V0Rmlyc3RJdGVtU2l6ZSIsImZpcnN0SXRlbSIsIm1vZGVzIiwiTW9kZSIsIk1hc29ucnkiLCJmaXRXaWR0aCIsIm1lYXN1cmVDb2x1bW5zIiwiY29sWXMiLCJjb2xzIiwibWF4WSIsImhvcml6b250YWxDb2xJbmRleCIsImdldENvbnRhaW5lcldpZHRoIiwiY29sdW1uV2lkdGgiLCJmaXJzdEl0ZW1FbGVtIiwiY29udGFpbmVyV2lkdGgiLCJndXR0ZXIiLCJjb2xTcGFuIiwiY29sUG9zaXRpb24iLCJob3Jpem9udGFsT3JkZXIiLCJzZXRNYXgiLCJfZ2V0VG9wQ29sUG9zaXRpb24iLCJjb2xHcm91cCIsIl9nZXRUb3BDb2xHcm91cCIsIm1pbmltdW1ZIiwiZ3JvdXBDb3VudCIsIl9nZXRDb2xHcm91cFkiLCJncm91cENvbFlzIiwiX2dldEhvcml6b250YWxDb2xQb3NpdGlvbiIsInN0YW1wU2l6ZSIsImZpcnN0WCIsImxhc3RYIiwiZmlyc3RDb2wiLCJsYXN0Q29sIiwic3RhbXBNYXhZIiwiX2dldENvbnRhaW5lckZpdFdpZHRoIiwidW51c2VkQ29scyIsInByZXZpb3VzV2lkdGgiLCJNYXNvbnJ5TW9kZSIsImtlZXBNb2RlTWV0aG9kcyIsImlzRml0V2lkdGgiLCJGaXRSb3dzIiwiaXRlbVdpZHRoIiwiVmVydGljYWwiLCJob3Jpem9udGFsQWxpZ25tZW50IiwibGF5b3V0TW9kZSIsImlzSlF1ZXJ5RmlsdGVyaW5nIiwic29ydEFzY2VuZGluZyIsIl9nZXRTb3J0ZXJzIiwic29ydEhpc3RvcnkiLCJfaW5pdExheW91dE1vZGUiLCJfdXBkYXRlSXRlbXNTb3J0RGF0YSIsImluaXRpYWxPcHRzIiwiX2xheW91dCIsImFycmFuZ2UiLCJfZ2V0SXNJbnN0YW50IiwiZmlsdGVyZWQiLCJfZmlsdGVyIiwiX2JpbmRBcnJhbmdlQ29tcGxldGUiLCJfaXNJbnN0YW50IiwiX25vVHJhbnNpdGlvbiIsIl9oaWRlUmV2ZWFsIiwiX3NvcnQiLCJuZWVkUmV2ZWFsIiwibmVlZEhpZGUiLCJpc0xheW91dENvbXBsZXRlIiwiaXNIaWRlQ29tcGxldGUiLCJpc1JldmVhbENvbXBsZXRlIiwiYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2siLCJoaWRkZW5NYXRjaGVkIiwidmlzaWJsZVVubWF0Y2hlZCIsIl9nZXRGaWx0ZXJUZXN0IiwiaXNNYXRjaGVkIiwibXVuZ2VTb3J0ZXIiLCJxdWVyeSIsImF0dHJNYXRjaCIsImdldFZhbHVlIiwiY2hpbGQiLCJnZXRWYWx1ZUdldHRlciIsInBhcnNlciIsInNvcnREYXRhUGFyc2VycyIsInNvcnRCeSIsInNvcnRCeXMiLCJfZ2V0SXNTYW1lU29ydEJ5IiwiaXRlbVNvcnRlciIsInNvcnRBc2MiLCJpdGVtQSIsIml0ZW1CIiwiZ2V0SXRlbVNvcnRlciIsIl9tb2RlIiwibW9kZSIsIl9maWx0ZXJSZXZlYWxBZGRlZCIsImZpbHRlcmVkSW5zZXJ0SXRlbXMiLCJfcmVtb3ZlIiwic2h1ZmZsZSIsImdldEZpbHRlcmVkSXRlbUVsZW1lbnRzIiwibWUiLCJNdXRhdGlvbk9ic2VydmVyIiwiVXRpbCIsIldlYWtNYXAiLCJnZXRDb21wdXRlZFN0eWxlUlgiLCJXT1ciLCJzY3JvbGxDYWxsYmFjayIsInNjcm9sbEhhbmRsZXIiLCJyZXNldEFuaW1hdGlvbiIsInNjcm9sbGVkIiwiY29uZmlnIiwidXRpbCIsInNjcm9sbENvbnRhaW5lciIsImFuaW1hdGlvbk5hbWVDYWNoZSIsIndvd0V2ZW50IiwiY3JlYXRlRXZlbnQiLCJib3hDbGFzcyIsImN1c3RvbSIsImlzTW9iaWxlIiwiYWdlbnQiLCJidWJibGUiLCJjYW5jZWwiLCJjdXN0b21FdmVudCIsImluaXRDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZlbnRUeXBlIiwiYWRkRXZlbnQiLCJkZXRhY2hFdmVudCIsImNsaWVudEhlaWdodCIsIk1veldlYWtNYXAiLCJyZWYiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwiTW96TXV0YXRpb25PYnNlcnZlciIsIm5vdFN1cHBvcnRlZCIsIm9ic2VydmUiLCJfY2hhciIsImN1cnJlbnRTdHlsZSIsImFuaW1hdGVDbGFzcyIsIm1vYmlsZSIsImxpdmUiLCJib3hlcyIsInJlc2V0U3R5bGUiLCJhcHBseVN0eWxlIiwicmVjb3JkcyIsImxlbjEiLCJyZWNvcmQiLCJsZW4yIiwicmVmMSIsInJlc3VsdHMxIiwiYWRkZWROb2RlcyIsImRvU3luYyIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJpdGVyYXRpb24iLCJjdXN0b21TdHlsZSIsInNyY0VsZW1lbnQiLCJjYWNoZUFuaW1hdGlvbk5hbWUiLCJ2ZW5kb3JTZXQiLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uTmFtZSIsImNhY2hlZEFuaW1hdGlvbk5hbWUiLCJ2ZW5kb3JzIiwidmVuZG9yIiwidmVuZG9yQ1NTIiwicHJvcGVydHkiLCJnZXRQcm9wZXJ0eUNTU1ZhbHVlIiwiaXNWaXNpYmxlIiwib2Zmc2V0VG9wIiwidmlld0JvdHRvbSIsInZpZXdUb3AiLCJfdXRpbCIsInRpbWVvdXRJZCIsInRpbWVvdXRJZDIiLCJwb3J0SGVpZ2h0IiwibWFudWFsU2Nyb2xsIiwic3dpcGVTY3JvbGwiLCJoZWlnaHRzIiwibmFtZXMiLCJjdXJyZW50SW5kZXgiLCJpbnRlcnN0aXRpYWxJbmRleCIsImhhc0xvY2F0aW9uIiwiJHdpbmRvdyIsInNjcm9sbGFibGUiLCJzY3JvbGxTYW1wbGVzIiwic2Nyb2xsVGltZSIsImdldFRpbWUiLCJmaXJzdExvYWQiLCJpbml0aWFsaXNlZCIsImRlc3RpbmF0aW9uIiwid2hlZWxFdmVudCIsIm9ubW91c2V3aGVlbCIsInNlY3Rpb24iLCJzZWN0aW9uTmFtZSIsImludGVyc3RpdGlhbFNlY3Rpb24iLCJzY3JvbGxTcGVlZCIsInNjcm9sbGJhcnMiLCJzdGFuZGFyZFNjcm9sbEVsZW1lbnRzIiwic2V0SGVpZ2h0cyIsIm92ZXJmbG93U2Nyb2xsIiwidXBkYXRlSGFzaCIsInRvdWNoU2Nyb2xsIiwiYWZ0ZXJSZXNpemUiLCJhZnRlclJlbmRlciIsImdldHBvcnRIZWlnaHQiLCJhbmltYXRlU2Nyb2xsIiwiaW5zdGFudCIsInRvVG9wIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSIsInZlbG9jaXR5IiwibW9iaWxlSEEiLCJpc0FjY2VsZXJhdGluZyIsInNhbXBsZXMiLCJhdmVyYWdlIiwic3VtIiwibGFzdEVsZW1lbnRzIiwiYXZFbmQiLCJzY3JvbGxpZnkiLCJpbnRlcnN0aXRpYWxTY3JvbGwiLCJzaXplUGFuZWxzIiwia2VlcFBvc2l0aW9uIiwiJHRoaXMiLCJjYWxjdWxhdGVQb3NpdGlvbnMiLCJzY3JvbGwiLCJhdFRvcCIsImF0Qm90dG9tIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwiaGFuZGxlTW91c2Vkb3duIiwiaGFuZGxlTW91c2V1cCIsImNhbGN1bGF0ZU5lYXJlc3QiLCJoYW5kbGVTY3JvbGwiLCJ3aGVlbEhhbmRsZXIiLCJjdXJyZW50U2Nyb2xsVGltZSIsIndoZWVsRGVsdGEiLCJkZWx0YVkiLCJyZWFkT25seSIsInBhc3NpdmUiLCJkaXN0YW5jZSIsInRpbWVHYXAiLCJ0b3VjaEhhbmRsZXIiLCJ0b3VjaCIsInVwIiwiZG93biIsImV2ZW50TGlzdGVuZXJPcHRpb25zIiwid2l0aENhbGxiYWNrIiwiaGFuZGxlVXBkYXRlIiwiaGFuZGxlUmVzaXplIiwiaGFuZGxlT3JpZW50YXRpb24iLCJtb3ZlIiwicGFuZWwiLCJ6IiwiaW5zdGFudE1vdmUiLCJwcmV2aW91cyIsImluc3RhbnROZXh0IiwiaW5zdGFudFByZXZpb3VzIiwidXBkYXRlIiwiZW5hYmxlIiwic2V0T3B0aW9ucyIsInVwZGF0ZWRPcHRpb25zIiwibW9kIiwiYm9keVNjcm9sbExvY2siLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIyIiwiaGFzUGFzc2l2ZUV2ZW50cyIsInBhc3NpdmVUZXN0T3B0aW9ucyIsImFsbG93VG91Y2hNb3ZlIiwibG9ja3MiLCJzb21lIiwicmF3RXZlbnQiLCJyZXN0b3JlT3ZlcmZsb3dTZXR0aW5nIiwicHJldmlvdXNCb2R5UGFkZGluZ1JpZ2h0IiwicHJldmlvdXNCb2R5T3ZlcmZsb3dTZXR0aW5nIiwiaXNJb3NEZXZpY2UiLCJwbGF0Zm9ybSIsImRvY3VtZW50TGlzdGVuZXJBZGRlZCIsImluaXRpYWxDbGllbnRZIiwiZGlzYWJsZUJvZHlTY3JvbGwiLCJvbnRvdWNoc3RhcnQiLCJvbnRvdWNobW92ZSIsImlzVGFyZ2V0RWxlbWVudFRvdGFsbHlTY3JvbGxlZCIsIl9yZXNlcnZlU2Nyb2xsQmFyR2FwIiwicmVzZXJ2ZVNjcm9sbEJhckdhcCIsInNjcm9sbEJhckdhcCIsInNldE92ZXJmbG93SGlkZGVuIiwiX2xvY2siLCJjbGVhckFsbEJvZHlTY3JvbGxMb2NrcyIsImVuYWJsZUJvZHlTY3JvbGwiXSwibWFwcGluZ3MiOiJBQTRDQSxTQUFBQSxhQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQWNBLE9BYkFDLEdBQUFGLEVBQUFGLEVBQ0FLLEdBQUFGLEVBQUFGLEVBQ0FBLEVBQUFELEVBQUEsRUFDQUksR0FBQUMsR0FDQUQsSUFBQUMsR0FBQUwsRUFBQSxFQUNBQyxFQUFBLEVBQ0FHLElBQUFDLEdBQUFKLEdBQUEsRUFDQUQsR0FBQSxFQUNBTSxRQUFBQyxLQUFBQyxLQUFBSixHQUFBQSxHQUFBQyxHQUFBQSxJQUNBSSxJQUFBTCxHQUFBRSxRQUNBSSxJQUFBTCxHQUFBQyxRQUNBSyxLQUFBRixJQUFBVCxFQUFBVSxJQUFBVCxFQUNBVyxlQUFBTCxLQUFBTSxJQUFBLEdBQUFkLEVBQUFZLE1BQ0FHLGtCQUFBUixRQUFBTSxnQkM3Q0EsU0FBQUcsRUFBQUMsR0FFQSxhQUVBLGlCQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxRQVNBRCxPQUFBQyxRQUFBSCxFQUFBSSxTQUNBSCxFQUFBRCxHQUFBLEdBQ0EsU0FBQUssR0FDQSxJQUFBQSxFQUFBRCxTQUNBLE1BQUEsSUFBQUUsTUFBQSw0Q0FFQSxPQUFBTCxFQUFBSSxJQUdBSixFQUFBRCxH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QUNBdkQsU0FBQTJnQixvQkFBQSxZQUFBc0ksRUFBQStsRCxFQUFBLENBQUEzQixTQUFBLFFBQUF6bkUsR0FFQStwRSxHQUFBLFFBR0FSLEVBQUFBLEVBQUFqL0QsT0FBQSxTQUFBd04sR0FDQSxPQUFBQSxFQUFBcWdDLGdCQUFBQSxLQUVBeDZDLFFBQ0ErckUiLCJmaWxlIjoibGlicy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGQpIHtcclxuICBkLmZuLnJlc2l6ZU9uQXBwcm9hY2ggPSBmdW5jdGlvbiAoYykge1xyXG4gICAgdmFyIGEgPSB7XHJcbiAgICAgIGVsZW1lbnREZWZhdWx0OiAzNSxcclxuICAgICAgZWxlbWVudENsb3Nlc3Q6IDU1LFxyXG4gICAgICB0cmlnZ2VyRGlzdGFuY2U6IDIwMCxcclxuICAgICAgc2V0V2lkdGhBbmRIZWlnaHQ6IGZhbHNlXHJcbiAgICB9O1xyXG4gICAgYyAmJiBkLmV4dGVuZChhLCBjKTtcclxuICAgIHZhciBmID0gYS5zZXRXaWR0aEFuZEhlaWdodCxcclxuICAgICAgZyA9IHRoaXMsXHJcbiAgICAgIGUgPSBhLmVsZW1lbnREZWZhdWx0LFxyXG4gICAgICBoID0gYS50cmlnZ2VyRGlzdGFuY2UsXHJcbiAgICAgIGkgPSBhLmVsZW1lbnRDbG9zZXN0IC0gZSxcclxuICAgICAgayA9IGkgLyBoLFxyXG4gICAgICBsID0gZmFsc2U7XHJcbiAgICBkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGcuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zdHlsZS53aWR0aCA9IGUgKyBcInB4XCI7XHJcbiAgICAgICAgaWYgKGYpIHRoaXMuc3R5bGUuaGVpZ2h0ID0gZSArIFwicHhcIlxyXG4gICAgICB9KVxyXG4gICAgfSk7XHJcbiAgICBkKGRvY3VtZW50KS5tb3VzZW1vdmUoZnVuY3Rpb24gKGopIHtcclxuICAgICAgdmFyIG0gPSBqLnBhZ2VYLFxyXG4gICAgICAgIG4gPSBqLnBhZ2VZO1xyXG4gICAgICBnLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBiID0gZCh0aGlzKS5vZmZzZXQoKTtcclxuICAgICAgICBiID0gZGlzdFRvU3FFZGdlKHRoaXMud2lkdGgsIGIubGVmdCArIHRoaXMud2lkdGggL1xyXG4gICAgICAgICAgMiwgYi50b3AgKyB0aGlzLmhlaWdodCAvIDIsIG0sIG4pO1xyXG4gICAgICAgIGlmIChiIDwgaCkge1xyXG4gICAgICAgICAgaWYgKGIgPCAwKSBiID0gMDtcclxuICAgICAgICAgIGwgPSB0cnVlO1xyXG4gICAgICAgICAgYiA9IGUgKyAoaSAtIGIgKiBrKTtcclxuICAgICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSBiICsgXCJweFwiO1xyXG4gICAgICAgICAgaWYgKGYpIHRoaXMuc3R5bGUuaGVpZ2h0ID0gYiArIFwicHhcIlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnN0eWxlLndpZHRoID0gZSArIFwicHhcIjtcclxuICAgICAgICAgIGlmIChmKSB0aGlzLnN0eWxlLmhlaWdodCA9IGUgKyBcInB4XCJcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxufSkoalF1ZXJ5KTtcclxuXHJcbmZ1bmN0aW9uIGRpc3RUb1NxRWRnZShkLCBjLCBhLCBmLCBnKSB7XHJcbiAgdnggPSBmIC0gYztcclxuICB2eSA9IGcgLSBhO1xyXG4gIGEgPSBjID0gMDtcclxuICBpZiAodnggPiB2eSlcclxuICAgIGlmICh2eCA+IC12eSkgYyA9IDE7XHJcbiAgICBlbHNlIGEgPSAxO1xyXG4gIGVsc2UgaWYgKHZ4ID4gLXZ5KSBhID0gLTE7XHJcbiAgZWxzZSBjID0gLTE7XHJcbiAgdmxlbmd0aCA9IE1hdGguc3FydCh2eCAqIHZ4ICsgdnkgKiB2eSk7XHJcbiAgdnV4ID0gdnggLyB2bGVuZ3RoO1xyXG4gIHZ1eSA9IHZ5IC8gdmxlbmd0aDtcclxuICBjb3NBID0gdnV4ICogYyArIHZ1eSAqIGE7XHJcbiAgY2VudHJlVG9TcUVkZ2UgPSBNYXRoLmFicygwLjUgKiBkIC8gY29zQSk7XHJcbiAgcmV0dXJuIG1vdXNlVG9TcXVhcmVFZGdlID0gdmxlbmd0aCAtIGNlbnRyZVRvU3FFZGdlXHJcbn07IiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjQuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTktMDUtMDFUMjE6MDRaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNC4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy40XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDE5LTA0LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIikgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJiByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgP1xuXHRcdFx0XHRhcmd1bWVudCArIGxlbmd0aCA6XG5cdFx0XHRcdGFyZ3VtZW50ID4gbGVuZ3RoID9cblx0XHRcdFx0XHRsZW5ndGggOlxuXHRcdFx0XHRcdGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5jb250ZW50RG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHQvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZVxuXHQvLyBXZSB1c2UgZ2V0Q2xpZW50UmVjdHMoKSB0byBjaGVjayBmb3IgaGlkZGVuL2Rpc2Nvbm5lY3RlZC5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94XG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IERhdGUubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLypcbiAgICAgXyBfICAgICAgXyAgICAgICBfXG4gX19ffCAoXykgX19ffCB8IF9fICAoXylfX19cbi8gX198IHwgfC8gX198IHwvIC8gIHwgLyBfX3xcblxcX18gXFwgfCB8IChfX3wgICA8IF8gfCBcXF9fIFxcXG58X19fL198X3xcXF9fX3xffFxcXyhfKS8gfF9fXy9cbiAgICAgICAgICAgICAgICAgICB8X18vXG5cbiBWZXJzaW9uOiAxLjguMVxuICBBdXRob3I6IEtlbiBXaGVlbGVyXG4gV2Vic2l0ZTogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvXG4gICAgRG9jczogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvL3NsaWNrXG4gICAgUmVwbzogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGlja1xuICBJc3N1ZXM6IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2svaXNzdWVzXG5cbiAqL1xuLyogZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIGRlZmluZSwgalF1ZXJ5LCBzZXRJbnRlcnZhbCwgY2xlYXJJbnRlcnZhbCAqL1xuOyhmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cblxufShmdW5jdGlvbigkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBTbGljayA9IHdpbmRvdy5TbGljayB8fCB7fTtcblxuICAgIFNsaWNrID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBpbnN0YW5jZVVpZCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gU2xpY2soZWxlbWVudCwgc2V0dGluZ3MpIHtcblxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLCBkYXRhU2V0dGluZ3M7XG5cbiAgICAgICAgICAgIF8uZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXBwZW5kQXJyb3dzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFwcGVuZERvdHM6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFzTmF2Rm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIHByZXZBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1wcmV2XCIgYXJpYS1sYWJlbD1cIlByZXZpb3VzXCIgdHlwZT1cImJ1dHRvblwiPlByZXZpb3VzPC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBuZXh0QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdHlwZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICc1MHB4JyxcbiAgICAgICAgICAgICAgICBjc3NFYXNlOiAnZWFzZScsXG4gICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbihzbGlkZXIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIC8+JykudGV4dChpICsgMSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkb3RzQ2xhc3M6ICdzbGljay1kb3RzJyxcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBlZGdlRnJpY3Rpb246IDAuMzUsXG4gICAgICAgICAgICAgICAgZmFkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9jdXNPbkNoYW5nZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGxhenlMb2FkOiAnb25kZW1hbmQnLFxuICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Eb3RzSG92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc3BvbmRUbzogJ3dpbmRvdycsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogbnVsbCxcbiAgICAgICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgICAgIHJ0bDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGU6ICcnLFxuICAgICAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcbiAgICAgICAgICAgICAgICBzd2lwZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzd2lwZVRvU2xpZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRvdWNoTW92ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0b3VjaFRocmVzaG9sZDogNSxcbiAgICAgICAgICAgICAgICB1c2VDU1M6IHRydWUsXG4gICAgICAgICAgICAgICAgdXNlVHJhbnNmb3JtOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbFN3aXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhaXRGb3JBbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHpJbmRleDogMTAwMFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgXy5pbml0aWFscyA9IHtcbiAgICAgICAgICAgICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvUGxheVRpbWVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gICAgICAgICAgICAgICAgY3VycmVudExlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogMSxcbiAgICAgICAgICAgICAgICAkZG90czogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0V2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdEhlaWdodDogbnVsbCxcbiAgICAgICAgICAgICAgICBsb2FkSW5kZXg6IDAsXG4gICAgICAgICAgICAgICAgJG5leHRBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICAkcHJldkFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgIHNjcm9sbGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVDb3VudDogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZVRyYWNrOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgIHN3aXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICRsaXN0OiBudWxsLFxuICAgICAgICAgICAgICAgIHRvdWNoT2JqZWN0OiB7fSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5zbGlja2VkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscyk7XG5cbiAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5icmVha3BvaW50cyA9IFtdO1xuICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3MgPSBbXTtcbiAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaGlkZGVuID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IG51bGw7XG4gICAgICAgICAgICBfLnJvd0NvdW50ID0gMTtcbiAgICAgICAgICAgIF8uc2hvdWxkQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgXy4kc2xpZGVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAwO1xuICAgICAgICAgICAgXy53aW5kb3dUaW1lciA9IG51bGw7XG5cbiAgICAgICAgICAgIGRhdGFTZXR0aW5ncyA9ICQoZWxlbWVudCkuZGF0YSgnc2xpY2snKSB8fCB7fTtcblxuICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8uZGVmYXVsdHMsIHNldHRpbmdzLCBkYXRhU2V0dGluZ3MpO1xuXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG5cbiAgICAgICAgICAgIF8ub3JpZ2luYWxTZXR0aW5ncyA9IF8ub3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnbW96SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnbW96dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnd2Via2l0SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYXV0b1BsYXkgPSAkLnByb3h5KF8uYXV0b1BsYXksIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUNsZWFyID0gJC5wcm94eShfLmF1dG9QbGF5Q2xlYXIsIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUl0ZXJhdG9yID0gJC5wcm94eShfLmF1dG9QbGF5SXRlcmF0b3IsIF8pO1xuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSA9ICQucHJveHkoXy5jaGFuZ2VTbGlkZSwgXyk7XG4gICAgICAgICAgICBfLmNsaWNrSGFuZGxlciA9ICQucHJveHkoXy5jbGlja0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZWxlY3RIYW5kbGVyID0gJC5wcm94eShfLnNlbGVjdEhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZXRQb3NpdGlvbiA9ICQucHJveHkoXy5zZXRQb3NpdGlvbiwgXyk7XG4gICAgICAgICAgICBfLnN3aXBlSGFuZGxlciA9ICQucHJveHkoXy5zd2lwZUhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5kcmFnSGFuZGxlciA9ICQucHJveHkoXy5kcmFnSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmtleUhhbmRsZXIgPSAkLnByb3h5KF8ua2V5SGFuZGxlciwgXyk7XG5cbiAgICAgICAgICAgIF8uaW5zdGFuY2VVaWQgPSBpbnN0YW5jZVVpZCsrO1xuXG4gICAgICAgICAgICAvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuICAgICAgICAgICAgLy8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKG11c3Qgc3RhcnQgd2l0aCA8KVxuICAgICAgICAgICAgLy8gRXh0cmFjdGVkIGZyb20galF1ZXJ5IHYxLjExIHNvdXJjZVxuICAgICAgICAgICAgXy5odG1sRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLztcblxuXG4gICAgICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcbiAgICAgICAgICAgIF8uaW5pdCh0cnVlKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNsaWNrO1xuXG4gICAgfSgpKTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hY3RpdmF0ZUFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stYWN0aXZlJykuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAnZmFsc2UnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hZGRTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0FkZCA9IGZ1bmN0aW9uKG1hcmt1cCwgaW5kZXgsIGFkZEJlZm9yZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBhZGRCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IDAgfHwgKGluZGV4ID49IF8uc2xpZGVDb3VudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgXy4kc2xpZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEJlZm9yZShfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEFmdGVyKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFkZEJlZm9yZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEgJiYgXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgXy4kbGlzdC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRhcmdldEhlaWdodFxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlID0gZnVuY3Rpb24odGFyZ2V0TGVmdCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgYW5pbVByb3BzID0ge30sXG4gICAgICAgICAgICBfID0gdGhpcztcblxuICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gLXRhcmdldExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50TGVmdCA9IC0oXy5jdXJyZW50TGVmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IF8uY3VycmVudExlZnRcbiAgICAgICAgICAgICAgICB9KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogXy5vcHRpb25zLnNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IF8ub3B0aW9ucy5lYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uKG5vdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gTWF0aC5jZWlsKG5vdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgwcHgsJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gTWF0aC5jZWlsKHRhcmdldExlZnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgwcHgsJyArIHRhcmdldExlZnQgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLm9wdGlvbnMuYXNOYXZGb3I7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAmJiBhc05hdkZvciAhPT0gbnVsbCApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gJChhc05hdkZvcikubm90KF8uJHNsaWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNOYXZGb3I7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFzTmF2Rm9yID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAhPT0gbnVsbCAmJiB0eXBlb2YgYXNOYXZGb3IgPT09ICdvYmplY3QnICkge1xuICAgICAgICAgICAgYXNOYXZGb3IuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5zbGljaygnZ2V0U2xpY2snKTtcbiAgICAgICAgICAgICAgICBpZighdGFyZ2V0LnVuc2xpY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2xpZGVIYW5kbGVyKGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gXy50cmFuc2Zvcm1UeXBlICsgJyAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnb3BhY2l0eSAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoIF8uYXV0b1BsYXlJdGVyYXRvciwgXy5vcHRpb25zLmF1dG9wbGF5U3BlZWQgKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUNsZWFyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmF1dG9QbGF5VGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIGlmICggIV8ucGF1c2VkICYmICFfLmludGVycnVwdGVkICYmICFfLmZvY3Vzc2VkICkge1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8uZGlyZWN0aW9uID09PSAxICYmICggXy5jdXJyZW50U2xpZGUgKyAxICkgPT09ICggXy5zbGlkZUNvdW50IC0gMSApKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmICggXy5kaXJlY3Rpb24gPT09IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggXy5jdXJyZW50U2xpZGUgLSAxID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlVG8gKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgPSAkKF8ub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ID0gJChfLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcblxuICAgICAgICAgICAgaWYoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucHJlcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkKCBfLiRuZXh0QXJyb3cgKVxuXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZERvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBkb3Q7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICAgICAgZG90ID0gJCgnPHVsIC8+JykuYWRkQ2xhc3MoXy5vcHRpb25zLmRvdHNDbGFzcyk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPD0gXy5nZXREb3RDb3VudCgpOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBkb3QuYXBwZW5kKCQoJzxsaSAvPicpLmFwcGVuZChfLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcywgXywgaSkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kZG90cyA9IGRvdC5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kRG90cyk7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuZmluZCgnbGknKS5maXJzdCgpLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkT3V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlcyA9XG4gICAgICAgICAgICBfLiRzbGlkZXJcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oIF8ub3B0aW9ucy5zbGlkZSArICc6bm90KC5zbGljay1jbG9uZWQpJylcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KVxuICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpXG4gICAgICAgICAgICAgICAgLmRhdGEoJ29yaWdpbmFsU3R5bGluZycsICQoZWxlbWVudCkuYXR0cignc3R5bGUnKSB8fCAnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stc2xpZGVyJyk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjayA9IChfLnNsaWRlQ291bnQgPT09IDApID9cbiAgICAgICAgICAgICQoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhfLiRzbGlkZXIpIDpcbiAgICAgICAgICAgIF8uJHNsaWRlcy53cmFwQWxsKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykucGFyZW50KCk7XG5cbiAgICAgICAgXy4kbGlzdCA9IF8uJHNsaWRlVHJhY2sud3JhcChcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2xpY2stbGlzdFwiLz4nKS5wYXJlbnQoKTtcbiAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoJ29wYWNpdHknLCAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgfHwgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyKS5ub3QoJ1tzcmNdJykuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcblxuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG5cbiAgICAgICAgXy5idWlsZERvdHMoKTtcblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcblxuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKHR5cGVvZiBfLmN1cnJlbnRTbGlkZSA9PT0gJ251bWJlcicgPyBfLmN1cnJlbnRTbGlkZSA6IDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0LmFkZENsYXNzKCdkcmFnZ2FibGUnKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZFJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGEsIGIsIGMsIG5ld1NsaWRlcywgbnVtT2ZTbGlkZXMsIG9yaWdpbmFsU2xpZGVzLHNsaWRlc1BlclNlY3Rpb247XG5cbiAgICAgICAgbmV3U2xpZGVzID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlci5jaGlsZHJlbigpO1xuXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMCkge1xuXG4gICAgICAgICAgICBzbGlkZXNQZXJTZWN0aW9uID0gXy5vcHRpb25zLnNsaWRlc1BlclJvdyAqIF8ub3B0aW9ucy5yb3dzO1xuICAgICAgICAgICAgbnVtT2ZTbGlkZXMgPSBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMubGVuZ3RoIC8gc2xpZGVzUGVyU2VjdGlvblxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZm9yKGEgPSAwOyBhIDwgbnVtT2ZTbGlkZXM7IGErKyl7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgZm9yKGIgPSAwOyBiIDwgXy5vcHRpb25zLnJvd3M7IGIrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGZvcihjID0gMDsgYyA8IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3c7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IChhICogc2xpZGVzUGVyU2VjdGlvbiArICgoYiAqIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdTbGlkZXMuYXBwZW5kQ2hpbGQoc2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQobmV3U2xpZGVzKTtcbiAgICAgICAgICAgIF8uJHNsaWRlci5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY2hpbGRyZW4oKVxuICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOigxMDAgLyBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArICclJyxcbiAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tSZXNwb25zaXZlID0gZnVuY3Rpb24oaW5pdGlhbCwgZm9yY2VVcGRhdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha3BvaW50LCB0YXJnZXRCcmVha3BvaW50LCByZXNwb25kVG9XaWR0aCwgdHJpZ2dlckJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNsaWRlcldpZHRoID0gXy4kc2xpZGVyLndpZHRoKCk7XG4gICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIHx8ICQod2luZG93KS53aWR0aCgpO1xuXG4gICAgICAgIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3dpbmRvdycpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gd2luZG93V2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdzbGlkZXInKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHNsaWRlcldpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnbWluJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBNYXRoLm1pbih3aW5kb3dXaWR0aCwgc2xpZGVyV2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSAmJlxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yIChicmVha3BvaW50IGluIF8uYnJlYWtwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcmlnaW5hbFNldHRpbmdzLm1vYmlsZUZpcnN0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoIDwgXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoID4gXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChfLmFjdGl2ZUJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IF8uYWN0aXZlQnJlYWtwb2ludCB8fCBmb3JjZVVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChfLmFjdGl2ZUJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gXy5vcmlnaW5hbFNldHRpbmdzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gb25seSB0cmlnZ2VyIGJyZWFrcG9pbnRzIGR1cmluZyBhbiBhY3R1YWwgYnJlYWsuIG5vdCBvbiBpbml0aWFsaXplLlxuICAgICAgICAgICAgaWYoICFpbml0aWFsICYmIHRyaWdnZXJCcmVha3BvaW50ICE9PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYnJlYWtwb2ludCcsIFtfLCB0cmlnZ2VyQnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoYW5nZVNsaWRlID0gZnVuY3Rpb24oZXZlbnQsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCksXG4gICAgICAgICAgICBpbmRleE9mZnNldCwgc2xpZGVPZmZzZXQsIHVuZXZlbk9mZnNldDtcblxuICAgICAgICAvLyBJZiB0YXJnZXQgaXMgYSBsaW5rLCBwcmV2ZW50IGRlZmF1bHQgYWN0aW9uLlxuICAgICAgICBpZigkdGFyZ2V0LmlzKCdhJykpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0YXJnZXQgaXMgbm90IHRoZSA8bGk+IGVsZW1lbnQgKGllOiBhIGNoaWxkKSwgZmluZCB0aGUgPGxpPi5cbiAgICAgICAgaWYoISR0YXJnZXQuaXMoJ2xpJykpIHtcbiAgICAgICAgICAgICR0YXJnZXQgPSAkdGFyZ2V0LmNsb3Nlc3QoJ2xpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB1bmV2ZW5PZmZzZXQgPSAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKTtcbiAgICAgICAgaW5kZXhPZmZzZXQgPSB1bmV2ZW5PZmZzZXQgPyAwIDogKF8uc2xpZGVDb3VudCAtIF8uY3VycmVudFNsaWRlKSAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEubWVzc2FnZSkge1xuXG4gICAgICAgICAgICBjYXNlICdwcmV2aW91cyc6XG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSAtIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlICsgc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdpbmRleCc6XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuZGF0YS5pbmRleCA9PT0gMCA/IDAgOlxuICAgICAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4IHx8ICR0YXJnZXQuaW5kZXgoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY2hlY2tOYXZpZ2FibGUoaW5kZXgpLCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgICR0YXJnZXQuY2hpbGRyZW4oKS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja05hdmlnYWJsZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgbmF2aWdhYmxlcywgcHJldk5hdmlnYWJsZTtcblxuICAgICAgICBuYXZpZ2FibGVzID0gXy5nZXROYXZpZ2FibGVJbmRleGVzKCk7XG4gICAgICAgIHByZXZOYXZpZ2FibGUgPSAwO1xuICAgICAgICBpZiAoaW5kZXggPiBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIGluZGV4ID0gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgbiBpbiBuYXZpZ2FibGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgbmF2aWdhYmxlc1tuXSkge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHByZXZOYXZpZ2FibGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmV2TmF2aWdhYmxlID0gbmF2aWdhYmxlc1tuXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzICYmIF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGRvdHMub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5vZmYoJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vZmYoXy52aXNpYmlsaXR5Q2hhbmdlLCBfLnZpc2liaWxpdHkpO1xuXG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vZmYoJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vZmYoJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLm9yaWVudGF0aW9uQ2hhbmdlKTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ucmVzaXplKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9mZignZHJhZ3N0YXJ0JywgXy5wcmV2ZW50RGVmYXVsdCk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgb3JpZ2luYWxTbGlkZXM7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAwKSB7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlcy5jaGlsZHJlbigpLmNoaWxkcmVuKCk7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG9yaWdpbmFsU2xpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGlja0hhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5zaG91bGRDbGljayA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihyZWZyZXNoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICBfLmNsZWFuVXBFdmVudHMoKTtcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5kZXRhY2goKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoIF8uaHRtbEV4cHIudGVzdCggXy5vcHRpb25zLnByZXZBcnJvdyApKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kbmV4dEFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMubmV4dEFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChfLiRzbGlkZXMpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zbGljay1pbmRleCcpXG4gICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJGxpc3QuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hcHBlbmQoXy4kc2xpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uY2xlYW5VcFJvd3MoKTtcblxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgXy51bnNsaWNrZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmKCFyZWZyZXNoKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZGVzdHJveScsIFtfXSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJyc7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGUgPSBmdW5jdGlvbihzbGlkZUluZGV4LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZU91dCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tGaWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGZpbHRlciAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5maWx0ZXIoZmlsdGVyKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZvY3VzSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXJcbiAgICAgICAgICAgIC5vZmYoJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snKVxuICAgICAgICAgICAgLm9uKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJywgJyonLCBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHZhciAkc2YgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy5wYXVzZU9uRm9jdXMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9jdXNzZWQgPSAkc2YuaXMoJzpmb2N1cycpO1xuICAgICAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldEN1cnJlbnQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tDdXJyZW50U2xpZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBfLmN1cnJlbnRTbGlkZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0RG90Q291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGJyZWFrUG9pbnQgPSAwO1xuICAgICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICAgIHZhciBwYWdlclF0eSA9IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2UgaWYoIV8ub3B0aW9ucy5hc05hdkZvcikge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSAxICsgTWF0aC5jZWlsKChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYWdlclF0eSAtIDE7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldExlZnQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgIHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwLFxuICAgICAgICAgICAgdGFyZ2V0U2xpZGUsXG4gICAgICAgICAgICBjb2VmO1xuXG4gICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IChfLnNsaWRlV2lkdGggKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xuICAgICAgICAgICAgICAgIGNvZWYgPSAtMVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29lZiA9IC0xLjU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29lZiA9IC0yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAodmVydGljYWxIZWlnaHQgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIGNvZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPiBfLnNsaWRlQ291bnQgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiBfLnNsaWRlV2lkdGgpICogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiBfLnNsaWRlV2lkdGgpICogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC0gXy5zbGlkZUNvdW50KSAqIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC0gXy5zbGlkZUNvdW50KSAqIHZlcnRpY2FsSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSkgLyAyKSAtICgoXy5zbGlkZVdpZHRoICogXy5zbGlkZUNvdW50KSAvIDIpO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSAtIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiBfLnNsaWRlV2lkdGgpICogLTEpICsgXy5zbGlkZU9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMSkgKyB2ZXJ0aWNhbE9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCArPSAoXy4kbGlzdC53aWR0aCgpIC0gdGFyZ2V0U2xpZGUub3V0ZXJXaWR0aCgpKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0TGVmdDtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0T3B0aW9uID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfLm9wdGlvbnNbb3B0aW9uXTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSAwLFxuICAgICAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgICBtYXg7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIGNvdW50ZXIgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudCAqIDI7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IG1heCkge1xuICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGJyZWFrUG9pbnQpO1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleGVzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkLCBzd2lwZWRTbGlkZSwgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlID8gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgOiAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1zbGlkZScpLmVhY2goZnVuY3Rpb24oaW5kZXgsIHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyAoJChzbGlkZSkub3V0ZXJXaWR0aCgpIC8gMikgPiAoXy5zd2lwZUxlZnQgKiAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVkU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQgPSBNYXRoLmFicygkKHN3aXBlZFNsaWRlKS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykgLSBfLmN1cnJlbnRTbGlkZSkgfHwgMTtcblxuICAgICAgICAgICAgcmV0dXJuIHNsaWRlc1RyYXZlcnNlZDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nb1RvID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR29UbyA9IGZ1bmN0aW9uKHNsaWRlLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgIGluZGV4OiBwYXJzZUludChzbGlkZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZG9udEFuaW1hdGUpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oY3JlYXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCEkKF8uJHNsaWRlcikuaGFzQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJykpIHtcblxuICAgICAgICAgICAgJChfLiRzbGlkZXIpLmFkZENsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuXG4gICAgICAgICAgICBfLmJ1aWxkUm93cygpO1xuICAgICAgICAgICAgXy5idWlsZE91dCgpO1xuICAgICAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICAgICAgXy5zdGFydExvYWQoKTtcbiAgICAgICAgICAgIF8ubG9hZFNsaWRlcigpO1xuICAgICAgICAgICAgXy5pbml0aWFsaXplRXZlbnRzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSh0cnVlKTtcbiAgICAgICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcmVhdGlvbikge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2luaXQnLCBbX10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLmluaXRBREEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgbnVtRG90R3JvdXBzID0gTWF0aC5jZWlsKF8uc2xpZGVDb3VudCAvIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLFxuICAgICAgICAgICAgICAgIHRhYkNvbnRyb2xJbmRleGVzID0gXy5nZXROYXZpZ2FibGVJbmRleGVzKCkuZmlsdGVyKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHZhbCA+PSAwKSAmJiAodmFsIDwgXy5zbGlkZUNvdW50KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXMuYWRkKF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMubm90KF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGVDb250cm9sSW5kZXggPSB0YWJDb250cm9sSW5kZXhlcy5pbmRleE9mKGkpO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAndGFicGFuZWwnLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIGksXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVDb250cm9sSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgdmFyIGFyaWFCdXR0b25Db250cm9sID0gJ3NsaWNrLXNsaWRlLWNvbnRyb2wnICsgXy5pbnN0YW5jZVVpZCArIHNsaWRlQ29udHJvbEluZGV4XG4gICAgICAgICAgICAgICAgICAgaWYgKCQoJyMnICsgYXJpYUJ1dHRvbkNvbnRyb2wpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFCdXR0b25Db250cm9sXG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuYXR0cigncm9sZScsICd0YWJsaXN0JykuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFwcGVkU2xpZGVJbmRleCA9IHRhYkNvbnRyb2xJbmRleGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAncHJlc2VudGF0aW9uJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdidXR0b24nKS5maXJzdCgpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgaSxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIG1hcHBlZFNsaWRlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogKGkgKyAxKSArICcgb2YgJyArIG51bURvdEdyb3VwcyxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pLmVxKF8uY3VycmVudFNsaWRlKS5maW5kKCdidXR0b24nKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcbiAgICAgICAgICAgIH0pLmVuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaT1fLmN1cnJlbnRTbGlkZSwgbWF4PWkrXy5vcHRpb25zLnNsaWRlc1RvU2hvdzsgaSA8IG1heDsgaSsrKSB7XG4gICAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uQ2hhbmdlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoaSkuYXR0cih7J3RhYmluZGV4JzogJzAnfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShpKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uYWN0aXZhdGVBREEoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFycm93RXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0RG90RXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnXG4gICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kZG90cy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXIgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5wYXVzZU9uSG92ZXIgKSB7XG5cbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5pbml0QXJyb3dFdmVudHMoKTtcblxuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3N0YXJ0J1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdtb3ZlJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKF8udmlzaWJpbGl0eUNoYW5nZSwgJC5wcm94eShfLnZpc2liaWxpdHksIF8pKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vbignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5vcmllbnRhdGlvbkNoYW5nZSwgXykpO1xuXG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ucmVzaXplLCBfKSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vbignZHJhZ3N0YXJ0JywgXy5wcmV2ZW50RGVmYXVsdCk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcbiAgICAgICAgJChfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFVJID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnNob3coKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUua2V5SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICAgLy9Eb250IHNsaWRlIGlmIHRoZSBjdXJzb3IgaXMgaW5zaWRlIHRoZSBmb3JtIGZpZWxkcyBhbmQgYXJyb3cga2V5cyBhcmUgcHJlc3NlZFxuICAgICAgICBpZighZXZlbnQudGFyZ2V0LnRhZ05hbWUubWF0Y2goJ1RFWFRBUkVBfElOUFVUfFNFTEVDVCcpKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzcgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICduZXh0JyA6ICAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzkgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICdwcmV2aW91cycgOiAnbmV4dCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxhenlMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgbG9hZFJhbmdlLCBjbG9uZVJhbmdlLCByYW5nZVN0YXJ0LCByYW5nZUVuZDtcblxuICAgICAgICBmdW5jdGlvbiBsb2FkSW1hZ2VzKGltYWdlc1Njb3BlKSB7XG5cbiAgICAgICAgICAgICQoJ2ltZ1tkYXRhLWxhenldJywgaW1hZ2VzU2NvcGUpLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNvdXJjZSA9ICQodGhpcykuYXR0cignZGF0YS1sYXp5JyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU3JjU2V0ID0gJCh0aGlzKS5hdHRyKCdkYXRhLXNyY3NldCcpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNpemVzICA9ICQodGhpcykuYXR0cignZGF0YS1zaXplcycpIHx8IF8uJHNsaWRlci5hdHRyKCdkYXRhLXNpemVzJyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAwIH0sIDEwMCwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmNzZXQnLCBpbWFnZVNyY1NldCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmMnLCBpbWFnZVNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAxIH0sIDIwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgW18sIGltYWdlLCBpbWFnZVNvdXJjZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLmN1cnJlbnRTbGlkZSArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gcmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gTWF0aC5tYXgoMCwgXy5jdXJyZW50U2xpZGUgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSAyICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkgKyBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgXy5jdXJyZW50U2xpZGUgOiBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIHJhbmdlRW5kID0gTWF0aC5jZWlsKHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZVN0YXJ0ID4gMCkgcmFuZ2VTdGFydC0tO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZUVuZCA8PSBfLnNsaWRlQ291bnQpIHJhbmdlRW5kKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJykuc2xpY2UocmFuZ2VTdGFydCwgcmFuZ2VFbmQpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdhbnRpY2lwYXRlZCcpIHtcbiAgICAgICAgICAgIHZhciBwcmV2U2xpZGUgPSByYW5nZVN0YXJ0IC0gMSxcbiAgICAgICAgICAgICAgICBuZXh0U2xpZGUgPSByYW5nZUVuZCxcbiAgICAgICAgICAgICAgICAkc2xpZGVzID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZTbGlkZSA8IDApIHByZXZTbGlkZSA9IF8uc2xpZGVDb3VudCAtIDE7XG4gICAgICAgICAgICAgICAgbG9hZFJhbmdlID0gbG9hZFJhbmdlLmFkZCgkc2xpZGVzLmVxKHByZXZTbGlkZSkpO1xuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShuZXh0U2xpZGUpKTtcbiAgICAgICAgICAgICAgICBwcmV2U2xpZGUtLTtcbiAgICAgICAgICAgICAgICBuZXh0U2xpZGUrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRJbWFnZXMobG9hZFJhbmdlKTtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKDAsIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAqIC0xKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubG9hZFNsaWRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jc3Moe1xuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICBfLmluaXRVSSgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdwcm9ncmVzc2l2ZScpIHtcbiAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm5leHQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tOZXh0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUub3JpZW50YXRpb25DaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wYXVzZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BhdXNlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBsYXkgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQbGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgXy5vcHRpb25zLmF1dG9wbGF5ID0gdHJ1ZTtcbiAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBvc3RTbGlkZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmKCAhXy51bnNsaWNrZWQgKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhZnRlckNoYW5nZScsIFtfLCBpbmRleF0pO1xuXG4gICAgICAgICAgICBfLmFuaW1hdGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkY3VycmVudFNsaWRlID0gJChfLiRzbGlkZXMuZ2V0KF8uY3VycmVudFNsaWRlKSk7XG4gICAgICAgICAgICAgICAgICAgICRjdXJyZW50U2xpZGUuYXR0cigndGFiaW5kZXgnLCAwKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXYgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQcmV2ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcm9ncmVzc2l2ZUxhenlMb2FkID0gZnVuY3Rpb24oIHRyeUNvdW50ICkge1xuXG4gICAgICAgIHRyeUNvdW50ID0gdHJ5Q291bnQgfHwgMTtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkaW1nc1RvTG9hZCA9ICQoICdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlciApLFxuICAgICAgICAgICAgaW1hZ2UsXG4gICAgICAgICAgICBpbWFnZVNvdXJjZSxcbiAgICAgICAgICAgIGltYWdlU3JjU2V0LFxuICAgICAgICAgICAgaW1hZ2VTaXplcyxcbiAgICAgICAgICAgIGltYWdlVG9Mb2FkO1xuXG4gICAgICAgIGlmICggJGltZ3NUb0xvYWQubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBpbWFnZSA9ICRpbWdzVG9Mb2FkLmZpcnN0KCk7XG4gICAgICAgICAgICBpbWFnZVNvdXJjZSA9IGltYWdlLmF0dHIoJ2RhdGEtbGF6eScpO1xuICAgICAgICAgICAgaW1hZ2VTcmNTZXQgPSBpbWFnZS5hdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgICAgaW1hZ2VTaXplcyAgPSBpbWFnZS5hdHRyKCdkYXRhLXNpemVzJykgfHwgXy4kc2xpZGVyLmF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgICAgICAgIGltYWdlVG9Mb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGltYWdlU3JjU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTaXplcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc2l6ZXMnLCBpbWFnZVNpemVzICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAuYXR0ciggJ3NyYycsIGltYWdlU291cmNlIClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG4gICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmICggdHJ5Q291bnQgPCAzICkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiB0cnkgdG8gbG9hZCB0aGUgaW1hZ2UgMyB0aW1lcyxcbiAgICAgICAgICAgICAgICAgICAgICogbGVhdmUgYSBzbGlnaHQgZGVsYXkgc28gd2UgZG9uJ3QgZ2V0XG4gICAgICAgICAgICAgICAgICAgICAqIHNlcnZlcnMgYmxvY2tpbmcgdGhlIHJlcXVlc3QuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCggdHJ5Q291bnQgKyAxICk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhbGxJbWFnZXNMb2FkZWQnLCBbIF8gXSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oIGluaXRpYWxpemluZyApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGN1cnJlbnRTbGlkZSwgbGFzdFZpc2libGVJbmRleDtcblxuICAgICAgICBsYXN0VmlzaWJsZUluZGV4ID0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcblxuICAgICAgICAvLyBpbiBub24taW5maW5pdGUgc2xpZGVycywgd2UgZG9uJ3Qgd2FudCB0byBnbyBwYXN0IHRoZVxuICAgICAgICAvLyBsYXN0IHZpc2libGUgaW5kZXguXG4gICAgICAgIGlmKCAhXy5vcHRpb25zLmluZmluaXRlICYmICggXy5jdXJyZW50U2xpZGUgPiBsYXN0VmlzaWJsZUluZGV4ICkpIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gbGFzdFZpc2libGVJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGxlc3Mgc2xpZGVzIHRoYW4gdG8gc2hvdywgZ28gdG8gc3RhcnQuXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuXG4gICAgICAgIF8uZGVzdHJveSh0cnVlKTtcblxuICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzLCB7IGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlIH0pO1xuXG4gICAgICAgIF8uaW5pdCgpO1xuXG4gICAgICAgIGlmKCAhaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBjdXJyZW50U2xpZGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBicmVha3BvaW50LCBjdXJyZW50QnJlYWtwb2ludCwgbCxcbiAgICAgICAgICAgIHJlc3BvbnNpdmVTZXR0aW5ncyA9IF8ub3B0aW9ucy5yZXNwb25zaXZlIHx8IG51bGw7XG5cbiAgICAgICAgaWYgKCAkLnR5cGUocmVzcG9uc2l2ZVNldHRpbmdzKSA9PT0gJ2FycmF5JyAmJiByZXNwb25zaXZlU2V0dGluZ3MubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IF8ub3B0aW9ucy5yZXNwb25kVG8gfHwgJ3dpbmRvdyc7XG5cbiAgICAgICAgICAgIGZvciAoIGJyZWFrcG9pbnQgaW4gcmVzcG9uc2l2ZVNldHRpbmdzICkge1xuXG4gICAgICAgICAgICAgICAgbCA9IF8uYnJlYWtwb2ludHMubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2l2ZVNldHRpbmdzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLmJyZWFrcG9pbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBicmVha3BvaW50cyBhbmQgY3V0IG91dCBhbnkgZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gb25lcyB3aXRoIHRoZSBzYW1lIGJyZWFrcG9pbnQgbnVtYmVyLCB3ZSBkb24ndCB3YW50IGR1cGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF8uYnJlYWtwb2ludHNbbF0gJiYgXy5icmVha3BvaW50c1tsXSA9PT0gY3VycmVudEJyZWFrcG9pbnQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5zcGxpY2UobCwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMucHVzaChjdXJyZW50QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW2N1cnJlbnRCcmVha3BvaW50XSA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5zZXR0aW5ncztcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoIF8ub3B0aW9ucy5tb2JpbGVGaXJzdCApID8gYS1iIDogYi1hO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWluaXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2tcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oXy5vcHRpb25zLnNsaWRlKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgJiYgXy5jdXJyZW50U2xpZGUgIT09IDApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuXG4gICAgICAgIF8uc2V0UHJvcHMoKTtcbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcbiAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgXy5pbml0QXJyb3dFdmVudHMoKTtcbiAgICAgICAgXy5idWlsZERvdHMoKTtcbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKGZhbHNlLCB0cnVlKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xuXG4gICAgICAgIF8ucGF1c2VkID0gIV8ub3B0aW9ucy5hdXRvcGxheTtcbiAgICAgICAgXy5hdXRvUGxheSgpO1xuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdyZUluaXQnLCBbX10pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpICE9PSBfLndpbmRvd1dpZHRoKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoXy53aW5kb3dEZWxheSk7XG4gICAgICAgICAgICBfLndpbmRvd0RlbGF5ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgICAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHsgXy5zZXRQb3NpdGlvbigpOyB9XG4gICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlbW92ZVNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUmVtb3ZlID0gZnVuY3Rpb24oaW5kZXgsIHJlbW92ZUJlZm9yZSwgcmVtb3ZlQWxsKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJlbW92ZUJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAwIDogXy5zbGlkZUNvdW50IC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gLS1pbmRleCA6IGluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8IDEgfHwgaW5kZXggPCAwIHx8IGluZGV4ID4gXy5zbGlkZUNvdW50IC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICBpZiAocmVtb3ZlQWxsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCkucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZXEoaW5kZXgpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldENTUyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgcG9zaXRpb25Qcm9wcyA9IHt9LFxuICAgICAgICAgICAgeCwgeTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcG9zaXRpb24gPSAtcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgeCA9IF8ucG9zaXRpb25Qcm9wID09ICdsZWZ0JyA/IE1hdGguY2VpbChwb3NpdGlvbikgKyAncHgnIDogJzBweCc7XG4gICAgICAgIHkgPSBfLnBvc2l0aW9uUHJvcCA9PSAndG9wJyA/IE1hdGguY2VpbChwb3NpdGlvbikgKyAncHgnIDogJzBweCc7XG5cbiAgICAgICAgcG9zaXRpb25Qcm9wc1tfLnBvc2l0aW9uUHJvcF0gPSBwb3NpdGlvbjtcblxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zaXRpb25Qcm9wcyA9IHt9O1xuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArIHggKyAnLCAnICsgeSArICcpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgnICsgeCArICcsICcgKyB5ICsgJywgMHB4KSc7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kbGlzdC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAoJzBweCAnICsgXy5vcHRpb25zLmNlbnRlclBhZGRpbmcpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRsaXN0LmhlaWdodChfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kbGlzdC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAoXy5vcHRpb25zLmNlbnRlclBhZGRpbmcgKyAnIDBweCcpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLmxpc3RXaWR0aCA9IF8uJGxpc3Qud2lkdGgoKTtcbiAgICAgICAgXy5saXN0SGVpZ2h0ID0gXy4kbGlzdC5oZWlnaHQoKTtcblxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlICYmIF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKE1hdGguY2VpbCgoXy5zbGlkZVdpZHRoICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoNTAwMCAqIF8uc2xpZGVDb3VudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGgpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKChfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKSAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvZmZzZXQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKHRydWUpIC0gXy4kc2xpZGVzLmZpcnN0KCkud2lkdGgoKTtcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkgXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykud2lkdGgoXy5zbGlkZVdpZHRoIC0gb2Zmc2V0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0RmFkZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQ7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy5zbGlkZVdpZHRoICogaW5kZXgpICogLTE7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkuY3NzKHtcbiAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDEsXG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEgJiYgXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgXy4kbGlzdC5jc3MoJ2hlaWdodCcsIHRhcmdldEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0T3B0aW9uID1cbiAgICBTbGljay5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWNjZXB0cyBhcmd1bWVudHMgaW4gZm9ybWF0IG9mOlxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzaW5nbGUgb3B0aW9uJ3MgdmFsdWU6XG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNldCBvZiByZXNwb25zaXZlIG9wdGlvbnM6XG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgJ3Jlc3BvbnNpdmUnLCBbe30sIC4uLl0sIHJlZnJlc2ggKVxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgdXBkYXRpbmcgbXVsdGlwbGUgdmFsdWVzIGF0IG9uY2UgKG5vdCByZXNwb25zaXZlKVxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIHsgJ29wdGlvbic6IHZhbHVlLCAuLi4gfSwgcmVmcmVzaCApXG4gICAgICAgICAqL1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgbCwgaXRlbSwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCA9IGZhbHNlLCB0eXBlO1xuXG4gICAgICAgIGlmKCAkLnR5cGUoIGFyZ3VtZW50c1swXSApID09PSAnb2JqZWN0JyApIHtcblxuICAgICAgICAgICAgb3B0aW9uID0gIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB0eXBlID0gJ211bHRpcGxlJztcblxuICAgICAgICB9IGVsc2UgaWYgKCAkLnR5cGUoIGFyZ3VtZW50c1swXSApID09PSAnc3RyaW5nJyApIHtcblxuICAgICAgICAgICAgb3B0aW9uID0gIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHZhbHVlID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1syXTtcblxuICAgICAgICAgICAgaWYgKCBhcmd1bWVudHNbMF0gPT09ICdyZXNwb25zaXZlJyAmJiAkLnR5cGUoIGFyZ3VtZW50c1sxXSApID09PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdyZXNwb25zaXZlJztcblxuICAgICAgICAgICAgfSBlbHNlIGlmICggdHlwZW9mIGFyZ3VtZW50c1sxXSAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3NpbmdsZSc7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCB0eXBlID09PSAnc2luZ2xlJyApIHtcblxuICAgICAgICAgICAgXy5vcHRpb25zW29wdGlvbl0gPSB2YWx1ZTtcblxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09ICdtdWx0aXBsZScgKSB7XG5cbiAgICAgICAgICAgICQuZWFjaCggb3B0aW9uICwgZnVuY3Rpb24oIG9wdCwgdmFsICkge1xuXG4gICAgICAgICAgICAgICAgXy5vcHRpb25zW29wdF0gPSB2YWw7XG5cbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ3Jlc3BvbnNpdmUnICkge1xuXG4gICAgICAgICAgICBmb3IgKCBpdGVtIGluIHZhbHVlICkge1xuXG4gICAgICAgICAgICAgICAgaWYoICQudHlwZSggXy5vcHRpb25zLnJlc3BvbnNpdmUgKSAhPT0gJ2FycmF5JyApIHtcblxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZSA9IFsgdmFsdWVbaXRlbV0gXTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbCA9IF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aC0xO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgcmVzcG9uc2l2ZSBvYmplY3QgYW5kIHNwbGljZSBvdXQgZHVwbGljYXRlcy5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoIGwgPj0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy5yZXNwb25zaXZlW2xdLmJyZWFrcG9pbnQgPT09IHZhbHVlW2l0ZW1dLmJyZWFrcG9pbnQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5zcGxpY2UobCwxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsLS07XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnB1c2goIHZhbHVlW2l0ZW1dICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCByZWZyZXNoICkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0RGltZW5zaW9ucygpO1xuXG4gICAgICAgIF8uc2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zZXRDU1MoXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnNldEZhZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzZXRQb3NpdGlvbicsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFByb3BzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keS5zdHlsZTtcblxuICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gdHJ1ZSA/ICd0b3AnIDogJ2xlZnQnO1xuXG4gICAgICAgIGlmIChfLnBvc2l0aW9uUHJvcCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stdmVydGljYWwnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stdmVydGljYWwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5U3R5bGUuV2Via2l0VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBib2R5U3R5bGUuTW96VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBib2R5U3R5bGUubXNUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudXNlQ1NTID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5mYWRlICkge1xuICAgICAgICAgICAgaWYgKCB0eXBlb2YgXy5vcHRpb25zLnpJbmRleCA9PT0gJ251bWJlcicgKSB7XG4gICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy56SW5kZXggPCAzICkge1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSBfLmRlZmF1bHRzLnpJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5U3R5bGUuT1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ09UcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1vLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ09UcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5Nb3pUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdNb3pUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1tb3otdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnTW96VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUuTW96UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUud2Via2l0VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnd2Via2l0VHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctd2Via2l0LXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ3dlYmtpdFRyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnbXNUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1tcy10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdtc1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ3RyYW5zaXRpb24nO1xuICAgICAgICB9XG4gICAgICAgIF8udHJhbnNmb3Jtc0VuYWJsZWQgPSBfLm9wdGlvbnMudXNlVHJhbnNmb3JtICYmIChfLmFuaW1UeXBlICE9PSBudWxsICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKTtcbiAgICB9O1xuXG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0U2xpZGVDbGFzc2VzID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQsIGFsbFNsaWRlcywgaW5kZXhPZmZzZXQsIHJlbWFpbmRlcjtcblxuICAgICAgICBhbGxTbGlkZXMgPSBfLiRzbGlkZXJcbiAgICAgICAgICAgIC5maW5kKCcuc2xpY2stc2xpZGUnKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgIC5lcShpbmRleClcbiAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY3VycmVudCcpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICB2YXIgZXZlbkNvZWYgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICUgMiA9PT0gMCA/IDEgOiAwO1xuXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IGNlbnRlck9mZnNldCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gMSkgLSBjZW50ZXJPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXggLSBjZW50ZXJPZmZzZXQgKyBldmVuQ29lZiwgaW5kZXggKyBjZW50ZXJPZmZzZXQgKyAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCAtIGNlbnRlck9mZnNldCArIDEgKyBldmVuQ29lZiwgaW5kZXhPZmZzZXQgKyBjZW50ZXJPZmZzZXQgKyAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShhbGxTbGlkZXMubGVuZ3RoIC0gMSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gXy5zbGlkZUNvdW50IC0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5lcShpbmRleClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSkge1xuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCwgaW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsbFNsaWRlcy5sZW5ndGggPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICByZW1haW5kZXIgPSBfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4IDogaW5kZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgJiYgKF8uc2xpZGVDb3VudCAtIGluZGV4KSA8IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gcmVtYWluZGVyKSwgaW5kZXhPZmZzZXQgKyByZW1haW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQsIGluZGV4T2Zmc2V0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdvbmRlbWFuZCcgfHwgXy5vcHRpb25zLmxhenlMb2FkID09PSAnYW50aWNpcGF0ZWQnKSB7XG4gICAgICAgICAgICBfLmxhenlMb2FkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldHVwSW5maW5pdGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBzbGlkZUluZGV4LCBpbmZpbml0ZUNvdW50O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5vcHRpb25zLmNlbnRlck1vZGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIHNsaWRlSW5kZXggPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBfLnNsaWRlQ291bnQ7IGkgPiAoXy5zbGlkZUNvdW50IC1cbiAgICAgICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQpOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5maW5pdGVDb3VudCAgKyBfLnNsaWRlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggKyBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKS5maW5kKCdbaWRdJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdpZCcsICcnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24oIHRvZ2dsZSApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICF0b2dnbGUgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRvZ2dsZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2VsZWN0SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID1cbiAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5pcygnLnNsaWNrLXNsaWRlJykgP1xuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KSA6XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpLnBhcmVudHMoJy5zbGljay1zbGlkZScpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHRhcmdldEVsZW1lbnQuYXR0cignZGF0YS1zbGljay1pbmRleCcpKTtcblxuICAgICAgICBpZiAoIWluZGV4KSBpbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKGluZGV4LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2xpZGVIYW5kbGVyKGluZGV4KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2xpZGVIYW5kbGVyID0gZnVuY3Rpb24oaW5kZXgsIHN5bmMsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIHRhcmdldFNsaWRlLCBhbmltU2xpZGUsIG9sZFNsaWRlLCBzbGlkZUxlZnQsIHRhcmdldExlZnQgPSBudWxsLFxuICAgICAgICAgICAgXyA9IHRoaXMsIG5hdlRhcmdldDtcblxuICAgICAgICBzeW5jID0gc3luYyB8fCBmYWxzZTtcblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUgJiYgXy5vcHRpb25zLndhaXRGb3JBbmltYXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgJiYgXy5jdXJyZW50U2xpZGUgPT09IGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYXNOYXZGb3IoaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0U2xpZGUgPSBpbmRleDtcbiAgICAgICAgdGFyZ2V0TGVmdCA9IF8uZ2V0TGVmdCh0YXJnZXRTbGlkZSk7XG4gICAgICAgIHNsaWRlTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy5jdXJyZW50TGVmdCA9IF8uc3dpcGVMZWZ0ID09PSBudWxsID8gc2xpZGVMZWZ0IDogXy5zd2lwZUxlZnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiBfLmdldERvdENvdW50KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldFNsaWRlIDwgMCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCAtIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgKyB0YXJnZXRTbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRTbGlkZSA+PSBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZSAtIF8uc2xpZGVDb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdiZWZvcmVDaGFuZ2UnLCBbXywgXy5jdXJyZW50U2xpZGUsIGFuaW1TbGlkZV0pO1xuXG4gICAgICAgIG9sZFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgIF8uY3VycmVudFNsaWRlID0gYW5pbVNsaWRlO1xuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hc05hdkZvciApIHtcblxuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gXy5nZXROYXZUYXJnZXQoKTtcbiAgICAgICAgICAgIG5hdlRhcmdldCA9IG5hdlRhcmdldC5zbGljaygnZ2V0U2xpY2snKTtcblxuICAgICAgICAgICAgaWYgKCBuYXZUYXJnZXQuc2xpZGVDb3VudCA8PSBuYXZUYXJnZXQub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICAgICAgbmF2VGFyZ2V0LnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBfLmZhZGVTbGlkZU91dChvbGRTbGlkZSk7XG5cbiAgICAgICAgICAgICAgICBfLmZhZGVTbGlkZShhbmltU2xpZGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLmFuaW1hdGVTbGlkZSh0YXJnZXRMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5oaWRlKCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHhEaXN0LCB5RGlzdCwgciwgc3dpcGVBbmdsZSwgXyA9IHRoaXM7XG5cbiAgICAgICAgeERpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCAtIF8udG91Y2hPYmplY3QuY3VyWDtcbiAgICAgICAgeURpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSAtIF8udG91Y2hPYmplY3QuY3VyWTtcbiAgICAgICAgciA9IE1hdGguYXRhbjIoeURpc3QsIHhEaXN0KTtcblxuICAgICAgICBzd2lwZUFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgIGlmIChzd2lwZUFuZ2xlIDwgMCkge1xuICAgICAgICAgICAgc3dpcGVBbmdsZSA9IDM2MCAtIE1hdGguYWJzKHN3aXBlQW5nbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDQ1KSAmJiAoc3dpcGVBbmdsZSA+PSAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSAzNjApICYmIChzd2lwZUFuZ2xlID49IDMxNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMTM1KSAmJiAoc3dpcGVBbmdsZSA8PSAyMjUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ3JpZ2h0JyA6ICdsZWZ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMTM1KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG93bic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAndXAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICd2ZXJ0aWNhbCc7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZUNvdW50LFxuICAgICAgICAgICAgZGlyZWN0aW9uO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgXy5zd2lwaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uc2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICBfLnNjcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICBfLnNob3VsZENsaWNrID0gKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gMTAgKSA/IGZhbHNlIDogdHJ1ZTtcblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuY3VyWCA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZWRnZScsIFtfLCBfLnN3aXBlRGlyZWN0aW9uKCkgXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPj0gXy50b3VjaE9iamVjdC5taW5Td2lwZSApIHtcblxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCBkaXJlY3Rpb24gKSB7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdkb3duJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcblxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCBkaXJlY3Rpb24gIT0gJ3ZlcnRpY2FsJyApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBzbGlkZUNvdW50ICk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzd2lwZScsIFtfLCBkaXJlY3Rpb24gXSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3RhcnRYICE9PSBfLnRvdWNoT2JqZWN0LmN1clggKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggXy5jdXJyZW50U2xpZGUgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgoXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkgfHwgKCdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCAmJiBfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IGZhbHNlICYmIGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGggOiAxO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RXaWR0aCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0SGVpZ2h0IC8gXy5vcHRpb25zXG4gICAgICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLmFjdGlvbikge1xuXG4gICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZVN0YXJ0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbW92ZSc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZU1vdmUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVFbmQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBlZGdlV2FzSGl0ID0gZmFsc2UsXG4gICAgICAgICAgICBjdXJMZWZ0LCBzd2lwZURpcmVjdGlvbiwgc3dpcGVMZW5ndGgsIHBvc2l0aW9uT2Zmc2V0LCB0b3VjaGVzLCB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xuXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgPyBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgOiBudWxsO1xuXG4gICAgICAgIGlmICghXy5kcmFnZ2luZyB8fCBfLnNjcm9sbGluZyB8fCB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3coXy50b3VjaE9iamVjdC5jdXJYIC0gXy50b3VjaE9iamVjdC5zdGFydFgsIDIpKSk7XG5cbiAgICAgICAgdmVydGljYWxTd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3coXy50b3VjaE9iamVjdC5jdXJZIC0gXy50b3VjaE9iamVjdC5zdGFydFksIDIpKSk7XG5cbiAgICAgICAgaWYgKCFfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nICYmICFfLnN3aXBpbmcgJiYgdmVydGljYWxTd2lwZUxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIF8uc2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gdmVydGljYWxTd2lwZUxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlRGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIF8uc3dpcGluZyA9IHRydWU7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9zaXRpb25PZmZzZXQgPSAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAxIDogLTEpICogKF8udG91Y2hPYmplY3QuY3VyWCA+IF8udG91Y2hPYmplY3Quc3RhcnRYID8gMSA6IC0xKTtcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gXy50b3VjaE9iamVjdC5jdXJZID4gXy50b3VjaE9iamVjdC5zdGFydFkgPyAxIDogLTE7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aDtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKChfLmN1cnJlbnRTbGlkZSA9PT0gMCAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgfHwgKF8uY3VycmVudFNsaWRlID49IF8uZ2V0RG90Q291bnQoKSAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ2xlZnQnKSkge1xuICAgICAgICAgICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCAqIF8ub3B0aW9ucy5lZGdlRnJpY3Rpb247XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgKHN3aXBlTGVuZ3RoICogKF8uJGxpc3QuaGVpZ2h0KCkgLyBfLmxpc3RXaWR0aCkpICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgfHwgXy5vcHRpb25zLnRvdWNoTW92ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5zZXRDU1MoXy5zd2lwZUxlZnQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZVN0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0b3VjaGVzO1xuXG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ICE9PSAxIHx8IF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFggPSBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFkgPSBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLmRyYWdnaW5nID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tVbmZpbHRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kc2xpZGVzQ2FjaGUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5yZW1vdmUoKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRwcmV2QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kbmV4dEFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgICAgICAgICAgLmNzcygnd2lkdGgnLCAnJyk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuc2xpY2sgPSBmdW5jdGlvbihmcm9tQnJlYWtwb2ludCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3Vuc2xpY2snLCBbXywgZnJvbUJyZWFrcG9pbnRdKTtcbiAgICAgICAgXy5kZXN0cm95KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZUFycm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiZcbiAgICAgICAgICAgIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiZcbiAgICAgICAgICAgICFfLm9wdGlvbnMuaW5maW5pdGUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSAxICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRkb3RzXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKCk7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgIC5lcShNYXRoLmZsb29yKF8uY3VycmVudFNsaWRlIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudmlzaWJpbGl0eSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcblxuICAgICAgICAgICAgaWYgKCBkb2N1bWVudFtfLmhpZGRlbl0gKSB7XG5cbiAgICAgICAgICAgICAgICBfLmludGVycnVwdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICAkLmZuLnNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG9wdCA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgbCA9IF8ubGVuZ3RoLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHJldDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHQgPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9wdCA9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICBfW2ldLnNsaWNrID0gbmV3IFNsaWNrKF9baV0sIG9wdCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0ID0gX1tpXS5zbGlja1tvcHRdLmFwcGx5KF9baV0uc2xpY2ssIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXQgIT0gJ3VuZGVmaW5lZCcpIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF87XG4gICAgfTtcblxufSkpO1xuIiwiLyohIE1hZ25pZmljIFBvcHVwIC0gdjEuMS4wIC0gMjAxNi0wMi0yMFxuKiBodHRwOi8vZGltc2VtZW5vdi5jb20vcGx1Z2lucy9tYWduaWZpYy1wb3B1cC9cbiogQ29weXJpZ2h0IChjKSAyMDE2IERtaXRyeSBTZW1lbm92OyAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkgeyBcbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsgXG4gLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLiBcbiBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7IFxuIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7IFxuIC8vIE5vZGUvQ29tbW9uSlMgXG4gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7IFxuIH0gZWxzZSB7IFxuIC8vIEJyb3dzZXIgZ2xvYmFscyBcbiBmYWN0b3J5KHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTsgXG4gfSBcbiB9KGZ1bmN0aW9uKCQpIHsgXG5cbi8qPj5jb3JlKi9cbi8qKlxuICogXG4gKiBNYWduaWZpYyBQb3B1cCBDb3JlIEpTIGZpbGVcbiAqIFxuICovXG5cblxuLyoqXG4gKiBQcml2YXRlIHN0YXRpYyBjb25zdGFudHNcbiAqL1xudmFyIENMT1NFX0VWRU5UID0gJ0Nsb3NlJyxcblx0QkVGT1JFX0NMT1NFX0VWRU5UID0gJ0JlZm9yZUNsb3NlJyxcblx0QUZURVJfQ0xPU0VfRVZFTlQgPSAnQWZ0ZXJDbG9zZScsXG5cdEJFRk9SRV9BUFBFTkRfRVZFTlQgPSAnQmVmb3JlQXBwZW5kJyxcblx0TUFSS1VQX1BBUlNFX0VWRU5UID0gJ01hcmt1cFBhcnNlJyxcblx0T1BFTl9FVkVOVCA9ICdPcGVuJyxcblx0Q0hBTkdFX0VWRU5UID0gJ0NoYW5nZScsXG5cdE5TID0gJ21mcCcsXG5cdEVWRU5UX05TID0gJy4nICsgTlMsXG5cdFJFQURZX0NMQVNTID0gJ21mcC1yZWFkeScsXG5cdFJFTU9WSU5HX0NMQVNTID0gJ21mcC1yZW1vdmluZycsXG5cdFBSRVZFTlRfQ0xPU0VfQ0xBU1MgPSAnbWZwLXByZXZlbnQtY2xvc2UnO1xuXG5cbi8qKlxuICogUHJpdmF0ZSB2YXJzIFxuICovXG4vKmpzaGludCAtVzA3OSAqL1xudmFyIG1mcCwgLy8gQXMgd2UgaGF2ZSBvbmx5IG9uZSBpbnN0YW5jZSBvZiBNYWduaWZpY1BvcHVwIG9iamVjdCwgd2UgZGVmaW5lIGl0IGxvY2FsbHkgdG8gbm90IHRvIHVzZSAndGhpcydcblx0TWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKCl7fSxcblx0X2lzSlEgPSAhISh3aW5kb3cualF1ZXJ5KSxcblx0X3ByZXZTdGF0dXMsXG5cdF93aW5kb3cgPSAkKHdpbmRvdyksXG5cdF9kb2N1bWVudCxcblx0X3ByZXZDb250ZW50VHlwZSxcblx0X3dyYXBDbGFzc2VzLFxuXHRfY3VyclBvcHVwVHlwZTtcblxuXG4vKipcbiAqIFByaXZhdGUgZnVuY3Rpb25zXG4gKi9cbnZhciBfbWZwT24gPSBmdW5jdGlvbihuYW1lLCBmKSB7XG5cdFx0bWZwLmV2Lm9uKE5TICsgbmFtZSArIEVWRU5UX05TLCBmKTtcblx0fSxcblx0X2dldEVsID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBhcHBlbmRUbywgaHRtbCwgcmF3KSB7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0ZWwuY2xhc3NOYW1lID0gJ21mcC0nK2NsYXNzTmFtZTtcblx0XHRpZihodG1sKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBodG1sO1xuXHRcdH1cblx0XHRpZighcmF3KSB7XG5cdFx0XHRlbCA9ICQoZWwpO1xuXHRcdFx0aWYoYXBwZW5kVG8pIHtcblx0XHRcdFx0ZWwuYXBwZW5kVG8oYXBwZW5kVG8pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZihhcHBlbmRUbykge1xuXHRcdFx0YXBwZW5kVG8uYXBwZW5kQ2hpbGQoZWwpO1xuXHRcdH1cblx0XHRyZXR1cm4gZWw7XG5cdH0sXG5cdF9tZnBUcmlnZ2VyID0gZnVuY3Rpb24oZSwgZGF0YSkge1xuXHRcdG1mcC5ldi50cmlnZ2VySGFuZGxlcihOUyArIGUsIGRhdGEpO1xuXG5cdFx0aWYobWZwLnN0LmNhbGxiYWNrcykge1xuXHRcdFx0Ly8gY29udmVydHMgXCJtZnBFdmVudE5hbWVcIiB0byBcImV2ZW50TmFtZVwiIGNhbGxiYWNrIGFuZCB0cmlnZ2VycyBpdCBpZiBpdCdzIHByZXNlbnRcblx0XHRcdGUgPSBlLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgZS5zbGljZSgxKTtcblx0XHRcdGlmKG1mcC5zdC5jYWxsYmFja3NbZV0pIHtcblx0XHRcdFx0bWZwLnN0LmNhbGxiYWNrc1tlXS5hcHBseShtZnAsICQuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0X2dldENsb3NlQnRuID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdGlmKHR5cGUgIT09IF9jdXJyUG9wdXBUeXBlIHx8ICFtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKSB7XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuID0gJCggbWZwLnN0LmNsb3NlTWFya3VwLnJlcGxhY2UoJyV0aXRsZSUnLCBtZnAuc3QudENsb3NlICkgKTtcblx0XHRcdF9jdXJyUG9wdXBUeXBlID0gdHlwZTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG47XG5cdH0sXG5cdC8vIEluaXRpYWxpemUgTWFnbmlmaWMgUG9wdXAgb25seSB3aGVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdF9jaGVja0luc3RhbmNlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoISQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSkge1xuXHRcdFx0Lypqc2hpbnQgLVcwMjAgKi9cblx0XHRcdG1mcCA9IG5ldyBNYWduaWZpY1BvcHVwKCk7XG5cdFx0XHRtZnAuaW5pdCgpO1xuXHRcdFx0JC5tYWduaWZpY1BvcHVwLmluc3RhbmNlID0gbWZwO1xuXHRcdH1cblx0fSxcblx0Ly8gQ1NTIHRyYW5zaXRpb24gZGV0ZWN0aW9uLCBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcyNjQ4OTkvZGV0ZWN0LWNzcy10cmFuc2l0aW9ucy11c2luZy1qYXZhc2NyaXB0LWFuZC13aXRob3V0LW1vZGVybml6clxuXHRzdXBwb3J0c1RyYW5zaXRpb25zID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGUsIC8vICdzJyBmb3Igc3R5bGUuIGJldHRlciB0byBjcmVhdGUgYW4gZWxlbWVudCBpZiBib2R5IHlldCB0byBleGlzdFxuXHRcdFx0diA9IFsnbXMnLCdPJywnTW96JywnV2Via2l0J107IC8vICd2JyBmb3IgdmVuZG9yXG5cblx0XHRpZiggc1sndHJhbnNpdGlvbiddICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTsgXG5cdFx0fVxuXHRcdFx0XG5cdFx0d2hpbGUoIHYubGVuZ3RoICkge1xuXHRcdFx0aWYoIHYucG9wKCkgKyAnVHJhbnNpdGlvbicgaW4gcyApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblxuXG4vKipcbiAqIFB1YmxpYyBmdW5jdGlvbnNcbiAqL1xuTWFnbmlmaWNQb3B1cC5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IE1hZ25pZmljUG9wdXAsXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIE1hZ25pZmljIFBvcHVwIHBsdWdpbi4gXG5cdCAqIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIG9ubHkgb25jZSB3aGVuICQuZm4ubWFnbmlmaWNQb3B1cCBvciAkLm1hZ25pZmljUG9wdXAgaXMgZXhlY3V0ZWRcblx0ICovXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcHBWZXJzaW9uID0gbmF2aWdhdG9yLmFwcFZlcnNpb247XG5cdFx0bWZwLmlzTG93SUUgPSBtZnAuaXNJRTggPSBkb2N1bWVudC5hbGwgJiYgIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7XG5cdFx0bWZwLmlzQW5kcm9pZCA9ICgvYW5kcm9pZC9naSkudGVzdChhcHBWZXJzaW9uKTtcblx0XHRtZnAuaXNJT1MgPSAoL2lwaG9uZXxpcGFkfGlwb2QvZ2kpLnRlc3QoYXBwVmVyc2lvbik7XG5cdFx0bWZwLnN1cHBvcnRzVHJhbnNpdGlvbiA9IHN1cHBvcnRzVHJhbnNpdGlvbnMoKTtcblxuXHRcdC8vIFdlIGRpc2FibGUgZml4ZWQgcG9zaXRpb25lZCBsaWdodGJveCBvbiBkZXZpY2VzIHRoYXQgZG9uJ3QgaGFuZGxlIGl0IG5pY2VseS5cblx0XHQvLyBJZiB5b3Uga25vdyBhIGJldHRlciB3YXkgb2YgZGV0ZWN0aW5nIHRoaXMgLSBsZXQgbWUga25vdy5cblx0XHRtZnAucHJvYmFibHlNb2JpbGUgPSAobWZwLmlzQW5kcm9pZCB8fCBtZnAuaXNJT1MgfHwgLyhPcGVyYSBNaW5pKXxLaW5kbGV8d2ViT1N8QmxhY2tCZXJyeXwoT3BlcmEgTW9iaSl8KFdpbmRvd3MgUGhvbmUpfElFTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSApO1xuXHRcdF9kb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuXG5cdFx0bWZwLnBvcHVwc0NhY2hlID0ge307XG5cdH0sXG5cblx0LyoqXG5cdCAqIE9wZW5zIHBvcHVwXG5cdCAqIEBwYXJhbSAgZGF0YSBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRvcGVuOiBmdW5jdGlvbihkYXRhKSB7XG5cblx0XHR2YXIgaTtcblxuXHRcdGlmKGRhdGEuaXNPYmogPT09IGZhbHNlKSB7IFxuXHRcdFx0Ly8gY29udmVydCBqUXVlcnkgY29sbGVjdGlvbiB0byBhcnJheSB0byBhdm9pZCBjb25mbGljdHMgbGF0ZXJcblx0XHRcdG1mcC5pdGVtcyA9IGRhdGEuaXRlbXMudG9BcnJheSgpO1xuXG5cdFx0XHRtZnAuaW5kZXggPSAwO1xuXHRcdFx0dmFyIGl0ZW1zID0gZGF0YS5pdGVtcyxcblx0XHRcdFx0aXRlbTtcblx0XHRcdGZvcihpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdFx0aWYoaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0XHRpdGVtID0gaXRlbS5lbFswXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihpdGVtID09PSBkYXRhLmVsWzBdKSB7XG5cdFx0XHRcdFx0bWZwLmluZGV4ID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuaXRlbXMgPSAkLmlzQXJyYXkoZGF0YS5pdGVtcykgPyBkYXRhLml0ZW1zIDogW2RhdGEuaXRlbXNdO1xuXHRcdFx0bWZwLmluZGV4ID0gZGF0YS5pbmRleCB8fCAwO1xuXHRcdH1cblxuXHRcdC8vIGlmIHBvcHVwIGlzIGFscmVhZHkgb3BlbmVkIC0gd2UganVzdCB1cGRhdGUgdGhlIGNvbnRlbnRcblx0XHRpZihtZnAuaXNPcGVuKSB7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0bWZwLnR5cGVzID0gW107IFxuXHRcdF93cmFwQ2xhc3NlcyA9ICcnO1xuXHRcdGlmKGRhdGEubWFpbkVsICYmIGRhdGEubWFpbkVsLmxlbmd0aCkge1xuXHRcdFx0bWZwLmV2ID0gZGF0YS5tYWluRWwuZXEoMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5ldiA9IF9kb2N1bWVudDtcblx0XHR9XG5cblx0XHRpZihkYXRhLmtleSkge1xuXHRcdFx0aWYoIW1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV0pIHtcblx0XHRcdFx0bWZwLnBvcHVwc0NhY2hlW2RhdGEua2V5XSA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUgPSB7fTtcblx0XHR9XG5cblxuXG5cdFx0bWZwLnN0ID0gJC5leHRlbmQodHJ1ZSwge30sICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cywgZGF0YSApOyBcblx0XHRtZnAuZml4ZWRDb250ZW50UG9zID0gbWZwLnN0LmZpeGVkQ29udGVudFBvcyA9PT0gJ2F1dG8nID8gIW1mcC5wcm9iYWJseU1vYmlsZSA6IG1mcC5zdC5maXhlZENvbnRlbnRQb3M7XG5cblx0XHRpZihtZnAuc3QubW9kYWwpIHtcblx0XHRcdG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrID0gZmFsc2U7XG5cdFx0XHRtZnAuc3QuY2xvc2VPbkJnQ2xpY2sgPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5zaG93Q2xvc2VCdG4gPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5lbmFibGVFc2NhcGVLZXkgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cblx0XHQvLyBCdWlsZGluZyBtYXJrdXBcblx0XHQvLyBtYWluIGNvbnRhaW5lcnMgYXJlIGNyZWF0ZWQgb25seSBvbmNlXG5cdFx0aWYoIW1mcC5iZ092ZXJsYXkpIHtcblxuXHRcdFx0Ly8gRGFyayBvdmVybGF5XG5cdFx0XHRtZnAuYmdPdmVybGF5ID0gX2dldEVsKCdiZycpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAud3JhcCA9IF9nZXRFbCgnd3JhcCcpLmF0dHIoJ3RhYmluZGV4JywgLTEpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYobWZwLl9jaGVja0lmQ2xvc2UoZS50YXJnZXQpKSB7XG5cdFx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyID0gX2dldEVsKCdjb250YWluZXInLCBtZnAud3JhcCk7XG5cdFx0fVxuXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIgPSBfZ2V0RWwoJ2NvbnRlbnQnKTtcblx0XHRpZihtZnAuc3QucHJlbG9hZGVyKSB7XG5cdFx0XHRtZnAucHJlbG9hZGVyID0gX2dldEVsKCdwcmVsb2FkZXInLCBtZnAuY29udGFpbmVyLCBtZnAuc3QudExvYWRpbmcpO1xuXHRcdH1cblxuXG5cdFx0Ly8gSW5pdGlhbGl6aW5nIG1vZHVsZXNcblx0XHR2YXIgbW9kdWxlcyA9ICQubWFnbmlmaWNQb3B1cC5tb2R1bGVzO1xuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBuID0gbW9kdWxlc1tpXTtcblx0XHRcdG4gPSBuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbi5zbGljZSgxKTtcblx0XHRcdG1mcFsnaW5pdCcrbl0uY2FsbChtZnApO1xuXHRcdH1cblx0XHRfbWZwVHJpZ2dlcignQmVmb3JlT3BlbicpO1xuXG5cblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuKSB7XG5cdFx0XHQvLyBDbG9zZSBidXR0b25cblx0XHRcdGlmKCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUpIHtcblx0XHRcdFx0bWZwLndyYXAuYXBwZW5kKCBfZ2V0Q2xvc2VCdG4oKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X21mcE9uKE1BUktVUF9QQVJTRV9FVkVOVCwgZnVuY3Rpb24oZSwgdGVtcGxhdGUsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHRcdHZhbHVlcy5jbG9zZV9yZXBsYWNlV2l0aCA9IF9nZXRDbG9zZUJ0bihpdGVtLnR5cGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWNsb3NlLWJ0bi1pbic7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYobWZwLnN0LmFsaWduVG9wKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYWxpZ24tdG9wJztcblx0XHR9XG5cblx0XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRtZnAud3JhcC5jc3Moe1xuXHRcdFx0XHRvdmVyZmxvdzogbWZwLnN0Lm92ZXJmbG93WSxcblx0XHRcdFx0b3ZlcmZsb3dYOiAnaGlkZGVuJyxcblx0XHRcdFx0b3ZlcmZsb3dZOiBtZnAuc3Qub3ZlcmZsb3dZXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndyYXAuY3NzKHsgXG5cdFx0XHRcdHRvcDogX3dpbmRvdy5zY3JvbGxUb3AoKSxcblx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZSdcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiggbWZwLnN0LmZpeGVkQmdQb3MgPT09IGZhbHNlIHx8IChtZnAuc3QuZml4ZWRCZ1BvcyA9PT0gJ2F1dG8nICYmICFtZnAuZml4ZWRDb250ZW50UG9zKSApIHtcblx0XHRcdG1mcC5iZ092ZXJsYXkuY3NzKHtcblx0XHRcdFx0aGVpZ2h0OiBfZG9jdW1lbnQuaGVpZ2h0KCksXG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRcblxuXHRcdGlmKG1mcC5zdC5lbmFibGVFc2NhcGVLZXkpIHtcblx0XHRcdC8vIENsb3NlIG9uIEVTQyBrZXlcblx0XHRcdF9kb2N1bWVudC5vbigna2V5dXAnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYoZS5rZXlDb2RlID09PSAyNykge1xuXHRcdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRfd2luZG93Lm9uKCdyZXNpemUnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnVwZGF0ZVNpemUoKTtcblx0XHR9KTtcblxuXG5cdFx0aWYoIW1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYXV0by1jdXJzb3InO1xuXHRcdH1cblx0XHRcblx0XHRpZihfd3JhcENsYXNzZXMpXG5cdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhfd3JhcENsYXNzZXMpO1xuXG5cblx0XHQvLyB0aGlzIHRyaWdnZXJzIHJlY2FsY3VsYXRpb24gb2YgbGF5b3V0LCBzbyB3ZSBnZXQgaXQgb25jZSB0byBub3QgdG8gdHJpZ2dlciB0d2ljZVxuXHRcdHZhciB3aW5kb3dIZWlnaHQgPSBtZnAud0ggPSBfd2luZG93LmhlaWdodCgpO1xuXG5cdFx0XG5cdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHt9O1xuXG5cdFx0aWYoIG1mcC5maXhlZENvbnRlbnRQb3MgKSB7XG4gICAgICAgICAgICBpZihtZnAuX2hhc1Njcm9sbEJhcih3aW5kb3dIZWlnaHQpKXtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG1mcC5fZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgICAgICAgICAgIGlmKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93U3R5bGVzLm1hcmdpblJpZ2h0ID0gcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdGlmKCFtZnAuaXNJRTcpIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZTcgZG91YmxlLXNjcm9sbCBidWdcblx0XHRcdFx0JCgnYm9keSwgaHRtbCcpLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0XG5cdFx0XG5cdFx0dmFyIGNsYXNzZXNUb2FkZCA9IG1mcC5zdC5tYWluQ2xhc3M7XG5cdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRjbGFzc2VzVG9hZGQgKz0gJyBtZnAtaWU3Jztcblx0XHR9XG5cdFx0aWYoY2xhc3Nlc1RvYWRkKSB7XG5cdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoIGNsYXNzZXNUb2FkZCApO1xuXHRcdH1cblxuXHRcdC8vIGFkZCBjb250ZW50XG5cdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cblx0XHRfbWZwVHJpZ2dlcignQnVpbGRDb250cm9scycpO1xuXG5cdFx0Ly8gcmVtb3ZlIHNjcm9sbGJhciwgYWRkIG1hcmdpbiBlLnQuY1xuXHRcdCQoJ2h0bWwnKS5jc3Mod2luZG93U3R5bGVzKTtcblx0XHRcblx0XHQvLyBhZGQgZXZlcnl0aGluZyB0byBET01cblx0XHRtZnAuYmdPdmVybGF5LmFkZChtZnAud3JhcCkucHJlcGVuZFRvKCBtZnAuc3QucHJlcGVuZFRvIHx8ICQoZG9jdW1lbnQuYm9keSkgKTtcblxuXHRcdC8vIFNhdmUgbGFzdCBmb2N1c2VkIGVsZW1lbnRcblx0XHRtZnAuX2xhc3RGb2N1c2VkRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHRcdFxuXHRcdC8vIFdhaXQgZm9yIG5leHQgY3ljbGUgdG8gYWxsb3cgQ1NTIHRyYW5zaXRpb25cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XG5cdFx0XHRpZihtZnAuY29udGVudCkge1xuXHRcdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiBjb250ZW50IGlzIG5vdCBkZWZpbmVkIChub3QgbG9hZGVkIGUudC5jKSB3ZSBhZGQgY2xhc3Mgb25seSBmb3IgQkdcblx0XHRcdFx0bWZwLmJnT3ZlcmxheS5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFRyYXAgdGhlIGZvY3VzIGluIHBvcHVwXG5cdFx0XHRfZG9jdW1lbnQub24oJ2ZvY3VzaW4nICsgRVZFTlRfTlMsIG1mcC5fb25Gb2N1c0luKTtcblxuXHRcdH0sIDE2KTtcblxuXHRcdG1mcC5pc09wZW4gPSB0cnVlO1xuXHRcdG1mcC51cGRhdGVTaXplKHdpbmRvd0hlaWdodCk7XG5cdFx0X21mcFRyaWdnZXIoT1BFTl9FVkVOVCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvKipcblx0ICogQ2xvc2VzIHRoZSBwb3B1cFxuXHQgKi9cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCFtZnAuaXNPcGVuKSByZXR1cm47XG5cdFx0X21mcFRyaWdnZXIoQkVGT1JFX0NMT1NFX0VWRU5UKTtcblxuXHRcdG1mcC5pc09wZW4gPSBmYWxzZTtcblx0XHQvLyBmb3IgQ1NTMyBhbmltYXRpb25cblx0XHRpZihtZnAuc3QucmVtb3ZhbERlbGF5ICYmICFtZnAuaXNMb3dJRSAmJiBtZnAuc3VwcG9ydHNUcmFuc2l0aW9uICkgIHtcblx0XHRcdG1mcC5fYWRkQ2xhc3NUb01GUChSRU1PVklOR19DTEFTUyk7XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuX2Nsb3NlKCk7XG5cdFx0XHR9LCBtZnAuc3QucmVtb3ZhbERlbGF5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLl9jbG9zZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogSGVscGVyIGZvciBjbG9zZSgpIGZ1bmN0aW9uXG5cdCAqL1xuXHRfY2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdF9tZnBUcmlnZ2VyKENMT1NFX0VWRU5UKTtcblxuXHRcdHZhciBjbGFzc2VzVG9SZW1vdmUgPSBSRU1PVklOR19DTEFTUyArICcgJyArIFJFQURZX0NMQVNTICsgJyAnO1xuXG5cdFx0bWZwLmJnT3ZlcmxheS5kZXRhY2goKTtcblx0XHRtZnAud3JhcC5kZXRhY2goKTtcblx0XHRtZnAuY29udGFpbmVyLmVtcHR5KCk7XG5cblx0XHRpZihtZnAuc3QubWFpbkNsYXNzKSB7XG5cdFx0XHRjbGFzc2VzVG9SZW1vdmUgKz0gbWZwLnN0Lm1haW5DbGFzcyArICcgJztcblx0XHR9XG5cblx0XHRtZnAuX3JlbW92ZUNsYXNzRnJvbU1GUChjbGFzc2VzVG9SZW1vdmUpO1xuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHttYXJnaW5SaWdodDogJyd9O1xuXHRcdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRcdCQoJ2JvZHksIGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJyc7XG5cdFx0XHR9XG5cdFx0XHQkKCdodG1sJykuY3NzKHdpbmRvd1N0eWxlcyk7XG5cdFx0fVxuXHRcdFxuXHRcdF9kb2N1bWVudC5vZmYoJ2tleXVwJyArIEVWRU5UX05TICsgJyBmb2N1c2luJyArIEVWRU5UX05TKTtcblx0XHRtZnAuZXYub2ZmKEVWRU5UX05TKTtcblxuXHRcdC8vIGNsZWFuIHVwIERPTSBlbGVtZW50cyB0aGF0IGFyZW4ndCByZW1vdmVkXG5cdFx0bWZwLndyYXAuYXR0cignY2xhc3MnLCAnbWZwLXdyYXAnKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXHRcdG1mcC5iZ092ZXJsYXkuYXR0cignY2xhc3MnLCAnbWZwLWJnJyk7XG5cdFx0bWZwLmNvbnRhaW5lci5hdHRyKCdjbGFzcycsICdtZnAtY29udGFpbmVyJyk7XG5cblx0XHQvLyByZW1vdmUgY2xvc2UgYnV0dG9uIGZyb20gdGFyZ2V0IGVsZW1lbnRcblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmXG5cdFx0KCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUgfHwgbWZwLmN1cnJUZW1wbGF0ZVttZnAuY3Vyckl0ZW0udHlwZV0gPT09IHRydWUpKSB7XG5cdFx0XHRpZihtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKVxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuLmRldGFjaCgpO1xuXHRcdH1cblxuXG5cdFx0aWYobWZwLnN0LmF1dG9Gb2N1c0xhc3QgJiYgbWZwLl9sYXN0Rm9jdXNlZEVsKSB7XG5cdFx0XHQkKG1mcC5fbGFzdEZvY3VzZWRFbCkuZm9jdXMoKTsgLy8gcHV0IHRhYiBmb2N1cyBiYWNrXG5cdFx0fVxuXHRcdG1mcC5jdXJySXRlbSA9IG51bGw7XHRcblx0XHRtZnAuY29udGVudCA9IG51bGw7XG5cdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG51bGw7XG5cdFx0bWZwLnByZXZIZWlnaHQgPSAwO1xuXG5cdFx0X21mcFRyaWdnZXIoQUZURVJfQ0xPU0VfRVZFTlQpO1xuXHR9LFxuXHRcblx0dXBkYXRlU2l6ZTogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cblx0XHRpZihtZnAuaXNJT1MpIHtcblx0XHRcdC8vIGZpeGVzIGlPUyBuYXYgYmFycyBodHRwczovL2dpdGh1Yi5jb20vZGltc2VtZW5vdi9NYWduaWZpYy1Qb3B1cC9pc3N1ZXMvMlxuXHRcdFx0dmFyIHpvb21MZXZlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdFx0dmFyIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIHpvb21MZXZlbDtcblx0XHRcdG1mcC53cmFwLmNzcygnaGVpZ2h0JywgaGVpZ2h0KTtcblx0XHRcdG1mcC53SCA9IGhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndIID0gd2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCk7XG5cdFx0fVxuXHRcdC8vIEZpeGVzICM4NDogcG9wdXAgaW5jb3JyZWN0bHkgcG9zaXRpb25lZCB3aXRoIHBvc2l0aW9uOnJlbGF0aXZlIG9uIGJvZHlcblx0XHRpZighbWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0bWZwLndyYXAuY3NzKCdoZWlnaHQnLCBtZnAud0gpO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKCdSZXNpemUnKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXQgY29udGVudCBvZiBwb3B1cCBiYXNlZCBvbiBjdXJyZW50IGluZGV4XG5cdCAqL1xuXHR1cGRhdGVJdGVtSFRNTDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbbWZwLmluZGV4XTtcblxuXHRcdC8vIERldGFjaCBhbmQgcGVyZm9ybSBtb2RpZmljYXRpb25zXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIuZGV0YWNoKCk7XG5cblx0XHRpZihtZnAuY29udGVudClcblx0XHRcdG1mcC5jb250ZW50LmRldGFjaCgpO1xuXG5cdFx0aWYoIWl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRpdGVtID0gbWZwLnBhcnNlRWwoIG1mcC5pbmRleCApO1xuXHRcdH1cblxuXHRcdHZhciB0eXBlID0gaXRlbS50eXBlO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0JlZm9yZUNoYW5nZScsIFttZnAuY3Vyckl0ZW0gPyBtZnAuY3Vyckl0ZW0udHlwZSA6ICcnLCB0eXBlXSk7XG5cdFx0Ly8gQmVmb3JlQ2hhbmdlIGV2ZW50IHdvcmtzIGxpa2Ugc286XG5cdFx0Ly8gX21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkgeyB9KTtcblxuXHRcdG1mcC5jdXJySXRlbSA9IGl0ZW07XG5cblx0XHRpZighbWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSkge1xuXHRcdFx0dmFyIG1hcmt1cCA9IG1mcC5zdFt0eXBlXSA/IG1mcC5zdFt0eXBlXS5tYXJrdXAgOiBmYWxzZTtcblxuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBtYXJrdXBcblx0XHRcdF9tZnBUcmlnZ2VyKCdGaXJzdE1hcmt1cFBhcnNlJywgbWFya3VwKTtcblxuXHRcdFx0aWYobWFya3VwKSB7XG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPSAkKG1hcmt1cCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBtYXJrdXAgZm91bmQgd2UganVzdCBkZWZpbmUgdGhhdCB0ZW1wbGF0ZSBpcyBwYXJzZWRcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoX3ByZXZDb250ZW50VHlwZSAmJiBfcHJldkNvbnRlbnRUeXBlICE9PSBpdGVtLnR5cGUpIHtcblx0XHRcdG1mcC5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ21mcC0nK19wcmV2Q29udGVudFR5cGUrJy1ob2xkZXInKTtcblx0XHR9XG5cblx0XHR2YXIgbmV3Q29udGVudCA9IG1mcFsnZ2V0JyArIHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpXShpdGVtLCBtZnAuY3VyclRlbXBsYXRlW3R5cGVdKTtcblx0XHRtZnAuYXBwZW5kQ29udGVudChuZXdDb250ZW50LCB0eXBlKTtcblxuXHRcdGl0ZW0ucHJlbG9hZGVkID0gdHJ1ZTtcblxuXHRcdF9tZnBUcmlnZ2VyKENIQU5HRV9FVkVOVCwgaXRlbSk7XG5cdFx0X3ByZXZDb250ZW50VHlwZSA9IGl0ZW0udHlwZTtcblxuXHRcdC8vIEFwcGVuZCBjb250YWluZXIgYmFjayBhZnRlciBpdHMgY29udGVudCBjaGFuZ2VkXG5cdFx0bWZwLmNvbnRhaW5lci5wcmVwZW5kKG1mcC5jb250ZW50Q29udGFpbmVyKTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdBZnRlckNoYW5nZScpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIFNldCBIVE1MIGNvbnRlbnQgb2YgcG9wdXBcblx0ICovXG5cdGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uKG5ld0NvbnRlbnQsIHR5cGUpIHtcblx0XHRtZnAuY29udGVudCA9IG5ld0NvbnRlbnQ7XG5cblx0XHRpZihuZXdDb250ZW50KSB7XG5cdFx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmIG1mcC5zdC5jbG9zZUJ0bkluc2lkZSAmJlxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID09PSB0cnVlKSB7XG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIG1hcmt1cCwgd2UganVzdCBhcHBlbmQgY2xvc2UgYnV0dG9uIGVsZW1lbnQgaW5zaWRlXG5cdFx0XHRcdGlmKCFtZnAuY29udGVudC5maW5kKCcubWZwLWNsb3NlJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuYXBwZW5kKF9nZXRDbG9zZUJ0bigpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWZwLmNvbnRlbnQgPSBuZXdDb250ZW50O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuY29udGVudCA9ICcnO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKEJFRk9SRV9BUFBFTkRfRVZFTlQpO1xuXHRcdG1mcC5jb250YWluZXIuYWRkQ2xhc3MoJ21mcC0nK3R5cGUrJy1ob2xkZXInKTtcblxuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyLmFwcGVuZChtZnAuY29udGVudCk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogQ3JlYXRlcyBNYWduaWZpYyBQb3B1cCBkYXRhIG9iamVjdCBiYXNlZCBvbiBnaXZlbiBkYXRhXG5cdCAqIEBwYXJhbSAge2ludH0gaW5kZXggSW5kZXggb2YgaXRlbSB0byBwYXJzZVxuXHQgKi9cblx0cGFyc2VFbDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF0sXG5cdFx0XHR0eXBlO1xuXG5cdFx0aWYoaXRlbS50YWdOYW1lKSB7XG5cdFx0XHRpdGVtID0geyBlbDogJChpdGVtKSB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0eXBlID0gaXRlbS50eXBlO1xuXHRcdFx0aXRlbSA9IHsgZGF0YTogaXRlbSwgc3JjOiBpdGVtLnNyYyB9O1xuXHRcdH1cblxuXHRcdGlmKGl0ZW0uZWwpIHtcblx0XHRcdHZhciB0eXBlcyA9IG1mcC50eXBlcztcblxuXHRcdFx0Ly8gY2hlY2sgZm9yICdtZnAtVFlQRScgY2xhc3Ncblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiggaXRlbS5lbC5oYXNDbGFzcygnbWZwLScrdHlwZXNbaV0pICkge1xuXHRcdFx0XHRcdHR5cGUgPSB0eXBlc1tpXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpdGVtLnNyYyA9IGl0ZW0uZWwuYXR0cignZGF0YS1tZnAtc3JjJyk7XG5cdFx0XHRpZighaXRlbS5zcmMpIHtcblx0XHRcdFx0aXRlbS5zcmMgPSBpdGVtLmVsLmF0dHIoJ2hyZWYnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpdGVtLnR5cGUgPSB0eXBlIHx8IG1mcC5zdC50eXBlIHx8ICdpbmxpbmUnO1xuXHRcdGl0ZW0uaW5kZXggPSBpbmRleDtcblx0XHRpdGVtLnBhcnNlZCA9IHRydWU7XG5cdFx0bWZwLml0ZW1zW2luZGV4XSA9IGl0ZW07XG5cdFx0X21mcFRyaWdnZXIoJ0VsZW1lbnRQYXJzZScsIGl0ZW0pO1xuXG5cdFx0cmV0dXJuIG1mcC5pdGVtc1tpbmRleF07XG5cdH0sXG5cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgc2luZ2xlIHBvcHVwIG9yIGEgZ3JvdXAgb2YgcG9wdXBzXG5cdCAqL1xuXHRhZGRHcm91cDogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcblx0XHR2YXIgZUhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRlLm1mcEVsID0gdGhpcztcblx0XHRcdG1mcC5fb3BlbkNsaWNrKGUsIGVsLCBvcHRpb25zKTtcblx0XHR9O1xuXG5cdFx0aWYoIW9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9XG5cblx0XHR2YXIgZU5hbWUgPSAnY2xpY2subWFnbmlmaWNQb3B1cCc7XG5cdFx0b3B0aW9ucy5tYWluRWwgPSBlbDtcblxuXHRcdGlmKG9wdGlvbnMuaXRlbXMpIHtcblx0XHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdFx0ZWwub2ZmKGVOYW1lKS5vbihlTmFtZSwgZUhhbmRsZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zLmlzT2JqID0gZmFsc2U7XG5cdFx0XHRpZihvcHRpb25zLmRlbGVnYXRlKSB7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIG9wdGlvbnMuZGVsZWdhdGUgLCBlSGFuZGxlcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHRpb25zLml0ZW1zID0gZWw7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIGVIYW5kbGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdF9vcGVuQ2xpY2s6IGZ1bmN0aW9uKGUsIGVsLCBvcHRpb25zKSB7XG5cdFx0dmFyIG1pZENsaWNrID0gb3B0aW9ucy5taWRDbGljayAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taWRDbGljayA6ICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cy5taWRDbGljaztcblxuXG5cdFx0aWYoIW1pZENsaWNrICYmICggZS53aGljaCA9PT0gMiB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuc2hpZnRLZXkgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZGlzYWJsZU9uID0gb3B0aW9ucy5kaXNhYmxlT24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGlzYWJsZU9uIDogJC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLmRpc2FibGVPbjtcblxuXHRcdGlmKGRpc2FibGVPbikge1xuXHRcdFx0aWYoJC5pc0Z1bmN0aW9uKGRpc2FibGVPbikpIHtcblx0XHRcdFx0aWYoICFkaXNhYmxlT24uY2FsbChtZnApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgeyAvLyBlbHNlIGl0J3MgbnVtYmVyXG5cdFx0XHRcdGlmKCBfd2luZG93LndpZHRoKCkgPCBkaXNhYmxlT24gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihlLnR5cGUpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Ly8gVGhpcyB3aWxsIHByZXZlbnQgcG9wdXAgZnJvbSBjbG9zaW5nIGlmIGVsZW1lbnQgaXMgaW5zaWRlIGFuZCBwb3B1cCBpcyBhbHJlYWR5IG9wZW5lZFxuXHRcdFx0aWYobWZwLmlzT3Blbikge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9wdGlvbnMuZWwgPSAkKGUubWZwRWwpO1xuXHRcdGlmKG9wdGlvbnMuZGVsZWdhdGUpIHtcblx0XHRcdG9wdGlvbnMuaXRlbXMgPSBlbC5maW5kKG9wdGlvbnMuZGVsZWdhdGUpO1xuXHRcdH1cblx0XHRtZnAub3BlbihvcHRpb25zKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRleHQgb24gcHJlbG9hZGVyXG5cdCAqL1xuXHR1cGRhdGVTdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuXG5cdFx0aWYobWZwLnByZWxvYWRlcikge1xuXHRcdFx0aWYoX3ByZXZTdGF0dXMgIT09IHN0YXR1cykge1xuXHRcdFx0XHRtZnAuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZnAtcy0nK19wcmV2U3RhdHVzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXRleHQgJiYgc3RhdHVzID09PSAnbG9hZGluZycpIHtcblx0XHRcdFx0dGV4dCA9IG1mcC5zdC50TG9hZGluZztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRcdHN0YXR1czogc3RhdHVzLFxuXHRcdFx0XHR0ZXh0OiB0ZXh0XG5cdFx0XHR9O1xuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBzdGF0dXNcblx0XHRcdF9tZnBUcmlnZ2VyKCdVcGRhdGVTdGF0dXMnLCBkYXRhKTtcblxuXHRcdFx0c3RhdHVzID0gZGF0YS5zdGF0dXM7XG5cdFx0XHR0ZXh0ID0gZGF0YS50ZXh0O1xuXG5cdFx0XHRtZnAucHJlbG9hZGVyLmh0bWwodGV4dCk7XG5cblx0XHRcdG1mcC5wcmVsb2FkZXIuZmluZCgnYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyLmFkZENsYXNzKCdtZnAtcy0nK3N0YXR1cyk7XG5cdFx0XHRfcHJldlN0YXR1cyA9IHN0YXR1cztcblx0XHR9XG5cdH0sXG5cblxuXHQvKlxuXHRcdFwiUHJpdmF0ZVwiIGhlbHBlcnMgdGhhdCBhcmVuJ3QgcHJpdmF0ZSBhdCBhbGxcblx0ICovXG5cdC8vIENoZWNrIHRvIGNsb3NlIHBvcHVwIG9yIG5vdFxuXHQvLyBcInRhcmdldFwiIGlzIGFuIGVsZW1lbnQgdGhhdCB3YXMgY2xpY2tlZFxuXHRfY2hlY2tJZkNsb3NlOiBmdW5jdGlvbih0YXJnZXQpIHtcblxuXHRcdGlmKCQodGFyZ2V0KS5oYXNDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjbG9zZU9uQ29udGVudCA9IG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrO1xuXHRcdHZhciBjbG9zZU9uQmcgPSBtZnAuc3QuY2xvc2VPbkJnQ2xpY2s7XG5cblx0XHRpZihjbG9zZU9uQ29udGVudCAmJiBjbG9zZU9uQmcpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFdlIGNsb3NlIHRoZSBwb3B1cCBpZiBjbGljayBpcyBvbiBjbG9zZSBidXR0b24gb3Igb24gcHJlbG9hZGVyLiBPciBpZiB0aGVyZSBpcyBubyBjb250ZW50LlxuXHRcdFx0aWYoIW1mcC5jb250ZW50IHx8ICQodGFyZ2V0KS5oYXNDbGFzcygnbWZwLWNsb3NlJykgfHwgKG1mcC5wcmVsb2FkZXIgJiYgdGFyZ2V0ID09PSBtZnAucHJlbG9hZGVyWzBdKSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIGNsaWNrIGlzIG91dHNpZGUgdGhlIGNvbnRlbnRcblx0XHRcdGlmKCAgKHRhcmdldCAhPT0gbWZwLmNvbnRlbnRbMF0gJiYgISQuY29udGFpbnMobWZwLmNvbnRlbnRbMF0sIHRhcmdldCkpICApIHtcblx0XHRcdFx0aWYoY2xvc2VPbkJnKSB7XG5cdFx0XHRcdFx0Ly8gbGFzdCBjaGVjaywgaWYgdGhlIGNsaWNrZWQgZWxlbWVudCBpcyBpbiBET00sIChpbiBjYXNlIGl0J3MgcmVtb3ZlZCBvbmNsaWNrKVxuXHRcdFx0XHRcdGlmKCAkLmNvbnRhaW5zKGRvY3VtZW50LCB0YXJnZXQpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoY2xvc2VPbkNvbnRlbnQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXHRfYWRkQ2xhc3NUb01GUDogZnVuY3Rpb24oY05hbWUpIHtcblx0XHRtZnAuYmdPdmVybGF5LmFkZENsYXNzKGNOYW1lKTtcblx0XHRtZnAud3JhcC5hZGRDbGFzcyhjTmFtZSk7XG5cdH0sXG5cdF9yZW1vdmVDbGFzc0Zyb21NRlA6IGZ1bmN0aW9uKGNOYW1lKSB7XG5cdFx0dGhpcy5iZ092ZXJsYXkucmVtb3ZlQ2xhc3MoY05hbWUpO1xuXHRcdG1mcC53cmFwLnJlbW92ZUNsYXNzKGNOYW1lKTtcblx0fSxcblx0X2hhc1Njcm9sbEJhcjogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cdFx0cmV0dXJuICggIChtZnAuaXNJRTcgPyBfZG9jdW1lbnQuaGVpZ2h0KCkgOiBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCkgPiAod2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCkpICk7XG5cdH0sXG5cdF9zZXRGb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0KG1mcC5zdC5mb2N1cyA/IG1mcC5jb250ZW50LmZpbmQobWZwLnN0LmZvY3VzKS5lcSgwKSA6IG1mcC53cmFwKS5mb2N1cygpO1xuXHR9LFxuXHRfb25Gb2N1c0luOiBmdW5jdGlvbihlKSB7XG5cdFx0aWYoIGUudGFyZ2V0ICE9PSBtZnAud3JhcFswXSAmJiAhJC5jb250YWlucyhtZnAud3JhcFswXSwgZS50YXJnZXQpICkge1xuXHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0X3BhcnNlTWFya3VwOiBmdW5jdGlvbih0ZW1wbGF0ZSwgdmFsdWVzLCBpdGVtKSB7XG5cdFx0dmFyIGFycjtcblx0XHRpZihpdGVtLmRhdGEpIHtcblx0XHRcdHZhbHVlcyA9ICQuZXh0ZW5kKGl0ZW0uZGF0YSwgdmFsdWVzKTtcblx0XHR9XG5cdFx0X21mcFRyaWdnZXIoTUFSS1VQX1BBUlNFX0VWRU5ULCBbdGVtcGxhdGUsIHZhbHVlcywgaXRlbV0gKTtcblxuXHRcdCQuZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0YXJyID0ga2V5LnNwbGl0KCdfJyk7XG5cdFx0XHRpZihhcnIubGVuZ3RoID4gMSkge1xuXHRcdFx0XHR2YXIgZWwgPSB0ZW1wbGF0ZS5maW5kKEVWRU5UX05TICsgJy0nK2FyclswXSk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHZhciBhdHRyID0gYXJyWzFdO1xuXHRcdFx0XHRcdGlmKGF0dHIgPT09ICdyZXBsYWNlV2l0aCcpIHtcblx0XHRcdFx0XHRcdGlmKGVsWzBdICE9PSB2YWx1ZVswXSkge1xuXHRcdFx0XHRcdFx0XHRlbC5yZXBsYWNlV2l0aCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGF0dHIgPT09ICdpbWcnKSB7XG5cdFx0XHRcdFx0XHRpZihlbC5pcygnaW1nJykpIHtcblx0XHRcdFx0XHRcdFx0ZWwuYXR0cignc3JjJywgdmFsdWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWwucmVwbGFjZVdpdGgoICQoJzxpbWc+JykuYXR0cignc3JjJywgdmFsdWUpLmF0dHIoJ2NsYXNzJywgZWwuYXR0cignY2xhc3MnKSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWwuYXR0cihhcnJbMV0sIHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGVtcGxhdGUuZmluZChFVkVOVF9OUyArICctJytrZXkpLmh0bWwodmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF9nZXRTY3JvbGxiYXJTaXplOiBmdW5jdGlvbigpIHtcblx0XHQvLyB0aHggRGF2aWRcblx0XHRpZihtZnAuc2Nyb2xsYmFyU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdHNjcm9sbERpdi5zdHlsZS5jc3NUZXh0ID0gJ3dpZHRoOiA5OXB4OyBoZWlnaHQ6IDk5cHg7IG92ZXJmbG93OiBzY3JvbGw7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtOTk5OXB4Oyc7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG5cdFx0XHRtZnAuc2Nyb2xsYmFyU2l6ZSA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5zY3JvbGxiYXJTaXplO1xuXHR9XG5cbn07IC8qIE1hZ25pZmljUG9wdXAgY29yZSBwcm90b3R5cGUgZW5kICovXG5cblxuXG5cbi8qKlxuICogUHVibGljIHN0YXRpYyBmdW5jdGlvbnNcbiAqL1xuJC5tYWduaWZpY1BvcHVwID0ge1xuXHRpbnN0YW5jZTogbnVsbCxcblx0cHJvdG86IE1hZ25pZmljUG9wdXAucHJvdG90eXBlLFxuXHRtb2R1bGVzOiBbXSxcblxuXHRvcGVuOiBmdW5jdGlvbihvcHRpb25zLCBpbmRleCkge1xuXHRcdF9jaGVja0luc3RhbmNlKCk7XG5cblx0XHRpZighb3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdG9wdGlvbnMuaW5kZXggPSBpbmRleCB8fCAwO1xuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlLm9wZW4ob3B0aW9ucyk7XG5cdH0sXG5cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UgJiYgJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlLmNsb3NlKCk7XG5cdH0sXG5cblx0cmVnaXN0ZXJNb2R1bGU6IGZ1bmN0aW9uKG5hbWUsIG1vZHVsZSkge1xuXHRcdGlmKG1vZHVsZS5vcHRpb25zKSB7XG5cdFx0XHQkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHNbbmFtZV0gPSBtb2R1bGUub3B0aW9ucztcblx0XHR9XG5cdFx0JC5leHRlbmQodGhpcy5wcm90bywgbW9kdWxlLnByb3RvKTtcblx0XHR0aGlzLm1vZHVsZXMucHVzaChuYW1lKTtcblx0fSxcblxuXHRkZWZhdWx0czoge1xuXG5cdFx0Ly8gSW5mbyBhYm91dCBvcHRpb25zIGlzIGluIGRvY3M6XG5cdFx0Ly8gaHR0cDovL2RpbXNlbWVub3YuY29tL3BsdWdpbnMvbWFnbmlmaWMtcG9wdXAvZG9jdW1lbnRhdGlvbi5odG1sI29wdGlvbnNcblxuXHRcdGRpc2FibGVPbjogMCxcblxuXHRcdGtleTogbnVsbCxcblxuXHRcdG1pZENsaWNrOiBmYWxzZSxcblxuXHRcdG1haW5DbGFzczogJycsXG5cblx0XHRwcmVsb2FkZXI6IHRydWUsXG5cblx0XHRmb2N1czogJycsIC8vIENTUyBzZWxlY3RvciBvZiBpbnB1dCB0byBmb2N1cyBhZnRlciBwb3B1cCBpcyBvcGVuZWRcblxuXHRcdGNsb3NlT25Db250ZW50Q2xpY2s6IGZhbHNlLFxuXG5cdFx0Y2xvc2VPbkJnQ2xpY2s6IHRydWUsXG5cblx0XHRjbG9zZUJ0bkluc2lkZTogdHJ1ZSxcblxuXHRcdHNob3dDbG9zZUJ0bjogdHJ1ZSxcblxuXHRcdGVuYWJsZUVzY2FwZUtleTogdHJ1ZSxcblxuXHRcdG1vZGFsOiBmYWxzZSxcblxuXHRcdGFsaWduVG9wOiBmYWxzZSxcblxuXHRcdHJlbW92YWxEZWxheTogMCxcblxuXHRcdHByZXBlbmRUbzogbnVsbCxcblxuXHRcdGZpeGVkQ29udGVudFBvczogJ2F1dG8nLFxuXG5cdFx0Zml4ZWRCZ1BvczogJ2F1dG8nLFxuXG5cdFx0b3ZlcmZsb3dZOiAnYXV0bycsXG5cblx0XHRjbG9zZU1hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWNsb3NlXCI+JiMyMTU7PC9idXR0b24+JyxcblxuXHRcdHRDbG9zZTogJ0Nsb3NlIChFc2MpJyxcblxuXHRcdHRMb2FkaW5nOiAnTG9hZGluZy4uLicsXG5cblx0XHRhdXRvRm9jdXNMYXN0OiB0cnVlXG5cblx0fVxufTtcblxuXG5cbiQuZm4ubWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0X2NoZWNrSW5zdGFuY2UoKTtcblxuXHR2YXIganFFbCA9ICQodGhpcyk7XG5cblx0Ly8gV2UgY2FsbCBzb21lIEFQSSBtZXRob2Qgb2YgZmlyc3QgcGFyYW0gaXMgYSBzdHJpbmdcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0aWYob3B0aW9ucyA9PT0gJ29wZW4nKSB7XG5cdFx0XHR2YXIgaXRlbXMsXG5cdFx0XHRcdGl0ZW1PcHRzID0gX2lzSlEgPyBqcUVsLmRhdGEoJ21hZ25pZmljUG9wdXAnKSA6IGpxRWxbMF0ubWFnbmlmaWNQb3B1cCxcblx0XHRcdFx0aW5kZXggPSBwYXJzZUludChhcmd1bWVudHNbMV0sIDEwKSB8fCAwO1xuXG5cdFx0XHRpZihpdGVtT3B0cy5pdGVtcykge1xuXHRcdFx0XHRpdGVtcyA9IGl0ZW1PcHRzLml0ZW1zW2luZGV4XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW1zID0ganFFbDtcblx0XHRcdFx0aWYoaXRlbU9wdHMuZGVsZWdhdGUpIHtcblx0XHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbmQoaXRlbU9wdHMuZGVsZWdhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuZXEoIGluZGV4ICk7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX29wZW5DbGljayh7bWZwRWw6aXRlbXN9LCBqcUVsLCBpdGVtT3B0cyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKG1mcC5pc09wZW4pXG5cdFx0XHRcdG1mcFtvcHRpb25zXS5hcHBseShtZnAsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIGNsb25lIG9wdGlvbnMgb2JqXG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblxuXHRcdC8qXG5cdFx0ICogQXMgWmVwdG8gZG9lc24ndCBzdXBwb3J0IC5kYXRhKCkgbWV0aG9kIGZvciBvYmplY3RzXG5cdFx0ICogYW5kIGl0IHdvcmtzIG9ubHkgaW4gbm9ybWFsIGJyb3dzZXJzXG5cdFx0ICogd2UgYXNzaWduIFwib3B0aW9uc1wiIG9iamVjdCBkaXJlY3RseSB0byB0aGUgRE9NIGVsZW1lbnQuIEZUVyFcblx0XHQgKi9cblx0XHRpZihfaXNKUSkge1xuXHRcdFx0anFFbC5kYXRhKCdtYWduaWZpY1BvcHVwJywgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxRWxbMF0ubWFnbmlmaWNQb3B1cCA9IG9wdGlvbnM7XG5cdFx0fVxuXG5cdFx0bWZwLmFkZEdyb3VwKGpxRWwsIG9wdGlvbnMpO1xuXG5cdH1cblx0cmV0dXJuIGpxRWw7XG59O1xuXG4vKj4+Y29yZSovXG5cbi8qPj5pbmxpbmUqL1xuXG52YXIgSU5MSU5FX05TID0gJ2lubGluZScsXG5cdF9oaWRkZW5DbGFzcyxcblx0X2lubGluZVBsYWNlaG9sZGVyLFxuXHRfbGFzdElubGluZUVsZW1lbnQsXG5cdF9wdXRJbmxpbmVFbGVtZW50c0JhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfbGFzdElubGluZUVsZW1lbnQpIHtcblx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlci5hZnRlciggX2xhc3RJbmxpbmVFbGVtZW50LmFkZENsYXNzKF9oaWRkZW5DbGFzcykgKS5kZXRhY2goKTtcblx0XHRcdF9sYXN0SW5saW5lRWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoSU5MSU5FX05TLCB7XG5cdG9wdGlvbnM6IHtcblx0XHRoaWRkZW5DbGFzczogJ2hpZGUnLCAvLyB3aWxsIGJlIGFwcGVuZGVkIHdpdGggYG1mcC1gIHByZWZpeFxuXHRcdG1hcmt1cDogJycsXG5cdFx0dE5vdEZvdW5kOiAnQ29udGVudCBub3QgZm91bmQnXG5cdH0sXG5cdHByb3RvOiB7XG5cblx0XHRpbml0SW5saW5lOiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKElOTElORV9OUyk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrSU5MSU5FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGdldElubGluZTogZnVuY3Rpb24oaXRlbSwgdGVtcGxhdGUpIHtcblxuXHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXG5cdFx0XHRpZihpdGVtLnNyYykge1xuXHRcdFx0XHR2YXIgaW5saW5lU3QgPSBtZnAuc3QuaW5saW5lLFxuXHRcdFx0XHRcdGVsID0gJChpdGVtLnNyYyk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB0YXJnZXQgZWxlbWVudCBoYXMgcGFyZW50IC0gd2UgcmVwbGFjZSBpdCB3aXRoIHBsYWNlaG9sZGVyIGFuZCBwdXQgaXQgYmFjayBhZnRlciBwb3B1cCBpcyBjbG9zZWRcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gZWxbMF0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpZihwYXJlbnQgJiYgcGFyZW50LnRhZ05hbWUpIHtcblx0XHRcdFx0XHRcdGlmKCFfaW5saW5lUGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRcdFx0X2hpZGRlbkNsYXNzID0gaW5saW5lU3QuaGlkZGVuQ2xhc3M7XG5cdFx0XHRcdFx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlciA9IF9nZXRFbChfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdFx0XHRfaGlkZGVuQ2xhc3MgPSAnbWZwLScrX2hpZGRlbkNsYXNzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gcmVwbGFjZSB0YXJnZXQgaW5saW5lIGVsZW1lbnQgd2l0aCBwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0X2xhc3RJbmxpbmVFbGVtZW50ID0gZWwuYWZ0ZXIoX2lubGluZVBsYWNlaG9sZGVyKS5kZXRhY2goKS5yZW1vdmVDbGFzcyhfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbmxpbmVTdC50Tm90Rm91bmQpO1xuXHRcdFx0XHRcdGVsID0gJCgnPGRpdj4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW0uaW5saW5lRWxlbWVudCA9IGVsO1xuXHRcdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCB7fSwgaXRlbSk7XG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmlubGluZSovXG5cbi8qPj5hamF4Ki9cbnZhciBBSkFYX05TID0gJ2FqYXgnLFxuXHRfYWpheEN1cixcblx0X3JlbW92ZUFqYXhDdXJzb3IgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfYWpheEN1cikge1xuXHRcdFx0JChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhfYWpheEN1cik7XG5cdFx0fVxuXHR9LFxuXHRfZGVzdHJveUFqYXhSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblx0XHRpZihtZnAucmVxKSB7XG5cdFx0XHRtZnAucmVxLmFib3J0KCk7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoQUpBWF9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRzZXR0aW5nczogbnVsbCxcblx0XHRjdXJzb3I6ICdtZnAtYWpheC1jdXInLFxuXHRcdHRFcnJvcjogJzxhIGhyZWY9XCIldXJsJVwiPlRoZSBjb250ZW50PC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRBamF4OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKEFKQVhfTlMpO1xuXHRcdFx0X2FqYXhDdXIgPSBtZnAuc3QuYWpheC5jdXJzb3I7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0XHRfbWZwT24oJ0JlZm9yZUNoYW5nZS4nICsgQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0fSxcblx0XHRnZXRBamF4OiBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHRcdGlmKF9hamF4Q3VyKSB7XG5cdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoX2FqYXhDdXIpO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdsb2FkaW5nJyk7XG5cblx0XHRcdHZhciBvcHRzID0gJC5leHRlbmQoe1xuXHRcdFx0XHR1cmw6IGl0ZW0uc3JjLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuXHRcdFx0XHRcdHZhciB0ZW1wID0ge1xuXHRcdFx0XHRcdFx0ZGF0YTpkYXRhLFxuXHRcdFx0XHRcdFx0eGhyOmpxWEhSXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdQYXJzZUFqYXgnLCB0ZW1wKTtcblxuXHRcdFx0XHRcdG1mcC5hcHBlbmRDb250ZW50KCAkKHRlbXAuZGF0YSksIEFKQVhfTlMgKTtcblxuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblxuXHRcdFx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHRcdFx0fSwgMTYpO1xuXG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdBamF4Q29udGVudEFkZGVkJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfcmVtb3ZlQWpheEN1cnNvcigpO1xuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSBpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBtZnAuc3QuYWpheC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZnAuc3QuYWpheC5zZXR0aW5ncyk7XG5cblx0XHRcdG1mcC5yZXEgPSAkLmFqYXgob3B0cyk7XG5cblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+YWpheCovXG5cbi8qPj5pbWFnZSovXG52YXIgX2ltZ0ludGVydmFsLFxuXHRfZ2V0VGl0bGUgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYoaXRlbS5kYXRhICYmIGl0ZW0uZGF0YS50aXRsZSAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIGl0ZW0uZGF0YS50aXRsZTtcblxuXHRcdHZhciBzcmMgPSBtZnAuc3QuaW1hZ2UudGl0bGVTcmM7XG5cblx0XHRpZihzcmMpIHtcblx0XHRcdGlmKCQuaXNGdW5jdGlvbihzcmMpKSB7XG5cdFx0XHRcdHJldHVybiBzcmMuY2FsbChtZnAsIGl0ZW0pO1xuXHRcdFx0fSBlbHNlIGlmKGl0ZW0uZWwpIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uZWwuYXR0cihzcmMpIHx8ICcnO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJyc7XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnaW1hZ2UnLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdG1hcmt1cDogJzxkaXYgY2xhc3M9XCJtZnAtZmlndXJlXCI+Jytcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0JzxmaWd1cmU+Jytcblx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWltZ1wiPjwvZGl2PicrXG5cdFx0XHRcdFx0XHQnPGZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtYm90dG9tLWJhclwiPicrXG5cdFx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtdGl0bGVcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNvdW50ZXJcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdCc8L2ZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHQnPC9maWd1cmU+Jytcblx0XHRcdFx0JzwvZGl2PicsXG5cdFx0Y3Vyc29yOiAnbWZwLXpvb20tb3V0LWN1cicsXG5cdFx0dGl0bGVTcmM6ICd0aXRsZScsXG5cdFx0dmVydGljYWxGaXQ6IHRydWUsXG5cdFx0dEVycm9yOiAnPGEgaHJlZj1cIiV1cmwlXCI+VGhlIGltYWdlPC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW1nU3QgPSBtZnAuc3QuaW1hZ2UsXG5cdFx0XHRcdG5zID0gJy5pbWFnZSc7XG5cblx0XHRcdG1mcC50eXBlcy5wdXNoKCdpbWFnZScpO1xuXG5cdFx0XHRfbWZwT24oT1BFTl9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5jdXJySXRlbS50eXBlID09PSAnaW1hZ2UnICYmIGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfd2luZG93Lm9mZigncmVzaXplJyArIEVWRU5UX05TKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oJ1Jlc2l6ZScrbnMsIG1mcC5yZXNpemVJbWFnZSk7XG5cdFx0XHRpZihtZnAuaXNMb3dJRSkge1xuXHRcdFx0XHRfbWZwT24oJ0FmdGVyQ2hhbmdlJywgbWZwLnJlc2l6ZUltYWdlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlc2l6ZUltYWdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpdGVtID0gbWZwLmN1cnJJdGVtO1xuXHRcdFx0aWYoIWl0ZW0gfHwgIWl0ZW0uaW1nKSByZXR1cm47XG5cblx0XHRcdGlmKG1mcC5zdC5pbWFnZS52ZXJ0aWNhbEZpdCkge1xuXHRcdFx0XHR2YXIgZGVjciA9IDA7XG5cdFx0XHRcdC8vIGZpeCBib3gtc2l6aW5nIGluIGllNy84XG5cdFx0XHRcdGlmKG1mcC5pc0xvd0lFKSB7XG5cdFx0XHRcdFx0ZGVjciA9IHBhcnNlSW50KGl0ZW0uaW1nLmNzcygncGFkZGluZy10b3AnKSwgMTApICsgcGFyc2VJbnQoaXRlbS5pbWcuY3NzKCdwYWRkaW5nLWJvdHRvbScpLDEwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZy5jc3MoJ21heC1oZWlnaHQnLCBtZnAud0gtZGVjcik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfb25JbWFnZUhhc1NpemU6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdGlmKGl0ZW0uaW1nKSB7XG5cblx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblxuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmlzQ2hlY2tpbmdJbWdTaXplID0gZmFsc2U7XG5cblx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlSGFzU2l6ZScsIGl0ZW0pO1xuXG5cdFx0XHRcdGlmKGl0ZW0uaW1nSGlkZGVuKSB7XG5cdFx0XHRcdFx0aWYobWZwLmNvbnRlbnQpXG5cdFx0XHRcdFx0XHRtZnAuY29udGVudC5yZW1vdmVDbGFzcygnbWZwLWxvYWRpbmcnKTtcblxuXHRcdFx0XHRcdGl0ZW0uaW1nSGlkZGVuID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGdW5jdGlvbiB0aGF0IGxvb3BzIHVudGlsIHRoZSBpbWFnZSBoYXMgc2l6ZSB0byBkaXNwbGF5IGVsZW1lbnRzIHRoYXQgcmVseSBvbiBpdCBhc2FwXG5cdFx0ICovXG5cdFx0ZmluZEltYWdlU2l6ZTogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHR2YXIgY291bnRlciA9IDAsXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdLFxuXHRcdFx0XHRtZnBTZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKGRlbGF5KSB7XG5cblx0XHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZGVjZWxlcmF0aW5nIGludGVydmFsIHRoYXQgY2hlY2tzIGZvciBzaXplIG9mIGFuIGltYWdlXG5cdFx0XHRcdFx0X2ltZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmKGNvdW50ZXIgPiAyMDApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb3VudGVyKys7XG5cdFx0XHRcdFx0XHRpZihjb3VudGVyID09PSAzKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDEwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihjb3VudGVyID09PSA0MCkge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCg1MCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY291bnRlciA9PT0gMTAwKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDUwMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgZGVsYXkpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRtZnBTZXRJbnRlcnZhbCgxKTtcblx0XHR9LFxuXG5cdFx0Z2V0SW1hZ2U6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cblx0XHRcdHZhciBndWFyZCA9IDAsXG5cblx0XHRcdFx0Ly8gaW1hZ2UgbG9hZCBjb21wbGV0ZSBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZENvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aWYgKGl0ZW0uaW1nWzBdLmNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uaW1nLm9mZignLm1mcGxvYWRlcicpO1xuXG5cdFx0XHRcdFx0XHRcdGlmKGl0ZW0gPT09IG1mcC5jdXJySXRlbSl7XG5cdFx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblxuXHRcdFx0XHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRpdGVtLmxvYWRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlTG9hZENvbXBsZXRlJyk7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBpZiBpbWFnZSBjb21wbGV0ZSBjaGVjayBmYWlscyAyMDAgdGltZXMgKDIwIHNlYyksIHdlIGFzc3VtZSB0aGF0IHRoZXJlIHdhcyBhbiBlcnJvci5cblx0XHRcdFx0XHRcdFx0Z3VhcmQrKztcblx0XHRcdFx0XHRcdFx0aWYoZ3VhcmQgPCAyMDApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KG9uTG9hZENvbXBsZXRlLDEwMCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0b25Mb2FkRXJyb3IoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBpbWFnZSBlcnJvciBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZEVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcub2ZmKCcubWZwbG9hZGVyJyk7XG5cdFx0XHRcdFx0XHRpZihpdGVtID09PSBtZnAuY3Vyckl0ZW0pe1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGltZ1N0LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0aW1nU3QgPSBtZnAuc3QuaW1hZ2U7XG5cblxuXHRcdFx0dmFyIGVsID0gdGVtcGxhdGUuZmluZCgnLm1mcC1pbWcnKTtcblx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cdFx0XHRcdGltZy5jbGFzc05hbWUgPSAnbWZwLWltZyc7XG5cdFx0XHRcdGlmKGl0ZW0uZWwgJiYgaXRlbS5lbC5maW5kKCdpbWcnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRpbWcuYWx0ID0gaXRlbS5lbC5maW5kKCdpbWcnKS5hdHRyKCdhbHQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZyA9ICQoaW1nKS5vbignbG9hZC5tZnBsb2FkZXInLCBvbkxvYWRDb21wbGV0ZSkub24oJ2Vycm9yLm1mcGxvYWRlcicsIG9uTG9hZEVycm9yKTtcblx0XHRcdFx0aW1nLnNyYyA9IGl0ZW0uc3JjO1xuXG5cdFx0XHRcdC8vIHdpdGhvdXQgY2xvbmUoKSBcImVycm9yXCIgZXZlbnQgaXMgbm90IGZpcmluZyB3aGVuIElNRyBpcyByZXBsYWNlZCBieSBuZXcgSU1HXG5cdFx0XHRcdC8vIFRPRE86IGZpbmQgYSB3YXkgdG8gYXZvaWQgc3VjaCBjbG9uaW5nXG5cdFx0XHRcdGlmKGVsLmlzKCdpbWcnKSkge1xuXHRcdFx0XHRcdGl0ZW0uaW1nID0gaXRlbS5pbWcuY2xvbmUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdO1xuXHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZighaW1nLndpZHRoKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwge1xuXHRcdFx0XHR0aXRsZTogX2dldFRpdGxlKGl0ZW0pLFxuXHRcdFx0XHRpbWdfcmVwbGFjZVdpdGg6IGl0ZW0uaW1nXG5cdFx0XHR9LCBpdGVtKTtcblxuXHRcdFx0bWZwLnJlc2l6ZUltYWdlKCk7XG5cblx0XHRcdGlmKGl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblxuXHRcdFx0XHRpZihpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0XHRcdHRlbXBsYXRlLmFkZENsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW1nU3QudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2xvYWRpbmcnKTtcblx0XHRcdGl0ZW0ubG9hZGluZyA9IHRydWU7XG5cblx0XHRcdGlmKCFpdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0aXRlbS5pbWdIaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR0ZW1wbGF0ZS5hZGRDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0bWZwLmZpbmRJbWFnZVNpemUoaXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+aW1hZ2UqL1xuXG4vKj4+em9vbSovXG52YXIgaGFzTW96VHJhbnNmb3JtLFxuXHRnZXRIYXNNb3pUcmFuc2Zvcm0gPSBmdW5jdGlvbigpIHtcblx0XHRpZihoYXNNb3pUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aGFzTW96VHJhbnNmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRyZXR1cm4gaGFzTW96VHJhbnNmb3JtO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ3pvb20nLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHRcdGVhc2luZzogJ2Vhc2UtaW4tb3V0Jyxcblx0XHRkdXJhdGlvbjogMzAwLFxuXHRcdG9wZW5lcjogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQuaXMoJ2ltZycpID8gZWxlbWVudCA6IGVsZW1lbnQuZmluZCgnaW1nJyk7XG5cdFx0fVxuXHR9LFxuXG5cdHByb3RvOiB7XG5cblx0XHRpbml0Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgem9vbVN0ID0gbWZwLnN0Lnpvb20sXG5cdFx0XHRcdG5zID0gJy56b29tJyxcblx0XHRcdFx0aW1hZ2U7XG5cblx0XHRcdGlmKCF6b29tU3QuZW5hYmxlZCB8fCAhbWZwLnN1cHBvcnRzVHJhbnNpdGlvbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkdXJhdGlvbiA9IHpvb21TdC5kdXJhdGlvbixcblx0XHRcdFx0Z2V0RWxUb0FuaW1hdGUgPSBmdW5jdGlvbihpbWFnZSkge1xuXHRcdFx0XHRcdHZhciBuZXdJbWcgPSBpbWFnZS5jbG9uZSgpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignY2xhc3MnKS5hZGRDbGFzcygnbWZwLWFuaW1hdGVkLWltYWdlJyksXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uID0gJ2FsbCAnKyh6b29tU3QuZHVyYXRpb24vMTAwMCkrJ3MgJyArIHpvb21TdC5lYXNpbmcsXG5cdFx0XHRcdFx0XHRjc3NPYmogPSB7XG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAnZml4ZWQnLFxuXHRcdFx0XHRcdFx0XHR6SW5kZXg6IDk5OTksXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHRcdFx0Jy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSc6ICdoaWRkZW4nXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dCA9ICd0cmFuc2l0aW9uJztcblxuXHRcdFx0XHRcdGNzc09ialsnLXdlYmtpdC0nK3RdID0gY3NzT2JqWyctbW96LScrdF0gPSBjc3NPYmpbJy1vLScrdF0gPSBjc3NPYmpbdF0gPSB0cmFuc2l0aW9uO1xuXG5cdFx0XHRcdFx0bmV3SW1nLmNzcyhjc3NPYmopO1xuXHRcdFx0XHRcdHJldHVybiBuZXdJbWc7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNob3dNYWluQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9wZW5UaW1lb3V0LFxuXHRcdFx0XHRhbmltYXRlZEltZztcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJytucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0Ly8gQmFzaWNhbGx5LCBhbGwgY29kZSBiZWxvdyBkb2VzIGlzIGNsb25lcyBleGlzdGluZyBpbWFnZSwgcHV0cyBpbiBvbiB0b3Agb2YgdGhlIGN1cnJlbnQgb25lIGFuZCBhbmltYXRlZCBpdFxuXG5cdFx0XHRcdFx0aW1hZ2UgPSBtZnAuX2dldEl0ZW1Ub1pvb20oKTtcblxuXHRcdFx0XHRcdGlmKCFpbWFnZSkge1xuXHRcdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cblx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCkgKTtcblxuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cblx0XHRcdFx0XHRvcGVuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCB0cnVlICkgKTtcblx0XHRcdFx0XHRcdG9wZW5UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblxuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGltYWdlID0gYW5pbWF0ZWRJbWcgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdab29tQW5pbWF0aW9uRW5kZWQnKTtcblx0XHRcdFx0XHRcdFx0fSwgMTYpOyAvLyBhdm9pZCBibGluayB3aGVuIHN3aXRjaGluZyBpbWFnZXNcblxuXHRcdFx0XHRcdFx0fSwgZHVyYXRpb24pOyAvLyB0aGlzIHRpbWVvdXQgZXF1YWxzIGFuaW1hdGlvbiBkdXJhdGlvblxuXG5cdFx0XHRcdFx0fSwgMTYpOyAvLyBieSBhZGRpbmcgdGhpcyB0aW1lb3V0IHdlIGF2b2lkIHNob3J0IGdsaXRjaCBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvblxuXG5cblx0XHRcdFx0XHQvLyBMb3RzIG9mIHRpbWVvdXRzLi4uXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0X21mcE9uKEJFRk9SRV9DTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cblx0XHRcdFx0XHRtZnAuc3QucmVtb3ZhbERlbGF5ID0gZHVyYXRpb247XG5cblx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdGltYWdlID0gbWZwLl9nZXRJdGVtVG9ab29tKCk7XG5cdFx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCh0cnVlKSApO1xuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQoKSApO1xuXHRcdFx0XHRcdH0sIDE2KTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLl9hbGxvd1pvb20oKSkge1xuXHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXHRcdFx0XHRcdGlmKGFuaW1hdGVkSW1nKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5yZW1vdmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aW1hZ2UgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0X2FsbG93Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbWZwLmN1cnJJdGVtLnR5cGUgPT09ICdpbWFnZSc7XG5cdFx0fSxcblxuXHRcdF9nZXRJdGVtVG9ab29tOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKG1mcC5jdXJySXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdHJldHVybiBtZnAuY3Vyckl0ZW0uaW1nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBHZXQgZWxlbWVudCBwb3N0aW9uIHJlbGF0aXZlIHRvIHZpZXdwb3J0XG5cdFx0X2dldE9mZnNldDogZnVuY3Rpb24oaXNMYXJnZSkge1xuXHRcdFx0dmFyIGVsO1xuXHRcdFx0aWYoaXNMYXJnZSkge1xuXHRcdFx0XHRlbCA9IG1mcC5jdXJySXRlbS5pbWc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbCA9IG1mcC5zdC56b29tLm9wZW5lcihtZnAuY3Vyckl0ZW0uZWwgfHwgbWZwLmN1cnJJdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9mZnNldCA9IGVsLm9mZnNldCgpO1xuXHRcdFx0dmFyIHBhZGRpbmdUb3AgPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctdG9wJyksMTApO1xuXHRcdFx0dmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksMTApO1xuXHRcdFx0b2Zmc2V0LnRvcCAtPSAoICQod2luZG93KS5zY3JvbGxUb3AoKSAtIHBhZGRpbmdUb3AgKTtcblxuXG5cdFx0XHQvKlxuXG5cdFx0XHRBbmltYXRpbmcgbGVmdCArIHRvcCArIHdpZHRoL2hlaWdodCBsb29rcyBnbGl0Y2h5IGluIEZpcmVmb3gsIGJ1dCBwZXJmZWN0IGluIENocm9tZS4gQW5kIHZpY2UtdmVyc2EuXG5cblx0XHRcdCAqL1xuXHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0d2lkdGg6IGVsLndpZHRoKCksXG5cdFx0XHRcdC8vIGZpeCBaZXB0byBoZWlnaHQrcGFkZGluZyBpc3N1ZVxuXHRcdFx0XHRoZWlnaHQ6IChfaXNKUSA/IGVsLmlubmVySGVpZ2h0KCkgOiBlbFswXS5vZmZzZXRIZWlnaHQpIC0gcGFkZGluZ0JvdHRvbSAtIHBhZGRpbmdUb3Bcblx0XHRcdH07XG5cblx0XHRcdC8vIEkgaGF0ZSB0byBkbyB0aGlzLCBidXQgdGhlcmUgaXMgbm8gYW5vdGhlciBvcHRpb25cblx0XHRcdGlmKCBnZXRIYXNNb3pUcmFuc2Zvcm0oKSApIHtcblx0XHRcdFx0b2JqWyctbW96LXRyYW5zZm9ybSddID0gb2JqWyd0cmFuc2Zvcm0nXSA9ICd0cmFuc2xhdGUoJyArIG9mZnNldC5sZWZ0ICsgJ3B4LCcgKyBvZmZzZXQudG9wICsgJ3B4KSc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvYmoubGVmdCA9IG9mZnNldC5sZWZ0O1xuXHRcdFx0XHRvYmoudG9wID0gb2Zmc2V0LnRvcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG5cblxuLyo+Pnpvb20qL1xuXG4vKj4+aWZyYW1lKi9cblxudmFyIElGUkFNRV9OUyA9ICdpZnJhbWUnLFxuXHRfZW1wdHlQYWdlID0gJy8vYWJvdXQ6YmxhbmsnLFxuXG5cdF9maXhJZnJhbWVCdWdzID0gZnVuY3Rpb24oaXNTaG93aW5nKSB7XG5cdFx0aWYobWZwLmN1cnJUZW1wbGF0ZVtJRlJBTUVfTlNdKSB7XG5cdFx0XHR2YXIgZWwgPSBtZnAuY3VyclRlbXBsYXRlW0lGUkFNRV9OU10uZmluZCgnaWZyYW1lJyk7XG5cdFx0XHRpZihlbC5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gcmVzZXQgc3JjIGFmdGVyIHRoZSBwb3B1cCBpcyBjbG9zZWQgdG8gYXZvaWQgXCJ2aWRlbyBrZWVwcyBwbGF5aW5nIGFmdGVyIHBvcHVwIGlzIGNsb3NlZFwiIGJ1Z1xuXHRcdFx0XHRpZighaXNTaG93aW5nKSB7XG5cdFx0XHRcdFx0ZWxbMF0uc3JjID0gX2VtcHR5UGFnZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElFOCBibGFjayBzY3JlZW4gYnVnIGZpeFxuXHRcdFx0XHRpZihtZnAuaXNJRTgpIHtcblx0XHRcdFx0XHRlbC5jc3MoJ2Rpc3BsYXknLCBpc1Nob3dpbmcgPyAnYmxvY2snIDogJ25vbmUnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKElGUkFNRV9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRtYXJrdXA6ICc8ZGl2IGNsYXNzPVwibWZwLWlmcmFtZS1zY2FsZXJcIj4nK1xuXHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNsb3NlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHQnPGlmcmFtZSBjbGFzcz1cIm1mcC1pZnJhbWVcIiBzcmM9XCIvL2Fib3V0OmJsYW5rXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPicrXG5cdFx0XHRcdCc8L2Rpdj4nLFxuXG5cdFx0c3JjQWN0aW9uOiAnaWZyYW1lX3NyYycsXG5cblx0XHQvLyB3ZSBkb24ndCBjYXJlIGFuZCBzdXBwb3J0IG9ubHkgb25lIGRlZmF1bHQgdHlwZSBvZiBVUkwgYnkgZGVmYXVsdFxuXHRcdHBhdHRlcm5zOiB7XG5cdFx0XHR5b3V0dWJlOiB7XG5cdFx0XHRcdGluZGV4OiAneW91dHViZS5jb20nLFxuXHRcdFx0XHRpZDogJ3Y9Jyxcblx0XHRcdFx0c3JjOiAnLy93d3cueW91dHViZS5jb20vZW1iZWQvJWlkJT9hdXRvcGxheT0xJ1xuXHRcdFx0fSxcblx0XHRcdHZpbWVvOiB7XG5cdFx0XHRcdGluZGV4OiAndmltZW8uY29tLycsXG5cdFx0XHRcdGlkOiAnLycsXG5cdFx0XHRcdHNyYzogJy8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8laWQlP2F1dG9wbGF5PTEnXG5cdFx0XHR9LFxuXHRcdFx0Z21hcHM6IHtcblx0XHRcdFx0aW5kZXg6ICcvL21hcHMuZ29vZ2xlLicsXG5cdFx0XHRcdHNyYzogJyVpZCUmb3V0cHV0PWVtYmVkJ1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJZnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnR5cGVzLnB1c2goSUZSQU1FX05TKTtcblxuXHRcdFx0X21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkge1xuXHRcdFx0XHRpZihwcmV2VHlwZSAhPT0gbmV3VHlwZSkge1xuXHRcdFx0XHRcdGlmKHByZXZUeXBlID09PSBJRlJBTUVfTlMpIHtcblx0XHRcdFx0XHRcdF9maXhJZnJhbWVCdWdzKCk7IC8vIGlmcmFtZSBpZiByZW1vdmVkXG5cdFx0XHRcdFx0fSBlbHNlIGlmKG5ld1R5cGUgPT09IElGUkFNRV9OUykge1xuXHRcdFx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3ModHJ1ZSk7IC8vIGlmcmFtZSBpcyBzaG93aW5nXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9Ly8gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gaWZyYW1lIHNvdXJjZSBpcyBzd2l0Y2hlZCwgZG9uJ3QgZG8gYW55dGhpbmdcblx0XHRcdFx0Ly99XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UICsgJy4nICsgSUZSQU1FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3MoKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXRJZnJhbWU6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cdFx0XHR2YXIgZW1iZWRTcmMgPSBpdGVtLnNyYztcblx0XHRcdHZhciBpZnJhbWVTdCA9IG1mcC5zdC5pZnJhbWU7XG5cblx0XHRcdCQuZWFjaChpZnJhbWVTdC5wYXR0ZXJucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVtYmVkU3JjLmluZGV4T2YoIHRoaXMuaW5kZXggKSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYodGhpcy5pZCkge1xuXHRcdFx0XHRcdFx0aWYodHlwZW9mIHRoaXMuaWQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0XHRcdGVtYmVkU3JjID0gZW1iZWRTcmMuc3Vic3RyKGVtYmVkU3JjLmxhc3RJbmRleE9mKHRoaXMuaWQpK3RoaXMuaWQubGVuZ3RoLCBlbWJlZFNyYy5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW1iZWRTcmMgPSB0aGlzLmlkLmNhbGwoIHRoaXMsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVtYmVkU3JjID0gdGhpcy5zcmMucmVwbGFjZSgnJWlkJScsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBkYXRhT2JqID0ge307XG5cdFx0XHRpZihpZnJhbWVTdC5zcmNBY3Rpb24pIHtcblx0XHRcdFx0ZGF0YU9ialtpZnJhbWVTdC5zcmNBY3Rpb25dID0gZW1iZWRTcmM7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCBkYXRhT2JqLCBpdGVtKTtcblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cblxuXG4vKj4+aWZyYW1lKi9cblxuLyo+PmdhbGxlcnkqL1xuLyoqXG4gKiBHZXQgbG9vcGVkIGluZGV4IGRlcGVuZGluZyBvbiBudW1iZXIgb2Ygc2xpZGVzXG4gKi9cbnZhciBfZ2V0TG9vcGVkSWQgPSBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBudW1TbGlkZXMgPSBtZnAuaXRlbXMubGVuZ3RoO1xuXHRcdGlmKGluZGV4ID4gbnVtU2xpZGVzIC0gMSkge1xuXHRcdFx0cmV0dXJuIGluZGV4IC0gbnVtU2xpZGVzO1xuXHRcdH0gZWxzZSAgaWYoaW5kZXggPCAwKSB7XG5cdFx0XHRyZXR1cm4gbnVtU2xpZGVzICsgaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleDtcblx0fSxcblx0X3JlcGxhY2VDdXJyVG90YWwgPSBmdW5jdGlvbih0ZXh0LCBjdXJyLCB0b3RhbCkge1xuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UoLyVjdXJyJS9naSwgY3VyciArIDEpLnJlcGxhY2UoLyV0b3RhbCUvZ2ksIHRvdGFsKTtcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCdnYWxsZXJ5Jywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRhcnJvd01hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWFycm93IG1mcC1hcnJvdy0lZGlyJVwiPjwvYnV0dG9uPicsXG5cdFx0cHJlbG9hZDogWzAsMl0sXG5cdFx0bmF2aWdhdGVCeUltZ0NsaWNrOiB0cnVlLFxuXHRcdGFycm93czogdHJ1ZSxcblxuXHRcdHRQcmV2OiAnUHJldmlvdXMgKExlZnQgYXJyb3cga2V5KScsXG5cdFx0dE5leHQ6ICdOZXh0IChSaWdodCBhcnJvdyBrZXkpJyxcblx0XHR0Q291bnRlcjogJyVjdXJyJSBvZiAldG90YWwlJ1xuXHR9LFxuXG5cdHByb3RvOiB7XG5cdFx0aW5pdEdhbGxlcnk6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgZ1N0ID0gbWZwLnN0LmdhbGxlcnksXG5cdFx0XHRcdG5zID0gJy5tZnAtZ2FsbGVyeSc7XG5cblx0XHRcdG1mcC5kaXJlY3Rpb24gPSB0cnVlOyAvLyB0cnVlIC0gbmV4dCwgZmFsc2UgLSBwcmV2XG5cblx0XHRcdGlmKCFnU3QgfHwgIWdTdC5lbmFibGVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtZ2FsbGVyeSc7XG5cblx0XHRcdF9tZnBPbihPUEVOX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRpZihnU3QubmF2aWdhdGVCeUltZ0NsaWNrKSB7XG5cdFx0XHRcdFx0bWZwLndyYXAub24oJ2NsaWNrJytucywgJy5tZnAtaW1nJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihtZnAuaXRlbXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfZG9jdW1lbnQub24oJ2tleWRvd24nK25zLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcblx0XHRcdFx0XHRcdG1mcC5wcmV2KCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XG5cdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdVcGRhdGVTdGF0dXMnK25zLCBmdW5jdGlvbihlLCBkYXRhKSB7XG5cdFx0XHRcdGlmKGRhdGEudGV4dCkge1xuXHRcdFx0XHRcdGRhdGEudGV4dCA9IF9yZXBsYWNlQ3VyclRvdGFsKGRhdGEudGV4dCwgbWZwLmN1cnJJdGVtLmluZGV4LCBtZnAuaXRlbXMubGVuZ3RoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihNQVJLVVBfUEFSU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKGUsIGVsZW1lbnQsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHR2YXIgbCA9IG1mcC5pdGVtcy5sZW5ndGg7XG5cdFx0XHRcdHZhbHVlcy5jb3VudGVyID0gbCA+IDEgPyBfcmVwbGFjZUN1cnJUb3RhbChnU3QudENvdW50ZXIsIGl0ZW0uaW5kZXgsIGwpIDogJyc7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJyArIG5zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLml0ZW1zLmxlbmd0aCA+IDEgJiYgZ1N0LmFycm93cyAmJiAhbWZwLmFycm93TGVmdCkge1xuXHRcdFx0XHRcdHZhciBtYXJrdXAgPSBnU3QuYXJyb3dNYXJrdXAsXG5cdFx0XHRcdFx0XHRhcnJvd0xlZnQgPSBtZnAuYXJyb3dMZWZ0ID0gJCggbWFya3VwLnJlcGxhY2UoLyV0aXRsZSUvZ2ksIGdTdC50UHJldikucmVwbGFjZSgvJWRpciUvZ2ksICdsZWZ0JykgKS5hZGRDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSxcblx0XHRcdFx0XHRcdGFycm93UmlnaHQgPSBtZnAuYXJyb3dSaWdodCA9ICQoIG1hcmt1cC5yZXBsYWNlKC8ldGl0bGUlL2dpLCBnU3QudE5leHQpLnJlcGxhY2UoLyVkaXIlL2dpLCAncmlnaHQnKSApLmFkZENsYXNzKFBSRVZFTlRfQ0xPU0VfQ0xBU1MpO1xuXG5cdFx0XHRcdFx0YXJyb3dMZWZ0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLnByZXYoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRhcnJvd1JpZ2h0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdG1mcC5jb250YWluZXIuYXBwZW5kKGFycm93TGVmdC5hZGQoYXJyb3dSaWdodCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENIQU5HRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fcHJlbG9hZFRpbWVvdXQpIGNsZWFyVGltZW91dChtZnAuX3ByZWxvYWRUaW1lb3V0KTtcblxuXHRcdFx0XHRtZnAuX3ByZWxvYWRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZnAucHJlbG9hZE5lYXJieUltYWdlcygpO1xuXHRcdFx0XHRcdG1mcC5fcHJlbG9hZFRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHR9LCAxNik7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfZG9jdW1lbnQub2ZmKG5zKTtcblx0XHRcdFx0bWZwLndyYXAub2ZmKCdjbGljaycrbnMpO1xuXHRcdFx0XHRtZnAuYXJyb3dSaWdodCA9IG1mcC5hcnJvd0xlZnQgPSBudWxsO1xuXHRcdFx0fSk7XG5cblx0XHR9LFxuXHRcdG5leHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IHRydWU7XG5cdFx0XHRtZnAuaW5kZXggPSBfZ2V0TG9vcGVkSWQobWZwLmluZGV4ICsgMSk7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZXY6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IGZhbHNlO1xuXHRcdFx0bWZwLmluZGV4ID0gX2dldExvb3BlZElkKG1mcC5pbmRleCAtIDEpO1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRnb1RvOiBmdW5jdGlvbihuZXdJbmRleCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IChuZXdJbmRleCA+PSBtZnAuaW5kZXgpO1xuXHRcdFx0bWZwLmluZGV4ID0gbmV3SW5kZXg7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZWxvYWROZWFyYnlJbWFnZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHAgPSBtZnAuc3QuZ2FsbGVyeS5wcmVsb2FkLFxuXHRcdFx0XHRwcmVsb2FkQmVmb3JlID0gTWF0aC5taW4ocFswXSwgbWZwLml0ZW1zLmxlbmd0aCksXG5cdFx0XHRcdHByZWxvYWRBZnRlciA9IE1hdGgubWluKHBbMV0sIG1mcC5pdGVtcy5sZW5ndGgpLFxuXHRcdFx0XHRpO1xuXG5cdFx0XHRmb3IoaSA9IDE7IGkgPD0gKG1mcC5kaXJlY3Rpb24gPyBwcmVsb2FkQWZ0ZXIgOiBwcmVsb2FkQmVmb3JlKTsgaSsrKSB7XG5cdFx0XHRcdG1mcC5fcHJlbG9hZEl0ZW0obWZwLmluZGV4K2kpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChtZnAuZGlyZWN0aW9uID8gcHJlbG9hZEJlZm9yZSA6IHByZWxvYWRBZnRlcik7IGkrKykge1xuXHRcdFx0XHRtZnAuX3ByZWxvYWRJdGVtKG1mcC5pbmRleC1pKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9wcmVsb2FkSXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdGluZGV4ID0gX2dldExvb3BlZElkKGluZGV4KTtcblxuXHRcdFx0aWYobWZwLml0ZW1zW2luZGV4XS5wcmVsb2FkZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF07XG5cdFx0XHRpZighaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0aXRlbSA9IG1mcC5wYXJzZUVsKCBpbmRleCApO1xuXHRcdFx0fVxuXG5cdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWQnLCBpdGVtKTtcblxuXHRcdFx0aWYoaXRlbS50eXBlID09PSAnaW1hZ2UnKSB7XG5cdFx0XHRcdGl0ZW0uaW1nID0gJCgnPGltZyBjbGFzcz1cIm1mcC1pbWdcIiAvPicpLm9uKCdsb2FkLm1mcGxvYWRlcicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0pLm9uKCdlcnJvci5tZnBsb2FkZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWRFcnJvcicsIGl0ZW0pO1xuXHRcdFx0XHR9KS5hdHRyKCdzcmMnLCBpdGVtLnNyYyk7XG5cdFx0XHR9XG5cblxuXHRcdFx0aXRlbS5wcmVsb2FkZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5nYWxsZXJ5Ki9cblxuLyo+PnJldGluYSovXG5cbnZhciBSRVRJTkFfTlMgPSAncmV0aW5hJztcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKFJFVElOQV9OUywge1xuXHRvcHRpb25zOiB7XG5cdFx0cmVwbGFjZVNyYzogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0cmV0dXJuIGl0ZW0uc3JjLnJlcGxhY2UoL1xcLlxcdyskLywgZnVuY3Rpb24obSkgeyByZXR1cm4gJ0AyeCcgKyBtOyB9KTtcblx0XHR9LFxuXHRcdHJhdGlvOiAxIC8vIEZ1bmN0aW9uIG9yIG51bWJlci4gIFNldCB0byAxIHRvIGRpc2FibGUuXG5cdH0sXG5cdHByb3RvOiB7XG5cdFx0aW5pdFJldGluYTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEpIHtcblxuXHRcdFx0XHR2YXIgc3QgPSBtZnAuc3QucmV0aW5hLFxuXHRcdFx0XHRcdHJhdGlvID0gc3QucmF0aW87XG5cblx0XHRcdFx0cmF0aW8gPSAhaXNOYU4ocmF0aW8pID8gcmF0aW8gOiByYXRpbygpO1xuXG5cdFx0XHRcdGlmKHJhdGlvID4gMSkge1xuXHRcdFx0XHRcdF9tZnBPbignSW1hZ2VIYXNTaXplJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcuY3NzKHtcblx0XHRcdFx0XHRcdFx0J21heC13aWR0aCc6IGl0ZW0uaW1nWzBdLm5hdHVyYWxXaWR0aCAvIHJhdGlvLFxuXHRcdFx0XHRcdFx0XHQnd2lkdGgnOiAnMTAwJSdcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdF9tZnBPbignRWxlbWVudFBhcnNlJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5zcmMgPSBzdC5yZXBsYWNlU3JjKGl0ZW0sIHJhdGlvKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PnJldGluYSovXG4gX2NoZWNrSW5zdGFuY2UoKTsgfSkpOyIsIi8qIVxuICogSXNvdG9wZSBQQUNLQUdFRCB2My4wLjZcbiAqXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXG4gKiBvciBJc290b3BlIENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcbiAqXG4gKiBodHRwczovL2lzb3RvcGUubWV0YWZpenp5LmNvXG4gKiBDb3B5cmlnaHQgMjAxMC0yMDE4IE1ldGFmaXp6eVxuICovXG5cbi8qKlxuICogQnJpZGdldCBtYWtlcyBqUXVlcnkgd2lkZ2V0c1xuICogdjIuMC4xXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qIGpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLypqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCAnanF1ZXJ5LWJyaWRnZXQvanF1ZXJ5LWJyaWRnZXQnLFsgJ2pxdWVyeScgXSwgZnVuY3Rpb24oIGpRdWVyeSApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGpRdWVyeSApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnanF1ZXJ5JylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmpRdWVyeUJyaWRnZXQgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmpRdWVyeVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGpRdWVyeSApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gdXRpbHMgLS0tLS0gLy9cblxudmFyIGFycmF5U2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbG9nZ2luZyBlcnJvcnNcbi8vICQuZXJyb3IgYnJlYWtzIGpRdWVyeSBjaGFpbmluZ1xudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcbnZhciBsb2dFcnJvciA9IHR5cGVvZiBjb25zb2xlID09ICd1bmRlZmluZWQnID8gZnVuY3Rpb24oKSB7fSA6XG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xuICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcbiAgfTtcblxuLy8gLS0tLS0galF1ZXJ5QnJpZGdldCAtLS0tLSAvL1xuXG5mdW5jdGlvbiBqUXVlcnlCcmlkZ2V0KCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzLCAkICkge1xuICAkID0gJCB8fCBqUXVlcnkgfHwgd2luZG93LmpRdWVyeTtcbiAgaWYgKCAhJCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBhZGQgb3B0aW9uIG1ldGhvZCAtPiAkKCkucGx1Z2luKCdvcHRpb24nLCB7Li4ufSlcbiAgaWYgKCAhUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiApIHtcbiAgICAvLyBvcHRpb24gc2V0dGVyXG4gICAgUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xuICAgICAgLy8gYmFpbCBvdXQgaWYgbm90IGFuIG9iamVjdFxuICAgICAgaWYgKCAhJC5pc1BsYWluT2JqZWN0KCBvcHRzICkgKXtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoIHRydWUsIHRoaXMub3B0aW9ucywgb3B0cyApO1xuICAgIH07XG4gIH1cblxuICAvLyBtYWtlIGpRdWVyeSBwbHVnaW5cbiAgJC5mblsgbmFtZXNwYWNlIF0gPSBmdW5jdGlvbiggYXJnMCAvKiwgYXJnMSAqLyApIHtcbiAgICBpZiAoIHR5cGVvZiBhcmcwID09ICdzdHJpbmcnICkge1xuICAgICAgLy8gbWV0aG9kIGNhbGwgJCgpLnBsdWdpbiggJ21ldGhvZE5hbWUnLCB7IG9wdGlvbnMgfSApXG4gICAgICAvLyBzaGlmdCBhcmd1bWVudHMgYnkgMVxuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApO1xuICAgICAgcmV0dXJuIG1ldGhvZENhbGwoIHRoaXMsIGFyZzAsIGFyZ3MgKTtcbiAgICB9XG4gICAgLy8ganVzdCAkKCkucGx1Z2luKHsgb3B0aW9ucyB9KVxuICAgIHBsYWluQ2FsbCggdGhpcywgYXJnMCApO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vICQoKS5wbHVnaW4oJ21ldGhvZE5hbWUnKVxuICBmdW5jdGlvbiBtZXRob2RDYWxsKCAkZWxlbXMsIG1ldGhvZE5hbWUsIGFyZ3MgKSB7XG4gICAgdmFyIHJldHVyblZhbHVlO1xuICAgIHZhciBwbHVnaW5NZXRob2RTdHIgPSAnJCgpLicgKyBuYW1lc3BhY2UgKyAnKFwiJyArIG1ldGhvZE5hbWUgKyAnXCIpJztcblxuICAgICRlbGVtcy5lYWNoKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcbiAgICAgIC8vIGdldCBpbnN0YW5jZVxuICAgICAgdmFyIGluc3RhbmNlID0gJC5kYXRhKCBlbGVtLCBuYW1lc3BhY2UgKTtcbiAgICAgIGlmICggIWluc3RhbmNlICkge1xuICAgICAgICBsb2dFcnJvciggbmFtZXNwYWNlICsgJyBub3QgaW5pdGlhbGl6ZWQuIENhbm5vdCBjYWxsIG1ldGhvZHMsIGkuZS4gJyArXG4gICAgICAgICAgcGx1Z2luTWV0aG9kU3RyICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1ldGhvZCA9IGluc3RhbmNlWyBtZXRob2ROYW1lIF07XG4gICAgICBpZiAoICFtZXRob2QgfHwgbWV0aG9kTmFtZS5jaGFyQXQoMCkgPT0gJ18nICkge1xuICAgICAgICBsb2dFcnJvciggcGx1Z2luTWV0aG9kU3RyICsgJyBpcyBub3QgYSB2YWxpZCBtZXRob2QnICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgbWV0aG9kLCBnZXQgcmV0dXJuIHZhbHVlXG4gICAgICB2YXIgdmFsdWUgPSBtZXRob2QuYXBwbHkoIGluc3RhbmNlLCBhcmdzICk7XG4gICAgICAvLyBzZXQgcmV0dXJuIHZhbHVlIGlmIHZhbHVlIGlzIHJldHVybmVkLCB1c2Ugb25seSBmaXJzdCB2YWx1ZVxuICAgICAgcmV0dXJuVmFsdWUgPSByZXR1cm5WYWx1ZSA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiByZXR1cm5WYWx1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXR1cm5WYWx1ZSAhPT0gdW5kZWZpbmVkID8gcmV0dXJuVmFsdWUgOiAkZWxlbXM7XG4gIH1cblxuICBmdW5jdGlvbiBwbGFpbkNhbGwoICRlbGVtcywgb3B0aW9ucyApIHtcbiAgICAkZWxlbXMuZWFjaCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIGVsZW0sIG5hbWVzcGFjZSApO1xuICAgICAgaWYgKCBpbnN0YW5jZSApIHtcbiAgICAgICAgLy8gc2V0IG9wdGlvbnMgJiBpbml0XG4gICAgICAgIGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyApO1xuICAgICAgICBpbnN0YW5jZS5faW5pdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBuZXcgaW5zdGFuY2VcbiAgICAgICAgaW5zdGFuY2UgPSBuZXcgUGx1Z2luQ2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcbiAgICAgICAgJC5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVKUXVlcnkoICQgKTtcblxufVxuXG4vLyAtLS0tLSB1cGRhdGVKUXVlcnkgLS0tLS0gLy9cblxuLy8gc2V0ICQuYnJpZGdldCBmb3IgdjEgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbmZ1bmN0aW9uIHVwZGF0ZUpRdWVyeSggJCApIHtcbiAgaWYgKCAhJCB8fCAoICQgJiYgJC5icmlkZ2V0ICkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gICQuYnJpZGdldCA9IGpRdWVyeUJyaWRnZXQ7XG59XG5cbnVwZGF0ZUpRdWVyeSggalF1ZXJ5IHx8IHdpbmRvdy5qUXVlcnkgKTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBqUXVlcnlCcmlkZ2V0O1xuXG59KSk7XG5cbi8qKlxuICogRXZFbWl0dGVyIHYxLjEuMFxuICogTGlsJyBldmVudCBlbWl0dGVyXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbi8qIGpzaGludCB1bnVzZWQ6IHRydWUsIHVuZGVmOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgd2luZG93ICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXG4gICAgZGVmaW5lKCAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJyxmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgZ2xvYmFsLkV2RW1pdHRlciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oKSB7XG5cblxuXG5mdW5jdGlvbiBFdkVtaXR0ZXIoKSB7fVxuXG52YXIgcHJvdG8gPSBFdkVtaXR0ZXIucHJvdG90eXBlO1xuXG5wcm90by5vbiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBzZXQgZXZlbnRzIGhhc2hcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IGxpc3RlbmVycyBhcnJheVxuICB2YXIgbGlzdGVuZXJzID0gZXZlbnRzWyBldmVudE5hbWUgXSA9IGV2ZW50c1sgZXZlbnROYW1lIF0gfHwgW107XG4gIC8vIG9ubHkgYWRkIG9uY2VcbiAgaWYgKCBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKSA9PSAtMSApIHtcbiAgICBsaXN0ZW5lcnMucHVzaCggbGlzdGVuZXIgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub25jZSA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBhZGQgZXZlbnRcbiAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAvLyBzZXQgb25jZSBmbGFnXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcbiAgdmFyIG9uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IG9uY2VMaXN0ZW5lcnMgb2JqZWN0XG4gIHZhciBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcbiAgLy8gc2V0IGZsYWdcbiAgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApO1xuICBpZiAoIGluZGV4ICE9IC0xICkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoIGluZGV4LCAxICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmVtaXRFdmVudCA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGFyZ3MgKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBjb3B5IG92ZXIgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIGlmIC5vZmYoKSBpbiBsaXN0ZW5lclxuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoMCk7XG4gIGFyZ3MgPSBhcmdzIHx8IFtdO1xuICAvLyBvbmNlIHN0dWZmXG4gIHZhciBvbmNlTGlzdGVuZXJzID0gdGhpcy5fb25jZUV2ZW50cyAmJiB0aGlzLl9vbmNlRXZlbnRzWyBldmVudE5hbWUgXTtcblxuICBmb3IgKCB2YXIgaT0wOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXVxuICAgIHZhciBpc09uY2UgPSBvbmNlTGlzdGVuZXJzICYmIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgaWYgKCBpc09uY2UgKSB7XG4gICAgICAvLyByZW1vdmUgbGlzdGVuZXJcbiAgICAgIC8vIHJlbW92ZSBiZWZvcmUgdHJpZ2dlciB0byBwcmV2ZW50IHJlY3Vyc2lvblxuICAgICAgdGhpcy5vZmYoIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgICAgIC8vIHVuc2V0IG9uY2UgZmxhZ1xuICAgICAgZGVsZXRlIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgfVxuICAgIC8vIHRyaWdnZXIgbGlzdGVuZXJcbiAgICBsaXN0ZW5lci5hcHBseSggdGhpcywgYXJncyApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5hbGxPZmYgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuX2V2ZW50cztcbiAgZGVsZXRlIHRoaXMuX29uY2VFdmVudHM7XG59O1xuXG5yZXR1cm4gRXZFbWl0dGVyO1xuXG59KSk7XG5cbi8qIVxuICogZ2V0U2l6ZSB2Mi4wLjNcbiAqIG1lYXN1cmUgc2l6ZSBvZiBlbGVtZW50c1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKiBqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXG4vKiBnbG9iYWxzIGNvbnNvbGU6IGZhbHNlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2dldC1zaXplL2dldC1zaXplJyxmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5nZXRTaXplID0gZmFjdG9yeSgpO1xuICB9XG5cbn0pKCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2V0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcsIG5vdCBhIHBlcmNlbnRhZ2VcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XG4gIHZhciBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcbiAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT0gLTEgJiYgIWlzTmFOKCBudW0gKTtcbiAgcmV0dXJuIGlzVmFsaWQgJiYgbnVtO1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIGxvZ0Vycm9yID0gdHlwZW9mIGNvbnNvbGUgPT0gJ3VuZGVmaW5lZCcgPyBub29wIDpcbiAgZnVuY3Rpb24oIG1lc3NhZ2UgKSB7XG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xuICB9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIG1lYXN1cmVtZW50cyA9IFtcbiAgJ3BhZGRpbmdMZWZ0JyxcbiAgJ3BhZGRpbmdSaWdodCcsXG4gICdwYWRkaW5nVG9wJyxcbiAgJ3BhZGRpbmdCb3R0b20nLFxuICAnbWFyZ2luTGVmdCcsXG4gICdtYXJnaW5SaWdodCcsXG4gICdtYXJnaW5Ub3AnLFxuICAnbWFyZ2luQm90dG9tJyxcbiAgJ2JvcmRlckxlZnRXaWR0aCcsXG4gICdib3JkZXJSaWdodFdpZHRoJyxcbiAgJ2JvcmRlclRvcFdpZHRoJyxcbiAgJ2JvcmRlckJvdHRvbVdpZHRoJ1xuXTtcblxudmFyIG1lYXN1cmVtZW50c0xlbmd0aCA9IG1lYXN1cmVtZW50cy5sZW5ndGg7XG5cbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xuICB2YXIgc2l6ZSA9IHtcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgaW5uZXJXaWR0aDogMCxcbiAgICBpbm5lckhlaWdodDogMCxcbiAgICBvdXRlcldpZHRoOiAwLFxuICAgIG91dGVySGVpZ2h0OiAwXG4gIH07XG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFN0eWxlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0U3R5bGUsIGdldCBzdHlsZSBvZiBlbGVtZW50LCBjaGVjayBmb3IgRmlyZWZveCBidWdcbiAqIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICovXG5mdW5jdGlvbiBnZXRTdHlsZSggZWxlbSApIHtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICBpZiAoICFzdHlsZSApIHtcbiAgICBsb2dFcnJvciggJ1N0eWxlIHJldHVybmVkICcgKyBzdHlsZSArXG4gICAgICAnLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyAnICtcbiAgICAgICdTZWUgaHR0cHM6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzEnICk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgaXNTZXR1cCA9IGZhbHNlO1xuXG52YXIgaXNCb3hTaXplT3V0ZXI7XG5cbi8qKlxuICogc2V0dXBcbiAqIGNoZWNrIGlzQm94U2l6ZXJPdXRlclxuICogZG8gb24gZmlyc3QgZ2V0U2l6ZSgpIHJhdGhlciB0aGFuIG9uIHBhZ2UgbG9hZCBmb3IgRmlyZWZveCBidWdcbiAqL1xuZnVuY3Rpb24gc2V0dXAoKSB7XG4gIC8vIHNldHVwIG9uY2VcbiAgaWYgKCBpc1NldHVwICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpc1NldHVwID0gdHJ1ZTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLyoqXG4gICAqIENocm9tZSAmIFNhZmFyaSBtZWFzdXJlIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXG4gICAqIElFMTEgJiBGaXJlZm94PDI5IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxuICAgKi9cbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xuICBkaXYuc3R5bGUucGFkZGluZyA9ICcxcHggMnB4IDNweCA0cHgnO1xuICBkaXYuc3R5bGUuYm9yZGVyU3R5bGUgPSAnc29saWQnO1xuICBkaXYuc3R5bGUuYm9yZGVyV2lkdGggPSAnMXB4IDJweCAzcHggNHB4JztcbiAgZGl2LnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94JztcblxuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBib2R5LmFwcGVuZENoaWxkKCBkaXYgKTtcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xuICAvLyByb3VuZCB2YWx1ZSBmb3IgYnJvd3NlciB6b29tLiBkZXNhbmRyby9tYXNvbnJ5IzkyOFxuICBpc0JveFNpemVPdXRlciA9IE1hdGgucm91bmQoIGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKSApID09IDIwMDtcbiAgZ2V0U2l6ZS5pc0JveFNpemVPdXRlciA9IGlzQm94U2l6ZU91dGVyO1xuXG4gIGJvZHkucmVtb3ZlQ2hpbGQoIGRpdiApO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIGdldFNpemUoIGVsZW0gKSB7XG4gIHNldHVwKCk7XG5cbiAgLy8gdXNlIHF1ZXJ5U2VsZXRvciBpZiBlbGVtIGlzIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XG4gIH1cblxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xuICBpZiAoICFlbGVtIHx8IHR5cGVvZiBlbGVtICE9ICdvYmplY3QnIHx8ICFlbGVtLm5vZGVUeXBlICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKCBlbGVtICk7XG5cbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcbiAgaWYgKCBzdHlsZS5kaXNwbGF5ID09ICdub25lJyApIHtcbiAgICByZXR1cm4gZ2V0WmVyb1NpemUoKTtcbiAgfVxuXG4gIHZhciBzaXplID0ge307XG4gIHNpemUud2lkdGggPSBlbGVtLm9mZnNldFdpZHRoO1xuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xuXG4gIHZhciBpc0JvcmRlckJveCA9IHNpemUuaXNCb3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT0gJ2JvcmRlci1ib3gnO1xuXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIHZhbHVlID0gc3R5bGVbIG1lYXN1cmVtZW50IF07XG4gICAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gICAgLy8gYW55ICdhdXRvJywgJ21lZGl1bScgdmFsdWUgd2lsbCBiZSAwXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xuICB9XG5cbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcbiAgdmFyIHBhZGRpbmdIZWlnaHQgPSBzaXplLnBhZGRpbmdUb3AgKyBzaXplLnBhZGRpbmdCb3R0b207XG4gIHZhciBtYXJnaW5XaWR0aCA9IHNpemUubWFyZ2luTGVmdCArIHNpemUubWFyZ2luUmlnaHQ7XG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xuICB2YXIgYm9yZGVyV2lkdGggPSBzaXplLmJvcmRlckxlZnRXaWR0aCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aDtcbiAgdmFyIGJvcmRlckhlaWdodCA9IHNpemUuYm9yZGVyVG9wV2lkdGggKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoO1xuXG4gIHZhciBpc0JvcmRlckJveFNpemVPdXRlciA9IGlzQm9yZGVyQm94ICYmIGlzQm94U2l6ZU91dGVyO1xuXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxuICB2YXIgc3R5bGVXaWR0aCA9IGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKTtcbiAgaWYgKCBzdHlsZVdpZHRoICE9PSBmYWxzZSApIHtcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XG4gICAgICAoIGlzQm9yZGVyQm94U2l6ZU91dGVyID8gMCA6IHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XG4gIH1cblxuICB2YXIgc3R5bGVIZWlnaHQgPSBnZXRTdHlsZVNpemUoIHN0eWxlLmhlaWdodCApO1xuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcbiAgICBzaXplLmhlaWdodCA9IHN0eWxlSGVpZ2h0ICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xuICB9XG5cbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgc2l6ZS5pbm5lckhlaWdodCA9IHNpemUuaGVpZ2h0IC0gKCBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG5cbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xuICBzaXplLm91dGVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyBtYXJnaW5IZWlnaHQ7XG5cbiAgcmV0dXJuIHNpemU7XG59XG5cbnJldHVybiBnZXRTaXplO1xuXG59KTtcblxuLyoqXG4gKiBtYXRjaGVzU2VsZWN0b3IgdjIuMC4yXG4gKiBtYXRjaGVzU2VsZWN0b3IoIGVsZW1lbnQsICcuc2VsZWN0b3InIClcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcicsZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBtYXRjaGVzTWV0aG9kID0gKCBmdW5jdGlvbigpIHtcbiAgICB2YXIgRWxlbVByb3RvID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlO1xuICAgIC8vIGNoZWNrIGZvciB0aGUgc3RhbmRhcmQgbWV0aG9kIG5hbWUgZmlyc3RcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xuICAgICAgcmV0dXJuICdtYXRjaGVzJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXNTZWxlY3Rvcic7XG4gICAgfVxuICAgIC8vIGNoZWNrIHZlbmRvciBwcmVmaXhlc1xuICAgIHZhciBwcmVmaXhlcyA9IFsgJ3dlYmtpdCcsICdtb3onLCAnbXMnLCAnbycgXTtcblxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICAgIHZhciBtZXRob2QgPSBwcmVmaXggKyAnTWF0Y2hlc1NlbGVjdG9yJztcbiAgICAgIGlmICggRWxlbVByb3RvWyBtZXRob2QgXSApIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZDtcbiAgICAgIH1cbiAgICB9XG4gIH0pKCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSB7XG4gICAgcmV0dXJuIGVsZW1bIG1hdGNoZXNNZXRob2QgXSggc2VsZWN0b3IgKTtcbiAgfTtcblxufSkpO1xuXG4vKipcbiAqIEZpenp5IFVJIHV0aWxzIHYyLjAuN1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLypqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxbXG4gICAgICAnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJ1xuICAgIF0sIGZ1bmN0aW9uKCBtYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3JcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKSB7XG5cblxuXG52YXIgdXRpbHMgPSB7fTtcblxuLy8gLS0tLS0gZXh0ZW5kIC0tLS0tIC8vXG5cbi8vIGV4dGVuZHMgb2JqZWN0c1xudXRpbHMuZXh0ZW5kID0gZnVuY3Rpb24oIGEsIGIgKSB7XG4gIGZvciAoIHZhciBwcm9wIGluIGIgKSB7XG4gICAgYVsgcHJvcCBdID0gYlsgcHJvcCBdO1xuICB9XG4gIHJldHVybiBhO1xufTtcblxuLy8gLS0tLS0gbW9kdWxvIC0tLS0tIC8vXG5cbnV0aWxzLm1vZHVsbyA9IGZ1bmN0aW9uKCBudW0sIGRpdiApIHtcbiAgcmV0dXJuICggKCBudW0gJSBkaXYgKSArIGRpdiApICUgZGl2O1xufTtcblxuLy8gLS0tLS0gbWFrZUFycmF5IC0tLS0tIC8vXG5cbnZhciBhcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxudXRpbHMubWFrZUFycmF5ID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgaWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcbiAgICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIC8vIHJldHVybiBlbXB0eSBhcnJheSBpZiB1bmRlZmluZWQgb3IgbnVsbC4gIzZcbiAgaWYgKCBvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQgKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIGlzQXJyYXlMaWtlID0gdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJztcbiAgaWYgKCBpc0FycmF5TGlrZSApIHtcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gICAgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCggb2JqICk7XG4gIH1cblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59O1xuXG4vLyAtLS0tLSByZW1vdmVGcm9tIC0tLS0tIC8vXG5cbnV0aWxzLnJlbW92ZUZyb20gPSBmdW5jdGlvbiggYXJ5LCBvYmogKSB7XG4gIHZhciBpbmRleCA9IGFyeS5pbmRleE9mKCBvYmogKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBhcnkuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBnZXRQYXJlbnQgLS0tLS0gLy9cblxudXRpbHMuZ2V0UGFyZW50ID0gZnVuY3Rpb24oIGVsZW0sIHNlbGVjdG9yICkge1xuICB3aGlsZSAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtICE9IGRvY3VtZW50LmJvZHkgKSB7XG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UXVlcnlFbGVtZW50IC0tLS0tIC8vXG5cbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xudXRpbHMuZ2V0UXVlcnlFbGVtZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuICByZXR1cm4gZWxlbTtcbn07XG5cbi8vIC0tLS0tIGhhbmRsZUV2ZW50IC0tLS0tIC8vXG5cbi8vIGVuYWJsZSAub250eXBlIHRvIHRyaWdnZXIgZnJvbSAuYWRkRXZlbnRMaXN0ZW5lciggZWxlbSwgJ3R5cGUnIClcbnV0aWxzLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xuXG51dGlscy5maWx0ZXJGaW5kRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMsIHNlbGVjdG9yICkge1xuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB2YXIgZmZFbGVtcyA9IFtdO1xuXG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIC8vIGNoZWNrIHRoYXQgZWxlbSBpcyBhbiBhY3R1YWwgZWxlbWVudFxuICAgIGlmICggISggZWxlbSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGFkZCBlbGVtIGlmIG5vIHNlbGVjdG9yXG4gICAgaWYgKCAhc2VsZWN0b3IgKSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGEgc2VsZWN0b3JcbiAgICAvLyBmaWx0ZXJcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xuICAgIH1cbiAgICAvLyBmaW5kIGNoaWxkcmVuXG4gICAgdmFyIGNoaWxkRWxlbXMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XG4gICAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgY2hpbGRFbGVtcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIGZmRWxlbXMucHVzaCggY2hpbGRFbGVtc1tpXSApO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGZmRWxlbXM7XG59O1xuXG4vLyAtLS0tLSBkZWJvdW5jZU1ldGhvZCAtLS0tLSAvL1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCA9IGZ1bmN0aW9uKCBfY2xhc3MsIG1ldGhvZE5hbWUsIHRocmVzaG9sZCApIHtcbiAgdGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEwMDtcbiAgLy8gb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBtZXRob2QgPSBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF07XG4gIHZhciB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XG5cbiAgX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzWyB0aW1lb3V0TmFtZSBdO1xuICAgIGNsZWFyVGltZW91dCggdGltZW91dCApO1xuXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICBtZXRob2QuYXBwbHkoIF90aGlzLCBhcmdzICk7XG4gICAgICBkZWxldGUgX3RoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgfSwgdGhyZXNob2xkICk7XG4gIH07XG59O1xuXG4vLyAtLS0tLSBkb2NSZWFkeSAtLS0tLSAvL1xuXG51dGlscy5kb2NSZWFkeSA9IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcbiAgdmFyIHJlYWR5U3RhdGUgPSBkb2N1bWVudC5yZWFkeVN0YXRlO1xuICBpZiAoIHJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJyB8fCByZWFkeVN0YXRlID09ICdpbnRlcmFjdGl2ZScgKSB7XG4gICAgLy8gZG8gYXN5bmMgdG8gYWxsb3cgZm9yIG90aGVyIHNjcmlwdHMgdG8gcnVuLiBtZXRhZml6enkvZmxpY2tpdHkjNDQxXG4gICAgc2V0VGltZW91dCggY2FsbGJhY2sgKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnRE9NQ29udGVudExvYWRlZCcsIGNhbGxiYWNrICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGh0bWxJbml0IC0tLS0tIC8vXG5cbi8vIGh0dHA6Ly9qYW1lc3JvYmVydHMubmFtZS9ibG9nLzIwMTAvMDIvMjIvc3RyaW5nLWZ1bmN0aW9ucy1mb3ItamF2YXNjcmlwdC10cmltLXRvLWNhbWVsLWNhc2UtdG8tZGFzaGVkLWFuZC10by11bmRlcnNjb3JlL1xudXRpbHMudG9EYXNoZWQgPSBmdW5jdGlvbiggc3RyICkge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oLikoW0EtWl0pL2csIGZ1bmN0aW9uKCBtYXRjaCwgJDEsICQyICkge1xuICAgIHJldHVybiAkMSArICctJyArICQyO1xuICB9KS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcbi8qKlxuICogYWxsb3cgdXNlciB0byBpbml0aWFsaXplIGNsYXNzZXMgdmlhIFtkYXRhLW5hbWVzcGFjZV0gb3IgLmpzLW5hbWVzcGFjZSBjbGFzc1xuICogaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcbiAqIG9wdGlvbnMgYXJlIHBhcnNlZCBmcm9tIGRhdGEtbmFtZXNwYWNlLW9wdGlvbnNcbiAqL1xudXRpbHMuaHRtbEluaXQgPSBmdW5jdGlvbiggV2lkZ2V0Q2xhc3MsIG5hbWVzcGFjZSApIHtcbiAgdXRpbHMuZG9jUmVhZHkoIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXNoZWROYW1lc3BhY2UgPSB1dGlscy50b0Rhc2hlZCggbmFtZXNwYWNlICk7XG4gICAgdmFyIGRhdGFBdHRyID0gJ2RhdGEtJyArIGRhc2hlZE5hbWVzcGFjZTtcbiAgICB2YXIgZGF0YUF0dHJFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICdbJyArIGRhdGFBdHRyICsgJ10nICk7XG4gICAgdmFyIGpzRGFzaEVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5qcy0nICsgZGFzaGVkTmFtZXNwYWNlICk7XG4gICAgdmFyIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBkYXRhQXR0ckVsZW1zIClcbiAgICAgIC5jb25jYXQoIHV0aWxzLm1ha2VBcnJheSgganNEYXNoRWxlbXMgKSApO1xuICAgIHZhciBkYXRhT3B0aW9uc0F0dHIgPSBkYXRhQXR0ciArICctb3B0aW9ucyc7XG4gICAgdmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG5cbiAgICBlbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHZhciBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFBdHRyICkgfHxcbiAgICAgICAgZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFPcHRpb25zQXR0ciApO1xuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICB0cnkge1xuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XG4gICAgICB9IGNhdGNoICggZXJyb3IgKSB7XG4gICAgICAgIC8vIGxvZyBlcnJvciwgZG8gbm90IGluaXRpYWxpemVcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoICdFcnJvciBwYXJzaW5nICcgKyBkYXRhQXR0ciArICcgb24gJyArIGVsZW0uY2xhc3NOYW1lICtcbiAgICAgICAgICAnOiAnICsgZXJyb3IgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBpbml0aWFsaXplXG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgV2lkZ2V0Q2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcbiAgICAgIC8vIG1ha2UgYXZhaWxhYmxlIHZpYSAkKCkuZGF0YSgnbmFtZXNwYWNlJylcbiAgICAgIGlmICggalF1ZXJ5ICkge1xuICAgICAgICBqUXVlcnkuZGF0YSggZWxlbSwgbmFtZXNwYWNlLCBpbnN0YW5jZSApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH0pO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiB1dGlscztcblxufSkpO1xuXG4vKipcbiAqIE91dGxheWVyIEl0ZW1cbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvaXRlbScsW1xuICAgICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJyxcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJ1xuICAgICAgXSxcbiAgICAgIGZhY3RvcnlcbiAgICApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lk91dGxheWVyID0ge307XG4gICAgd2luZG93Lk91dGxheWVyLkl0ZW0gPSBmYWN0b3J5KFxuICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgIHdpbmRvdy5nZXRTaXplXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIEV2RW1pdHRlciwgZ2V0U2l6ZSApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gaGVscGVycyAtLS0tLSAvL1xuXG5mdW5jdGlvbiBpc0VtcHR5T2JqKCBvYmogKSB7XG4gIGZvciAoIHZhciBwcm9wIGluIG9iaiApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcHJvcCA9IG51bGw7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDU1MzIHN1cHBvcnQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuXG52YXIgZG9jRWxlbVN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuXG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gdHlwZW9mIGRvY0VsZW1TdHlsZS50cmFuc2l0aW9uID09ICdzdHJpbmcnID9cbiAgJ3RyYW5zaXRpb24nIDogJ1dlYmtpdFRyYW5zaXRpb24nO1xudmFyIHRyYW5zZm9ybVByb3BlcnR5ID0gdHlwZW9mIGRvY0VsZW1TdHlsZS50cmFuc2Zvcm0gPT0gJ3N0cmluZycgP1xuICAndHJhbnNmb3JtJyA6ICdXZWJraXRUcmFuc2Zvcm0nO1xuXG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0ge1xuICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xufVsgdHJhbnNpdGlvblByb3BlcnR5IF07XG5cbi8vIGNhY2hlIGFsbCB2ZW5kb3IgcHJvcGVydGllcyB0aGF0IGNvdWxkIGhhdmUgdmVuZG9yIHByZWZpeFxudmFyIHZlbmRvclByb3BlcnRpZXMgPSB7XG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtUHJvcGVydHksXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25Qcm9wZXJ0eSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uUHJvcGVydHkgKyAnRHVyYXRpb24nLFxuICB0cmFuc2l0aW9uUHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wZXJ0eSArICdQcm9wZXJ0eScsXG4gIHRyYW5zaXRpb25EZWxheTogdHJhbnNpdGlvblByb3BlcnR5ICsgJ0RlbGF5J1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSXRlbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBJdGVtKCBlbGVtZW50LCBsYXlvdXQgKSB7XG4gIGlmICggIWVsZW1lbnQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgLy8gcGFyZW50IGxheW91dCBjbGFzcywgaS5lLiBNYXNvbnJ5LCBJc290b3BlLCBvciBQYWNrZXJ5XG4gIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuICB0aGlzLnBvc2l0aW9uID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIHRoaXMuX2NyZWF0ZSgpO1xufVxuXG4vLyBpbmhlcml0IEV2RW1pdHRlclxudmFyIHByb3RvID0gSXRlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5wcm90by5jb25zdHJ1Y3RvciA9IEl0ZW07XG5cbnByb3RvLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gdHJhbnNpdGlvbiBvYmplY3RzXG4gIHRoaXMuX3RyYW5zbiA9IHtcbiAgICBpbmdQcm9wZXJ0aWVzOiB7fSxcbiAgICBjbGVhbjoge30sXG4gICAgb25FbmQ6IHt9XG4gIH07XG5cbiAgdGhpcy5jc3Moe1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gIH0pO1xufTtcblxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxucHJvdG8uaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbi8qKlxuICogYXBwbHkgQ1NTIHN0eWxlcyB0byBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqL1xucHJvdG8uY3NzID0gZnVuY3Rpb24oIHN0eWxlICkge1xuICB2YXIgZWxlbVN0eWxlID0gdGhpcy5lbGVtZW50LnN0eWxlO1xuXG4gIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xuICAgIC8vIHVzZSB2ZW5kb3IgcHJvcGVydHkgaWYgYXZhaWxhYmxlXG4gICAgdmFyIHN1cHBvcnRlZFByb3AgPSB2ZW5kb3JQcm9wZXJ0aWVzWyBwcm9wIF0gfHwgcHJvcDtcbiAgICBlbGVtU3R5bGVbIHN1cHBvcnRlZFByb3AgXSA9IHN0eWxlWyBwcm9wIF07XG4gIH1cbn07XG5cbiAvLyBtZWFzdXJlIHBvc2l0aW9uLCBhbmQgc2V0cyBpdFxucHJvdG8uZ2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggdGhpcy5lbGVtZW50ICk7XG4gIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XG4gIHZhciBpc09yaWdpblRvcCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xuICB2YXIgeFZhbHVlID0gc3R5bGVbIGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCcgXTtcbiAgdmFyIHlWYWx1ZSA9IHN0eWxlWyBpc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbScgXTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KCB4VmFsdWUgKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KCB5VmFsdWUgKTtcbiAgLy8gY29udmVydCBwZXJjZW50IHRvIHBpeGVsc1xuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XG4gIGlmICggeFZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSApIHtcbiAgICB4ID0gKCB4IC8gMTAwICkgKiBsYXlvdXRTaXplLndpZHRoO1xuICB9XG4gIGlmICggeVZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSApIHtcbiAgICB5ID0gKCB5IC8gMTAwICkgKiBsYXlvdXRTaXplLmhlaWdodDtcbiAgfVxuICAvLyBjbGVhbiB1cCAnYXV0bycgb3Igb3RoZXIgbm9uLWludGVnZXIgdmFsdWVzXG4gIHggPSBpc05hTiggeCApID8gMCA6IHg7XG4gIHkgPSBpc05hTiggeSApID8gMCA6IHk7XG4gIC8vIHJlbW92ZSBwYWRkaW5nIGZyb20gbWVhc3VyZW1lbnRcbiAgeCAtPSBpc09yaWdpbkxlZnQgPyBsYXlvdXRTaXplLnBhZGRpbmdMZWZ0IDogbGF5b3V0U2l6ZS5wYWRkaW5nUmlnaHQ7XG4gIHkgLT0gaXNPcmlnaW5Ub3AgPyBsYXlvdXRTaXplLnBhZGRpbmdUb3AgOiBsYXlvdXRTaXplLnBhZGRpbmdCb3R0b207XG5cbiAgdGhpcy5wb3NpdGlvbi54ID0geDtcbiAgdGhpcy5wb3NpdGlvbi55ID0geTtcbn07XG5cbi8vIHNldCBzZXR0bGVkIHBvc2l0aW9uLCBhcHBseSBwYWRkaW5nXG5wcm90by5sYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XG4gIHZhciBzdHlsZSA9IHt9O1xuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luTGVmdCcpO1xuICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5Ub3AnKTtcblxuICAvLyB4XG4gIHZhciB4UGFkZGluZyA9IGlzT3JpZ2luTGVmdCA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0JztcbiAgdmFyIHhQcm9wZXJ0eSA9IGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHZhciB4UmVzZXRQcm9wZXJ0eSA9IGlzT3JpZ2luTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgdmFyIHggPSB0aGlzLnBvc2l0aW9uLnggKyBsYXlvdXRTaXplWyB4UGFkZGluZyBdO1xuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcbiAgc3R5bGVbIHhQcm9wZXJ0eSBdID0gdGhpcy5nZXRYVmFsdWUoIHggKTtcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcbiAgc3R5bGVbIHhSZXNldFByb3BlcnR5IF0gPSAnJztcblxuICAvLyB5XG4gIHZhciB5UGFkZGluZyA9IGlzT3JpZ2luVG9wID8gJ3BhZGRpbmdUb3AnIDogJ3BhZGRpbmdCb3R0b20nO1xuICB2YXIgeVByb3BlcnR5ID0gaXNPcmlnaW5Ub3AgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgeVJlc2V0UHJvcGVydHkgPSBpc09yaWdpblRvcCA/ICdib3R0b20nIDogJ3RvcCc7XG5cbiAgdmFyIHkgPSB0aGlzLnBvc2l0aW9uLnkgKyBsYXlvdXRTaXplWyB5UGFkZGluZyBdO1xuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcbiAgc3R5bGVbIHlQcm9wZXJ0eSBdID0gdGhpcy5nZXRZVmFsdWUoIHkgKTtcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcbiAgc3R5bGVbIHlSZXNldFByb3BlcnR5IF0gPSAnJztcblxuICB0aGlzLmNzcyggc3R5bGUgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdsYXlvdXQnLCBbIHRoaXMgXSApO1xufTtcblxucHJvdG8uZ2V0WFZhbHVlID0gZnVuY3Rpb24oIHggKSB7XG4gIHZhciBpc0hvcml6b250YWwgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdob3Jpem9udGFsJyk7XG4gIHJldHVybiB0aGlzLmxheW91dC5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiAhaXNIb3Jpem9udGFsID9cbiAgICAoICggeCAvIHRoaXMubGF5b3V0LnNpemUud2lkdGggKSAqIDEwMCApICsgJyUnIDogeCArICdweCc7XG59O1xuXG5wcm90by5nZXRZVmFsdWUgPSBmdW5jdGlvbiggeSApIHtcbiAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ2hvcml6b250YWwnKTtcbiAgcmV0dXJuIHRoaXMubGF5b3V0Lm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICYmIGlzSG9yaXpvbnRhbCA/XG4gICAgKCAoIHkgLyB0aGlzLmxheW91dC5zaXplLmhlaWdodCApICogMTAwICkgKyAnJScgOiB5ICsgJ3B4Jztcbn07XG5cbnByb3RvLl90cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcbiAgdGhpcy5nZXRQb3NpdGlvbigpO1xuICAvLyBnZXQgY3VycmVudCB4ICYgeSBmcm9tIHRvcC9sZWZ0XG4gIHZhciBjdXJYID0gdGhpcy5wb3NpdGlvbi54O1xuICB2YXIgY3VyWSA9IHRoaXMucG9zaXRpb24ueTtcblxuICB2YXIgZGlkTm90TW92ZSA9IHggPT0gdGhpcy5wb3NpdGlvbi54ICYmIHkgPT0gdGhpcy5wb3NpdGlvbi55O1xuXG4gIC8vIHNhdmUgZW5kIHBvc2l0aW9uXG4gIHRoaXMuc2V0UG9zaXRpb24oIHgsIHkgKTtcblxuICAvLyBpZiBkaWQgbm90IG1vdmUgYW5kIG5vdCB0cmFuc2l0aW9uaW5nLCBqdXN0IGdvIHRvIGxheW91dFxuICBpZiAoIGRpZE5vdE1vdmUgJiYgIXRoaXMuaXNUcmFuc2l0aW9uaW5nICkge1xuICAgIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdHJhbnNYID0geCAtIGN1clg7XG4gIHZhciB0cmFuc1kgPSB5IC0gY3VyWTtcbiAgdmFyIHRyYW5zaXRpb25TdHlsZSA9IHt9O1xuICB0cmFuc2l0aW9uU3R5bGUudHJhbnNmb3JtID0gdGhpcy5nZXRUcmFuc2xhdGUoIHRyYW5zWCwgdHJhbnNZICk7XG5cbiAgdGhpcy50cmFuc2l0aW9uKHtcbiAgICB0bzogdHJhbnNpdGlvblN0eWxlLFxuICAgIG9uVHJhbnNpdGlvbkVuZDoge1xuICAgICAgdHJhbnNmb3JtOiB0aGlzLmxheW91dFBvc2l0aW9uXG4gICAgfSxcbiAgICBpc0NsZWFuaW5nOiB0cnVlXG4gIH0pO1xufTtcblxucHJvdG8uZ2V0VHJhbnNsYXRlID0gZnVuY3Rpb24oIHgsIHkgKSB7XG4gIC8vIGZsaXAgY29vcmlkaW5hdGVzIGlmIG9yaWdpbiBvbiByaWdodCBvciBib3R0b21cbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcbiAgdmFyIGlzT3JpZ2luVG9wID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XG4gIHggPSBpc09yaWdpbkxlZnQgPyB4IDogLXg7XG4gIHkgPSBpc09yaWdpblRvcCA/IHkgOiAteTtcbiAgcmV0dXJuICd0cmFuc2xhdGUzZCgnICsgeCArICdweCwgJyArIHkgKyAncHgsIDApJztcbn07XG5cbi8vIG5vbiB0cmFuc2l0aW9uICsgdHJhbnNmb3JtIHN1cHBvcnRcbnByb3RvLmdvVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcbiAgdGhpcy5zZXRQb3NpdGlvbiggeCwgeSApO1xuICB0aGlzLmxheW91dFBvc2l0aW9uKCk7XG59O1xuXG5wcm90by5tb3ZlVG8gPSBwcm90by5fdHJhbnNpdGlvblRvO1xuXG5wcm90by5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4LCB5ICkge1xuICB0aGlzLnBvc2l0aW9uLnggPSBwYXJzZUZsb2F0KCB4ICk7XG4gIHRoaXMucG9zaXRpb24ueSA9IHBhcnNlRmxvYXQoIHkgKTtcbn07XG5cbi8vIC0tLS0tIHRyYW5zaXRpb24gLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGUgLSBDU1NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZFxuICovXG5cbi8vIG5vbiB0cmFuc2l0aW9uLCBqdXN0IHRyaWdnZXIgY2FsbGJhY2tcbnByb3RvLl9ub25UcmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XG4gIHRoaXMuY3NzKCBhcmdzLnRvICk7XG4gIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xuICAgIHRoaXMuX3JlbW92ZVN0eWxlcyggYXJncy50byApO1xuICB9XG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xuICAgIGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF0uY2FsbCggdGhpcyApO1xuICB9XG59O1xuXG4vKipcbiAqIHByb3BlciB0cmFuc2l0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIGFyZ3VtZW50c1xuICogICBAcGFyYW0ge09iamVjdH0gdG8gLSBzdHlsZSB0byB0cmFuc2l0aW9uIHRvXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSBmcm9tIC0gc3R5bGUgdG8gc3RhcnQgdHJhbnNpdGlvbiBmcm9tXG4gKiAgIEBwYXJhbSB7Qm9vbGVhbn0gaXNDbGVhbmluZyAtIHJlbW92ZXMgdHJhbnNpdGlvbiBzdHlsZXMgYWZ0ZXIgdHJhbnNpdGlvblxuICogICBAcGFyYW0ge0Z1bmN0aW9ufSBvblRyYW5zaXRpb25FbmQgLSBjYWxsYmFja1xuICovXG5wcm90by50cmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XG4gIC8vIHJlZGlyZWN0IHRvIG5vblRyYW5zaXRpb24gaWYgbm8gdHJhbnNpdGlvbiBkdXJhdGlvblxuICBpZiAoICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xuICAgIHRoaXMuX25vblRyYW5zaXRpb24oIGFyZ3MgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX3RyYW5zaXRpb24gPSB0aGlzLl90cmFuc247XG4gIC8vIGtlZXAgdHJhY2sgb2Ygb25UcmFuc2l0aW9uRW5kIGNhbGxiYWNrIGJ5IGNzcyBwcm9wZXJ0eVxuICBmb3IgKCB2YXIgcHJvcCBpbiBhcmdzLm9uVHJhbnNpdGlvbkVuZCApIHtcbiAgICBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcCBdID0gYXJncy5vblRyYW5zaXRpb25FbmRbIHByb3AgXTtcbiAgfVxuICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xuICBmb3IgKCBwcm9wIGluIGFyZ3MudG8gKSB7XG4gICAgX3RyYW5zaXRpb24uaW5nUHJvcGVydGllc1sgcHJvcCBdID0gdHJ1ZTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdG8gY2xlYW4gdXAgd2hlbiB0cmFuc2l0aW9uIGlzIGRvbmVcbiAgICBpZiAoIGFyZ3MuaXNDbGVhbmluZyApIHtcbiAgICAgIF90cmFuc2l0aW9uLmNsZWFuWyBwcm9wIF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBmcm9tIHN0eWxlc1xuICBpZiAoIGFyZ3MuZnJvbSApIHtcbiAgICB0aGlzLmNzcyggYXJncy5mcm9tICk7XG4gICAgLy8gZm9yY2UgcmVkcmF3LiBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcbiAgICB2YXIgaCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgLy8gaGFjayBmb3IgSlNIaW50IHRvIGh1c2ggYWJvdXQgdW51c2VkIHZhclxuICAgIGggPSBudWxsO1xuICB9XG4gIC8vIGVuYWJsZSB0cmFuc2l0aW9uXG4gIHRoaXMuZW5hYmxlVHJhbnNpdGlvbiggYXJncy50byApO1xuICAvLyBzZXQgc3R5bGVzIHRoYXQgYXJlIHRyYW5zaXRpb25pbmdcbiAgdGhpcy5jc3MoIGFyZ3MudG8gKTtcblxuICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XG5cbn07XG5cbi8vIGRhc2ggYmVmb3JlIGFsbCBjYXAgbGV0dGVycywgaW5jbHVkaW5nIGZpcnN0IGZvclxuLy8gV2Via2l0VHJhbnNmb3JtID0+IC13ZWJraXQtdHJhbnNmb3JtXG5mdW5jdGlvbiB0b0Rhc2hlZEFsbCggc3RyICkge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oW0EtWl0pL2csIGZ1bmN0aW9uKCAkMSApIHtcbiAgICByZXR1cm4gJy0nICsgJDEudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59XG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSAnb3BhY2l0eSwnICsgdG9EYXNoZWRBbGwoIHRyYW5zZm9ybVByb3BlcnR5ICk7XG5cbnByb3RvLmVuYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigvKiBzdHlsZSAqLykge1xuICAvLyBIQUNLIGNoYW5naW5nIHRyYW5zaXRpb25Qcm9wZXJ0eSBkdXJpbmcgYSB0cmFuc2l0aW9uXG4gIC8vIHdpbGwgY2F1c2UgdHJhbnNpdGlvbiB0byBqdW1wXG4gIGlmICggdGhpcy5pc1RyYW5zaXRpb25pbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gbWFrZSBgdHJhbnNpdGlvbjogZm9vLCBiYXIsIGJhemAgZnJvbSBzdHlsZSBvYmplY3RcbiAgLy8gSEFDSyB1bi1jb21tZW50IHRoaXMgd2hlbiBlbmFibGVUcmFuc2l0aW9uIGNhbiB3b3JrXG4gIC8vIHdoaWxlIGEgdHJhbnNpdGlvbiBpcyBoYXBwZW5pbmdcbiAgLy8gdmFyIHRyYW5zaXRpb25WYWx1ZXMgPSBbXTtcbiAgLy8gZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XG4gIC8vICAgLy8gZGFzaC1pZnkgY2FtZWxDYXNlZCBwcm9wZXJ0aWVzIGxpa2UgV2Via2l0VHJhbnNpdGlvblxuICAvLyAgIHByb3AgPSB2ZW5kb3JQcm9wZXJ0aWVzWyBwcm9wIF0gfHwgcHJvcDtcbiAgLy8gICB0cmFuc2l0aW9uVmFsdWVzLnB1c2goIHRvRGFzaGVkQWxsKCBwcm9wICkgKTtcbiAgLy8gfVxuICAvLyBtdW5nZSBudW1iZXIgdG8gbWlsbGlzZWNvbmQsIHRvIG1hdGNoIHN0YWdnZXJcbiAgdmFyIGR1cmF0aW9uID0gdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247XG4gIGR1cmF0aW9uID0gdHlwZW9mIGR1cmF0aW9uID09ICdudW1iZXInID8gZHVyYXRpb24gKyAnbXMnIDogZHVyYXRpb247XG4gIC8vIGVuYWJsZSB0cmFuc2l0aW9uIHN0eWxlc1xuICB0aGlzLmNzcyh7XG4gICAgdHJhbnNpdGlvblByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcHMsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICB0cmFuc2l0aW9uRGVsYXk6IHRoaXMuc3RhZ2dlckRlbGF5IHx8IDBcbiAgfSk7XG4gIC8vIGxpc3RlbiBmb3IgdHJhbnNpdGlvbiBlbmQgZXZlbnRcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHRyYW5zaXRpb25FbmRFdmVudCwgdGhpcywgZmFsc2UgKTtcbn07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG5wcm90by5vbndlYmtpdFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMub250cmFuc2l0aW9uZW5kKCBldmVudCApO1xufTtcblxucHJvdG8ub25vdHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5vbnRyYW5zaXRpb25lbmQoIGV2ZW50ICk7XG59O1xuXG4vLyBwcm9wZXJ0aWVzIHRoYXQgSSBtdW5nZSB0byBtYWtlIG15IGxpZmUgZWFzaWVyXG52YXIgZGFzaGVkVmVuZG9yUHJvcGVydGllcyA9IHtcbiAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zZm9ybSdcbn07XG5cbnByb3RvLm9udHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgLy8gZGlzcmVnYXJkIGJ1YmJsZWQgZXZlbnRzIGZyb20gY2hpbGRyZW5cbiAgaWYgKCBldmVudC50YXJnZXQgIT09IHRoaXMuZWxlbWVudCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xuICAvLyBnZXQgcHJvcGVydHkgbmFtZSBvZiB0cmFuc2l0aW9uZWQgcHJvcGVydHksIGNvbnZlcnQgdG8gcHJlZml4LWZyZWVcbiAgdmFyIHByb3BlcnR5TmFtZSA9IGRhc2hlZFZlbmRvclByb3BlcnRpZXNbIGV2ZW50LnByb3BlcnR5TmFtZSBdIHx8IGV2ZW50LnByb3BlcnR5TmFtZTtcblxuICAvLyByZW1vdmUgcHJvcGVydHkgdGhhdCBoYXMgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcbiAgZGVsZXRlIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3BlcnR5TmFtZSBdO1xuICAvLyBjaGVjayBpZiBhbnkgcHJvcGVydGllcyBhcmUgc3RpbGwgdHJhbnNpdGlvbmluZ1xuICBpZiAoIGlzRW1wdHlPYmooIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXMgKSApIHtcbiAgICAvLyBhbGwgcHJvcGVydGllcyBoYXZlIGNvbXBsZXRlZCB0cmFuc2l0aW9uaW5nXG4gICAgdGhpcy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuICB9XG4gIC8vIGNsZWFuIHN0eWxlXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLmNsZWFuICkge1xuICAgIC8vIGNsZWFuIHVwIHN0eWxlXG4gICAgdGhpcy5lbGVtZW50LnN0eWxlWyBldmVudC5wcm9wZXJ0eU5hbWUgXSA9ICcnO1xuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcGVydHlOYW1lIF07XG4gIH1cbiAgLy8gdHJpZ2dlciBvblRyYW5zaXRpb25FbmQgY2FsbGJhY2tcbiAgaWYgKCBwcm9wZXJ0eU5hbWUgaW4gX3RyYW5zaXRpb24ub25FbmQgKSB7XG4gICAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wZXJ0eU5hbWUgXTtcbiAgICBvblRyYW5zaXRpb25FbmQuY2FsbCggdGhpcyApO1xuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcGVydHlOYW1lIF07XG4gIH1cblxuICB0aGlzLmVtaXRFdmVudCggJ3RyYW5zaXRpb25FbmQnLCBbIHRoaXMgXSApO1xufTtcblxucHJvdG8uZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzKCk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgc3R5bGUgcHJvcGVydHkgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbioqL1xucHJvdG8uX3JlbW92ZVN0eWxlcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcbiAgLy8gY2xlYW4gdXAgdHJhbnNpdGlvbiBzdHlsZXNcbiAgdmFyIGNsZWFuU3R5bGUgPSB7fTtcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XG4gICAgY2xlYW5TdHlsZVsgcHJvcCBdID0gJyc7XG4gIH1cbiAgdGhpcy5jc3MoIGNsZWFuU3R5bGUgKTtcbn07XG5cbnZhciBjbGVhblRyYW5zaXRpb25TdHlsZSA9IHtcbiAgdHJhbnNpdGlvblByb3BlcnR5OiAnJyxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnJyxcbiAgdHJhbnNpdGlvbkRlbGF5OiAnJ1xufTtcblxucHJvdG8ucmVtb3ZlVHJhbnNpdGlvblN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuICAvLyByZW1vdmUgdHJhbnNpdGlvblxuICB0aGlzLmNzcyggY2xlYW5UcmFuc2l0aW9uU3R5bGUgKTtcbn07XG5cbi8vIC0tLS0tIHN0YWdnZXIgLS0tLS0gLy9cblxucHJvdG8uc3RhZ2dlciA9IGZ1bmN0aW9uKCBkZWxheSApIHtcbiAgZGVsYXkgPSBpc05hTiggZGVsYXkgKSA/IDAgOiBkZWxheTtcbiAgdGhpcy5zdGFnZ2VyRGVsYXkgPSBkZWxheSArICdtcyc7XG59O1xuXG4vLyAtLS0tLSBzaG93L2hpZGUvcmVtb3ZlIC0tLS0tIC8vXG5cbi8vIHJlbW92ZSBlbGVtZW50IGZyb20gRE9NXG5wcm90by5yZW1vdmVFbGVtID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcbiAgLy8gcmVtb3ZlIGRpc3BsYXk6IG5vbmVcbiAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcbiAgdGhpcy5lbWl0RXZlbnQoICdyZW1vdmUnLCBbIHRoaXMgXSApO1xufTtcblxucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGp1c3QgcmVtb3ZlIGVsZW1lbnQgaWYgbm8gdHJhbnNpdGlvbiBzdXBwb3J0IG9yIG5vIHRyYW5zaXRpb25cbiAgaWYgKCAhdHJhbnNpdGlvblByb3BlcnR5IHx8ICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xuICAgIHRoaXMucmVtb3ZlRWxlbSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHN0YXJ0IHRyYW5zaXRpb25cbiAgdGhpcy5vbmNlKCAndHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlRWxlbSgpO1xuICB9KTtcbiAgdGhpcy5oaWRlKCk7XG59O1xuXG5wcm90by5yZXZlYWwgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuaXNIaWRkZW47XG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xuXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcbiAgdmFyIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IHRoaXMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSgndmlzaWJsZVN0eWxlJyk7XG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZDtcblxuICB0aGlzLnRyYW5zaXRpb24oe1xuICAgIGZyb206IG9wdGlvbnMuaGlkZGVuU3R5bGUsXG4gICAgdG86IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcbiAgfSk7XG59O1xuXG5wcm90by5vblJldmVhbFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgaWYgc3RpbGwgdmlzaWJsZVxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIGhpZGRlblxuICBpZiAoICF0aGlzLmlzSGlkZGVuICkge1xuICAgIHRoaXMuZW1pdEV2ZW50KCdyZXZlYWwnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgc3R5bGUgcHJvcGVydHkgdXNlIGZvciBoaWRlL3JldmVhbCB0cmFuc2l0aW9uIGVuZFxuICogQHBhcmFtIHtTdHJpbmd9IHN0eWxlUHJvcGVydHkgLSBoaWRkZW5TdHlsZS92aXNpYmxlU3R5bGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbnByb3RvLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkgPSBmdW5jdGlvbiggc3R5bGVQcm9wZXJ0eSApIHtcbiAgdmFyIG9wdGlvblN0eWxlID0gdGhpcy5sYXlvdXQub3B0aW9uc1sgc3R5bGVQcm9wZXJ0eSBdO1xuICAvLyB1c2Ugb3BhY2l0eVxuICBpZiAoIG9wdGlvblN0eWxlLm9wYWNpdHkgKSB7XG4gICAgcmV0dXJuICdvcGFjaXR5JztcbiAgfVxuICAvLyBnZXQgZmlyc3QgcHJvcGVydHlcbiAgZm9yICggdmFyIHByb3AgaW4gb3B0aW9uU3R5bGUgKSB7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnByb3RvLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2V0IGZsYWdcbiAgdGhpcy5pc0hpZGRlbiA9IHRydWU7XG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xuXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcbiAgdmFyIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IHRoaXMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSgnaGlkZGVuU3R5bGUnKTtcbiAgb25UcmFuc2l0aW9uRW5kWyB0cmFuc2l0aW9uRW5kUHJvcGVydHkgXSA9IHRoaXMub25IaWRlVHJhbnNpdGlvbkVuZDtcblxuICB0aGlzLnRyYW5zaXRpb24oe1xuICAgIGZyb206IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxuICAgIHRvOiBvcHRpb25zLmhpZGRlblN0eWxlLFxuICAgIC8vIGtlZXAgaGlkZGVuIHN0dWZmIGhpZGRlblxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcbiAgfSk7XG59O1xuXG5wcm90by5vbkhpZGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIGlmIHN0aWxsIGhpZGRlblxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIHVuLWhpZGRlblxuICBpZiAoIHRoaXMuaXNIaWRkZW4gKSB7XG4gICAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnbm9uZScgfSk7XG4gICAgdGhpcy5lbWl0RXZlbnQoJ2hpZGUnKTtcbiAgfVxufTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNzcyh7XG4gICAgcG9zaXRpb246ICcnLFxuICAgIGxlZnQ6ICcnLFxuICAgIHJpZ2h0OiAnJyxcbiAgICB0b3A6ICcnLFxuICAgIGJvdHRvbTogJycsXG4gICAgdHJhbnNpdGlvbjogJycsXG4gICAgdHJhbnNmb3JtOiAnJ1xuICB9KTtcbn07XG5cbnJldHVybiBJdGVtO1xuXG59KSk7XG5cbi8qIVxuICogT3V0bGF5ZXIgdjIuMS4xXG4gKiB0aGUgYnJhaW5zIGFuZCBndXRzIG9mIGEgbGF5b3V0IGxpYnJhcnlcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvb3V0bGF5ZXInLFtcbiAgICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgICAgICcuL2l0ZW0nXG4gICAgICBdLFxuICAgICAgZnVuY3Rpb24oIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0gKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0pO1xuICAgICAgfVxuICAgICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgICByZXF1aXJlKCcuL2l0ZW0nKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuT3V0bGF5ZXIgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxuICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICAgIHdpbmRvdy5PdXRsYXllci5JdGVtXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gdmFycyAtLS0tLSAvL1xuXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG52YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE91dGxheWVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyc1xudmFyIEdVSUQgPSAwO1xuLy8gaW50ZXJuYWwgc3RvcmUgb2YgYWxsIE91dGxheWVyIGludGFuY2VzXG52YXIgaW5zdGFuY2VzID0ge307XG5cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnQsIFN0cmluZ30gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBPdXRsYXllciggZWxlbWVudCwgb3B0aW9ucyApIHtcbiAgdmFyIHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XG4gICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgY29uc29sZS5lcnJvciggJ0JhZCBlbGVtZW50IGZvciAnICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UgK1xuICAgICAgICAnOiAnICsgKCBxdWVyeUVsZW1lbnQgfHwgZWxlbWVudCApICk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQgPSBxdWVyeUVsZW1lbnQ7XG4gIC8vIGFkZCBqUXVlcnlcbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XG4gIH1cblxuICAvLyBvcHRpb25zXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgKTtcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcblxuICAvLyBhZGQgaWQgZm9yIE91dGxheWVyLmdldEZyb21FbGVtZW50XG4gIHZhciBpZCA9ICsrR1VJRDtcbiAgdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRCA9IGlkOyAvLyBleHBhbmRvXG4gIGluc3RhbmNlc1sgaWQgXSA9IHRoaXM7IC8vIGFzc29jaWF0ZSB2aWEgaWRcblxuICAvLyBraWNrIGl0IG9mZlxuICB0aGlzLl9jcmVhdGUoKTtcblxuICB2YXIgaXNJbml0TGF5b3V0ID0gdGhpcy5fZ2V0T3B0aW9uKCdpbml0TGF5b3V0Jyk7XG4gIGlmICggaXNJbml0TGF5b3V0ICkge1xuICAgIHRoaXMubGF5b3V0KCk7XG4gIH1cbn1cblxuLy8gc2V0dGluZ3MgYXJlIGZvciBpbnRlcm5hbCB1c2Ugb25seVxuT3V0bGF5ZXIubmFtZXNwYWNlID0gJ291dGxheWVyJztcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xuXG4vLyBkZWZhdWx0IG9wdGlvbnNcbk91dGxheWVyLmRlZmF1bHRzID0ge1xuICBjb250YWluZXJTdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sXG4gIGluaXRMYXlvdXQ6IHRydWUsXG4gIG9yaWdpbkxlZnQ6IHRydWUsXG4gIG9yaWdpblRvcDogdHJ1ZSxcbiAgcmVzaXplOiB0cnVlLFxuICByZXNpemVDb250YWluZXI6IHRydWUsXG4gIC8vIGl0ZW0gb3B0aW9uc1xuICB0cmFuc2l0aW9uRHVyYXRpb246ICcwLjRzJyxcbiAgaGlkZGVuU3R5bGU6IHtcbiAgICBvcGFjaXR5OiAwLFxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuMDAxKSdcbiAgfSxcbiAgdmlzaWJsZVN0eWxlOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgfVxufTtcblxudmFyIHByb3RvID0gT3V0bGF5ZXIucHJvdG90eXBlO1xuLy8gaW5oZXJpdCBFdkVtaXR0ZXJcbnV0aWxzLmV4dGVuZCggcHJvdG8sIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuLyoqXG4gKiBzZXQgb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqL1xucHJvdG8ub3B0aW9uID0gZnVuY3Rpb24oIG9wdHMgKSB7XG4gIHV0aWxzLmV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRzICk7XG59O1xuXG4vKipcbiAqIGdldCBiYWNrd2FyZHMgY29tcGF0aWJsZSBvcHRpb24gdmFsdWUsIGNoZWNrIG9sZCBuYW1lXG4gKi9cbnByb3RvLl9nZXRPcHRpb24gPSBmdW5jdGlvbiggb3B0aW9uICkge1xuICB2YXIgb2xkT3B0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5jb21wYXRPcHRpb25zWyBvcHRpb24gXTtcbiAgcmV0dXJuIG9sZE9wdGlvbiAmJiB0aGlzLm9wdGlvbnNbIG9sZE9wdGlvbiBdICE9PSB1bmRlZmluZWQgP1xuICAgIHRoaXMub3B0aW9uc1sgb2xkT3B0aW9uIF0gOiB0aGlzLm9wdGlvbnNbIG9wdGlvbiBdO1xufTtcblxuT3V0bGF5ZXIuY29tcGF0T3B0aW9ucyA9IHtcbiAgLy8gY3VycmVudE5hbWU6IG9sZE5hbWVcbiAgaW5pdExheW91dDogJ2lzSW5pdExheW91dCcsXG4gIGhvcml6b250YWw6ICdpc0hvcml6b250YWwnLFxuICBsYXlvdXRJbnN0YW50OiAnaXNMYXlvdXRJbnN0YW50JyxcbiAgb3JpZ2luTGVmdDogJ2lzT3JpZ2luTGVmdCcsXG4gIG9yaWdpblRvcDogJ2lzT3JpZ2luVG9wJyxcbiAgcmVzaXplOiAnaXNSZXNpemVCb3VuZCcsXG4gIHJlc2l6ZUNvbnRhaW5lcjogJ2lzUmVzaXppbmdDb250YWluZXInXG59O1xuXG5wcm90by5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGdldCBpdGVtcyBmcm9tIGNoaWxkcmVuXG4gIHRoaXMucmVsb2FkSXRlbXMoKTtcbiAgLy8gZWxlbWVudHMgdGhhdCBhZmZlY3QgbGF5b3V0LCBidXQgYXJlIG5vdCBsYWlkIG91dFxuICB0aGlzLnN0YW1wcyA9IFtdO1xuICB0aGlzLnN0YW1wKCB0aGlzLm9wdGlvbnMuc3RhbXAgKTtcbiAgLy8gc2V0IGNvbnRhaW5lciBzdHlsZVxuICB1dGlscy5leHRlbmQoIHRoaXMuZWxlbWVudC5zdHlsZSwgdGhpcy5vcHRpb25zLmNvbnRhaW5lclN0eWxlICk7XG5cbiAgLy8gYmluZCByZXNpemUgbWV0aG9kXG4gIHZhciBjYW5CaW5kUmVzaXplID0gdGhpcy5fZ2V0T3B0aW9uKCdyZXNpemUnKTtcbiAgaWYgKCBjYW5CaW5kUmVzaXplICkge1xuICAgIHRoaXMuYmluZFJlc2l6ZSgpO1xuICB9XG59O1xuXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuIGFnYWluIGFuZCBnZXRzIGJyaWNrcyBpbiBwcm9wZXIgb3JkZXJcbnByb3RvLnJlbG9hZEl0ZW1zID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICB0aGlzLml0ZW1zID0gdGhpcy5faXRlbWl6ZSggdGhpcy5lbGVtZW50LmNoaWxkcmVuICk7XG59O1xuXG5cbi8qKlxuICogdHVybiBlbGVtZW50cyBpbnRvIE91dGxheWVyLkl0ZW1zIHRvIGJlIHVzZWQgaW4gbGF5b3V0XG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGNvbGxlY3Rpb24gb2YgbmV3IE91dGxheWVyIEl0ZW1zXG4gKi9cbnByb3RvLl9pdGVtaXplID0gZnVuY3Rpb24oIGVsZW1zICkge1xuXG4gIHZhciBpdGVtRWxlbXMgPSB0aGlzLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzKCBlbGVtcyApO1xuICB2YXIgSXRlbSA9IHRoaXMuY29uc3RydWN0b3IuSXRlbTtcblxuICAvLyBjcmVhdGUgbmV3IE91dGxheWVyIEl0ZW1zIGZvciBjb2xsZWN0aW9uXG4gIHZhciBpdGVtcyA9IFtdO1xuICBmb3IgKCB2YXIgaT0wOyBpIDwgaXRlbUVsZW1zLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBlbGVtID0gaXRlbUVsZW1zW2ldO1xuICAgIHZhciBpdGVtID0gbmV3IEl0ZW0oIGVsZW0sIHRoaXMgKTtcbiAgICBpdGVtcy5wdXNoKCBpdGVtICk7XG4gIH1cblxuICByZXR1cm4gaXRlbXM7XG59O1xuXG4vKipcbiAqIGdldCBpdGVtIGVsZW1lbnRzIHRvIGJlIHVzZWQgaW4gbGF5b3V0XG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGl0ZW0gZWxlbWVudHNcbiAqL1xucHJvdG8uX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuaXRlbVNlbGVjdG9yICk7XG59O1xuXG4vKipcbiAqIGdldHRlciBtZXRob2QgZm9yIGdldHRpbmcgaXRlbSBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICovXG5wcm90by5nZXRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuaXRlbXMubWFwKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICByZXR1cm4gaXRlbS5lbGVtZW50O1xuICB9KTtcbn07XG5cbi8vIC0tLS0tIGluaXQgJiBsYXlvdXQgLS0tLS0gLy9cblxuLyoqXG4gKiBsYXlzIG91dCBhbGwgaXRlbXNcbiAqL1xucHJvdG8ubGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xuXG4gIC8vIGRvbid0IGFuaW1hdGUgZmlyc3QgbGF5b3V0XG4gIHZhciBsYXlvdXRJbnN0YW50ID0gdGhpcy5fZ2V0T3B0aW9uKCdsYXlvdXRJbnN0YW50Jyk7XG4gIHZhciBpc0luc3RhbnQgPSBsYXlvdXRJbnN0YW50ICE9PSB1bmRlZmluZWQgP1xuICAgIGxheW91dEluc3RhbnQgOiAhdGhpcy5faXNMYXlvdXRJbml0ZWQ7XG4gIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuaXRlbXMsIGlzSW5zdGFudCApO1xuXG4gIC8vIGZsYWcgZm9yIGluaXRhbGl6ZWRcbiAgdGhpcy5faXNMYXlvdXRJbml0ZWQgPSB0cnVlO1xufTtcblxuLy8gX2luaXQgaXMgYWxpYXMgZm9yIGxheW91dFxucHJvdG8uX2luaXQgPSBwcm90by5sYXlvdXQ7XG5cbi8qKlxuICogbG9naWMgYmVmb3JlIGFueSBuZXcgbGF5b3V0XG4gKi9cbnByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmdldFNpemUoKTtcbn07XG5cblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbi8qKlxuICogZ2V0IG1lYXN1cmVtZW50IGZyb20gb3B0aW9uLCBmb3IgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgZ3V0dGVyXG4gKiBpZiBvcHRpb24gaXMgU3RyaW5nIC0+IGdldCBlbGVtZW50IGZyb20gc2VsZWN0b3Igc3RyaW5nLCAmIGdldCBzaXplIG9mIGVsZW1lbnRcbiAqIGlmIG9wdGlvbiBpcyBFbGVtZW50IC0+IGdldCBzaXplIG9mIGVsZW1lbnRcbiAqIGVsc2UgdXNlIG9wdGlvbiBhcyBhIG51bWJlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZWFzdXJlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSB3aWR0aCBvciBoZWlnaHRcbiAqIEBwcml2YXRlXG4gKi9cbnByb3RvLl9nZXRNZWFzdXJlbWVudCA9IGZ1bmN0aW9uKCBtZWFzdXJlbWVudCwgc2l6ZSApIHtcbiAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9uc1sgbWVhc3VyZW1lbnQgXTtcbiAgdmFyIGVsZW07XG4gIGlmICggIW9wdGlvbiApIHtcbiAgICAvLyBkZWZhdWx0IHRvIDBcbiAgICB0aGlzWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2Ugb3B0aW9uIGFzIGFuIGVsZW1lbnRcbiAgICBpZiAoIHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgKSB7XG4gICAgICBlbGVtID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoIG9wdGlvbiApO1xuICAgIH0gZWxzZSBpZiAoIG9wdGlvbiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICkge1xuICAgICAgZWxlbSA9IG9wdGlvbjtcbiAgICB9XG4gICAgLy8gdXNlIHNpemUgb2YgZWxlbWVudCwgaWYgZWxlbWVudFxuICAgIHRoaXNbIG1lYXN1cmVtZW50IF0gPSBlbGVtID8gZ2V0U2l6ZSggZWxlbSApWyBzaXplIF0gOiBvcHRpb247XG4gIH1cbn07XG5cbi8qKlxuICogbGF5b3V0IGEgY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5wcm90by5sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xuICBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zRm9yTGF5b3V0KCBpdGVtcyApO1xuXG4gIHRoaXMuX2xheW91dEl0ZW1zKCBpdGVtcywgaXNJbnN0YW50ICk7XG5cbiAgdGhpcy5fcG9zdExheW91dCgpO1xufTtcblxuLyoqXG4gKiBnZXQgdGhlIGl0ZW1zIHRvIGJlIGxhaWQgb3V0XG4gKiB5b3UgbWF5IHdhbnQgdG8gc2tpcCBvdmVyIHNvbWUgaXRlbXNcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zXG4gKi9cbnByb3RvLl9nZXRJdGVtc0ZvckxheW91dCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgcmV0dXJuIGl0ZW1zLmZpbHRlciggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgcmV0dXJuICFpdGVtLmlzSWdub3JlZDtcbiAgfSk7XG59O1xuXG4vKipcbiAqIGxheW91dCBpdGVtc1xuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50XG4gKi9cbnByb3RvLl9sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAnbGF5b3V0JywgaXRlbXMgKTtcblxuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xuICAgIC8vIG5vIGl0ZW1zLCBlbWl0IGV2ZW50IHdpdGggZW1wdHkgYXJyYXlcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcXVldWUgPSBbXTtcblxuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICAvLyBnZXQgeC95IG9iamVjdCBmcm9tIG1ldGhvZFxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiggaXRlbSApO1xuICAgIC8vIGVucXVldWVcbiAgICBwb3NpdGlvbi5pdGVtID0gaXRlbTtcbiAgICBwb3NpdGlvbi5pc0luc3RhbnQgPSBpc0luc3RhbnQgfHwgaXRlbS5pc0xheW91dEluc3RhbnQ7XG4gICAgcXVldWUucHVzaCggcG9zaXRpb24gKTtcbiAgfSwgdGhpcyApO1xuXG4gIHRoaXMuX3Byb2Nlc3NMYXlvdXRRdWV1ZSggcXVldWUgKTtcbn07XG5cbi8qKlxuICogZ2V0IGl0ZW0gbGF5b3V0IHBvc2l0aW9uXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cbiAqIEByZXR1cm5zIHtPYmplY3R9IHggYW5kIHkgcG9zaXRpb25cbiAqL1xucHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCAvKiBpdGVtICovICkge1xuICByZXR1cm4ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xufTtcblxuLyoqXG4gKiBpdGVyYXRlIG92ZXIgYXJyYXkgYW5kIHBvc2l0aW9uIGVhY2ggaXRlbVxuICogUmVhc29uIGJlaW5nIC0gc2VwYXJhdGluZyB0aGlzIGxvZ2ljIHByZXZlbnRzICdsYXlvdXQgaW52YWxpZGF0aW9uJ1xuICogdGh4IEBwYXVsX2lyaXNoXG4gKiBAcGFyYW0ge0FycmF5fSBxdWV1ZVxuICovXG5wcm90by5fcHJvY2Vzc0xheW91dFF1ZXVlID0gZnVuY3Rpb24oIHF1ZXVlICkge1xuICB0aGlzLnVwZGF0ZVN0YWdnZXIoKTtcbiAgcXVldWUuZm9yRWFjaCggZnVuY3Rpb24oIG9iaiwgaSApIHtcbiAgICB0aGlzLl9wb3NpdGlvbkl0ZW0oIG9iai5pdGVtLCBvYmoueCwgb2JqLnksIG9iai5pc0luc3RhbnQsIGkgKTtcbiAgfSwgdGhpcyApO1xufTtcblxuLy8gc2V0IHN0YWdnZXIgZnJvbSBvcHRpb24gaW4gbWlsbGlzZWNvbmRzIG51bWJlclxucHJvdG8udXBkYXRlU3RhZ2dlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhZ2dlciA9IHRoaXMub3B0aW9ucy5zdGFnZ2VyO1xuICBpZiAoIHN0YWdnZXIgPT09IG51bGwgfHwgc3RhZ2dlciA9PT0gdW5kZWZpbmVkICkge1xuICAgIHRoaXMuc3RhZ2dlciA9IDA7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuc3RhZ2dlciA9IGdldE1pbGxpc2Vjb25kcyggc3RhZ2dlciApO1xuICByZXR1cm4gdGhpcy5zdGFnZ2VyO1xufTtcblxuLyoqXG4gKiBTZXRzIHBvc2l0aW9uIG9mIGl0ZW0gaW4gRE9NXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IC0gaG9yaXpvbnRhbCBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHkgLSB2ZXJ0aWNhbCBwb3NpdGlvblxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyB0cmFuc2l0aW9uc1xuICovXG5wcm90by5fcG9zaXRpb25JdGVtID0gZnVuY3Rpb24oIGl0ZW0sIHgsIHksIGlzSW5zdGFudCwgaSApIHtcbiAgaWYgKCBpc0luc3RhbnQgKSB7XG4gICAgLy8gaWYgbm90IHRyYW5zaXRpb24sIGp1c3Qgc2V0IENTU1xuICAgIGl0ZW0uZ29UbyggeCwgeSApO1xuICB9IGVsc2Uge1xuICAgIGl0ZW0uc3RhZ2dlciggaSAqIHRoaXMuc3RhZ2dlciApO1xuICAgIGl0ZW0ubW92ZVRvKCB4LCB5ICk7XG4gIH1cbn07XG5cbi8qKlxuICogQW55IGxvZ2ljIHlvdSB3YW50IHRvIGRvIGFmdGVyIGVhY2ggbGF5b3V0LFxuICogaS5lLiBzaXplIHRoZSBjb250YWluZXJcbiAqL1xucHJvdG8uX3Bvc3RMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZXNpemVDb250YWluZXIoKTtcbn07XG5cbnByb3RvLnJlc2l6ZUNvbnRhaW5lciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXNSZXNpemluZ0NvbnRhaW5lciA9IHRoaXMuX2dldE9wdGlvbigncmVzaXplQ29udGFpbmVyJyk7XG4gIGlmICggIWlzUmVzaXppbmdDb250YWluZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBzaXplID0gdGhpcy5fZ2V0Q29udGFpbmVyU2l6ZSgpO1xuICBpZiAoIHNpemUgKSB7XG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS53aWR0aCwgdHJ1ZSApO1xuICAgIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoIHNpemUuaGVpZ2h0LCBmYWxzZSApO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHMgd2lkdGggb3IgaGVpZ2h0IG9mIGNvbnRhaW5lciBpZiByZXR1cm5lZFxuICogQHJldHVybnMge09iamVjdH0gc2l6ZVxuICogICBAcGFyYW0ge051bWJlcn0gd2lkdGhcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICovXG5wcm90by5fZ2V0Q29udGFpbmVyU2l6ZSA9IG5vb3A7XG5cbi8qKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1lYXN1cmUgLSBzaXplIG9mIHdpZHRoIG9yIGhlaWdodFxuICogQHBhcmFtIHtCb29sZWFufSBpc1dpZHRoXG4gKi9cbnByb3RvLl9zZXRDb250YWluZXJNZWFzdXJlID0gZnVuY3Rpb24oIG1lYXN1cmUsIGlzV2lkdGggKSB7XG4gIGlmICggbWVhc3VyZSA9PT0gdW5kZWZpbmVkICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlbGVtU2l6ZSA9IHRoaXMuc2l6ZTtcbiAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB3aWR0aCBpZiBib3JkZXIgYm94XG4gIGlmICggZWxlbVNpemUuaXNCb3JkZXJCb3ggKSB7XG4gICAgbWVhc3VyZSArPSBpc1dpZHRoID8gZWxlbVNpemUucGFkZGluZ0xlZnQgKyBlbGVtU2l6ZS5wYWRkaW5nUmlnaHQgK1xuICAgICAgZWxlbVNpemUuYm9yZGVyTGVmdFdpZHRoICsgZWxlbVNpemUuYm9yZGVyUmlnaHRXaWR0aCA6XG4gICAgICBlbGVtU2l6ZS5wYWRkaW5nQm90dG9tICsgZWxlbVNpemUucGFkZGluZ1RvcCArXG4gICAgICBlbGVtU2l6ZS5ib3JkZXJUb3BXaWR0aCArIGVsZW1TaXplLmJvcmRlckJvdHRvbVdpZHRoO1xuICB9XG5cbiAgbWVhc3VyZSA9IE1hdGgubWF4KCBtZWFzdXJlLCAwICk7XG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgaXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0JyBdID0gbWVhc3VyZSArICdweCc7XG59O1xuXG4vKipcbiAqIGVtaXQgZXZlbnRDb21wbGV0ZSBvbiBhIGNvbGxlY3Rpb24gb2YgaXRlbXMgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtcyAtIE91dGxheWVyLkl0ZW1zXG4gKi9cbnByb3RvLl9lbWl0Q29tcGxldGVPbkl0ZW1zID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgaXRlbXMgKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgX3RoaXMuZGlzcGF0Y2hFdmVudCggZXZlbnROYW1lICsgJ0NvbXBsZXRlJywgbnVsbCwgWyBpdGVtcyBdICk7XG4gIH1cblxuICB2YXIgY291bnQgPSBpdGVtcy5sZW5ndGg7XG4gIGlmICggIWl0ZW1zIHx8ICFjb3VudCApIHtcbiAgICBvbkNvbXBsZXRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRvbmVDb3VudCA9IDA7XG4gIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgZG9uZUNvdW50Kys7XG4gICAgaWYgKCBkb25lQ291bnQgPT0gY291bnQgKSB7XG4gICAgICBvbkNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gYmluZCBjYWxsYmFja1xuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICBpdGVtLm9uY2UoIGV2ZW50TmFtZSwgdGljayApO1xuICB9KTtcbn07XG5cbi8qKlxuICogZW1pdHMgZXZlbnRzIHZpYSBFdkVtaXR0ZXIgYW5kIGpRdWVyeSBldmVudHNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gbmFtZSBvZiBldmVudFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBvcmlnaW5hbCBldmVudFxuICogQHBhcmFtIHtBcnJheX0gYXJncyAtIGV4dHJhIGFyZ3VtZW50c1xuICovXG5wcm90by5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBhcmdzICkge1xuICAvLyBhZGQgb3JpZ2luYWwgZXZlbnQgdG8gYXJndW1lbnRzXG4gIHZhciBlbWl0QXJncyA9IGV2ZW50ID8gWyBldmVudCBdLmNvbmNhdCggYXJncyApIDogYXJncztcbiAgdGhpcy5lbWl0RXZlbnQoIHR5cGUsIGVtaXRBcmdzICk7XG5cbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgLy8gc2V0IHRoaXMuJGVsZW1lbnRcbiAgICB0aGlzLiRlbGVtZW50ID0gdGhpcy4kZWxlbWVudCB8fCBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xuICAgIGlmICggZXZlbnQgKSB7XG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XG4gICAgICB2YXIgJGV2ZW50ID0galF1ZXJ5LkV2ZW50KCBldmVudCApO1xuICAgICAgJGV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8ganVzdCB0cmlnZ2VyIHdpdGggdHlwZSBpZiBubyBldmVudCBhdmFpbGFibGVcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggdHlwZSwgYXJncyApO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaWdub3JlICYgc3RhbXBzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblxuLyoqXG4gKiBrZWVwIGl0ZW0gaW4gY29sbGVjdGlvbiwgYnV0IGRvIG5vdCBsYXkgaXQgb3V0XG4gKiBpZ25vcmVkIGl0ZW1zIGRvIG5vdCBnZXQgc2tpcHBlZCBpbiBsYXlvdXRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICovXG5wcm90by5pZ25vcmUgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcbiAgaWYgKCBpdGVtICkge1xuICAgIGl0ZW0uaXNJZ25vcmVkID0gdHJ1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiByZXR1cm4gaXRlbSB0byBsYXlvdXQgY29sbGVjdGlvblxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKi9cbnByb3RvLnVuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XG4gIGlmICggaXRlbSApIHtcbiAgICBkZWxldGUgaXRlbS5pc0lnbm9yZWQ7XG4gIH1cbn07XG5cbi8qKlxuICogYWRkcyBlbGVtZW50cyB0byBzdGFtcHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXG4gKi9cbnByb3RvLnN0YW1wID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XG4gIGlmICggIWVsZW1zICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhbXBzID0gdGhpcy5zdGFtcHMuY29uY2F0KCBlbGVtcyApO1xuICAvLyBpZ25vcmVcbiAgZWxlbXMuZm9yRWFjaCggdGhpcy5pZ25vcmUsIHRoaXMgKTtcbn07XG5cbi8qKlxuICogcmVtb3ZlcyBlbGVtZW50cyB0byBzdGFtcHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBvciBFbGVtZW50fSBlbGVtc1xuICovXG5wcm90by51bnN0YW1wID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XG4gIGlmICggIWVsZW1zICl7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgLy8gZmlsdGVyIG91dCByZW1vdmVkIHN0YW1wIGVsZW1lbnRzXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5zdGFtcHMsIGVsZW0gKTtcbiAgICB0aGlzLnVuaWdub3JlKCBlbGVtICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cbi8qKlxuICogZmluZHMgY2hpbGQgZWxlbWVudHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGVsZW1zXG4gKi9cbnByb3RvLl9maW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBpZiAoICFlbGVtcyApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gaWYgc3RyaW5nLCB1c2UgYXJndW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW1zID09ICdzdHJpbmcnICkge1xuICAgIGVsZW1zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGVsZW1zICk7XG4gIH1cbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XG4gIHJldHVybiBlbGVtcztcbn07XG5cbnByb3RvLl9tYW5hZ2VTdGFtcHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5zdGFtcHMgfHwgIXRoaXMuc3RhbXBzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9nZXRCb3VuZGluZ1JlY3QoKTtcblxuICB0aGlzLnN0YW1wcy5mb3JFYWNoKCB0aGlzLl9tYW5hZ2VTdGFtcCwgdGhpcyApO1xufTtcblxuLy8gdXBkYXRlIGJvdW5kaW5nTGVmdCAvIFRvcFxucHJvdG8uX2dldEJvdW5kaW5nUmVjdCA9IGZ1bmN0aW9uKCkge1xuICAvLyBnZXQgYm91bmRpbmcgcmVjdCBmb3IgY29udGFpbmVyIGVsZW1lbnRcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gIHRoaXMuX2JvdW5kaW5nUmVjdCA9IHtcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCArIHNpemUucGFkZGluZ0xlZnQgKyBzaXplLmJvcmRlckxlZnRXaWR0aCxcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgKyBzaXplLnBhZGRpbmdUb3AgKyBzaXplLmJvcmRlclRvcFdpZHRoLFxuICAgIHJpZ2h0OiBib3VuZGluZ1JlY3QucmlnaHQgLSAoIHNpemUucGFkZGluZ1JpZ2h0ICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoICksXG4gICAgYm90dG9tOiBib3VuZGluZ1JlY3QuYm90dG9tIC0gKCBzaXplLnBhZGRpbmdCb3R0b20gKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoIClcbiAgfTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBzdGFtcFxuKiovXG5wcm90by5fbWFuYWdlU3RhbXAgPSBub29wO1xuXG4vKipcbiAqIGdldCB4L3kgcG9zaXRpb24gb2YgZWxlbWVudCByZWxhdGl2ZSB0byBjb250YWluZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvZmZzZXQgLSBoYXMgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tXG4gKi9cbnByb3RvLl9nZXRFbGVtZW50T2Zmc2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBib3VuZGluZ1JlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdGhpc1JlY3QgPSB0aGlzLl9ib3VuZGluZ1JlY3Q7XG4gIHZhciBzaXplID0gZ2V0U2l6ZSggZWxlbSApO1xuICB2YXIgb2Zmc2V0ID0ge1xuICAgIGxlZnQ6IGJvdW5kaW5nUmVjdC5sZWZ0IC0gdGhpc1JlY3QubGVmdCAtIHNpemUubWFyZ2luTGVmdCxcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgLSB0aGlzUmVjdC50b3AgLSBzaXplLm1hcmdpblRvcCxcbiAgICByaWdodDogdGhpc1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QucmlnaHQgLSBzaXplLm1hcmdpblJpZ2h0LFxuICAgIGJvdHRvbTogdGhpc1JlY3QuYm90dG9tIC0gYm91bmRpbmdSZWN0LmJvdHRvbSAtIHNpemUubWFyZ2luQm90dG9tXG4gIH07XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSByZXNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZW5hYmxlIGV2ZW50IGhhbmRsZXJzIGZvciBsaXN0ZW5lcnNcbi8vIGkuZS4gcmVzaXplIC0+IG9ucmVzaXplXG5wcm90by5oYW5kbGVFdmVudCA9IHV0aWxzLmhhbmRsZUV2ZW50O1xuXG4vKipcbiAqIEJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xuICovXG5wcm90by5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcyApO1xuICB0aGlzLmlzUmVzaXplQm91bmQgPSB0cnVlO1xufTtcblxuLyoqXG4gKiBVbmJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xuICovXG5wcm90by51bmJpbmRSZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IGZhbHNlO1xufTtcblxucHJvdG8ub25yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZXNpemUoKTtcbn07XG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kKCBPdXRsYXllciwgJ29ucmVzaXplJywgMTAwICk7XG5cbnByb3RvLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcbiAgLy8gb3IgaWYgcmVzaXplIHdhcyB1bmJvdW5kLiBTZWUgIzlcbiAgaWYgKCAhdGhpcy5pc1Jlc2l6ZUJvdW5kIHx8ICF0aGlzLm5lZWRzUmVzaXplTGF5b3V0KCkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5sYXlvdXQoKTtcbn07XG5cbi8qKlxuICogY2hlY2sgaWYgbGF5b3V0IGlzIG5lZWRlZCBwb3N0IGxheW91dFxuICogQHJldHVybnMgQm9vbGVhblxuICovXG5wcm90by5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xuICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcbiAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxuICB2YXIgaGFzU2l6ZXMgPSB0aGlzLnNpemUgJiYgc2l6ZTtcbiAgcmV0dXJuIGhhc1NpemVzICYmIHNpemUuaW5uZXJXaWR0aCAhPT0gdGhpcy5zaXplLmlubmVyV2lkdGg7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogYWRkIGl0ZW1zIHRvIE91dGxheWVyIGluc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcbioqL1xucHJvdG8uYWRkSXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XG4gIC8vIGFkZCBpdGVtcyB0byBjb2xsZWN0aW9uXG4gIGlmICggaXRlbXMubGVuZ3RoICkge1xuICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmNvbmNhdCggaXRlbXMgKTtcbiAgfVxuICByZXR1cm4gaXRlbXM7XG59O1xuXG4vKipcbiAqIExheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXG4gKi9cbnByb3RvLmFwcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGxheW91dCBhbmQgcmV2ZWFsIGp1c3QgdGhlIG5ldyBpdGVtc1xuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcbn07XG5cbi8qKlxuICogTGF5b3V0IHByZXBlbmRlZCBlbGVtZW50c1xuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xuICovXG5wcm90by5wcmVwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XG4gIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gYWRkIGl0ZW1zIHRvIGJlZ2lubmluZyBvZiBjb2xsZWN0aW9uXG4gIHZhciBwcmV2aW91c0l0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgwKTtcbiAgdGhpcy5pdGVtcyA9IGl0ZW1zLmNvbmNhdCggcHJldmlvdXNJdGVtcyApO1xuICAvLyBzdGFydCBuZXcgbGF5b3V0XG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xuICAvLyBsYXlvdXQgbmV3IHN0dWZmIHdpdGhvdXQgdHJhbnNpdGlvblxuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcbiAgLy8gbGF5b3V0IHByZXZpb3VzIGl0ZW1zXG4gIHRoaXMubGF5b3V0SXRlbXMoIHByZXZpb3VzSXRlbXMgKTtcbn07XG5cbi8qKlxuICogcmV2ZWFsIGEgY29sbGVjdGlvbiBvZiBpdGVtc1xuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcbiAqL1xucHJvdG8ucmV2ZWFsID0gZnVuY3Rpb24oIGl0ZW1zICkge1xuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmV2ZWFsJywgaXRlbXMgKTtcbiAgaWYgKCAhaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHN0YWdnZXIgPSB0aGlzLnVwZGF0ZVN0YWdnZXIoKTtcbiAgaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0sIGkgKSB7XG4gICAgaXRlbS5zdGFnZ2VyKCBpICogc3RhZ2dlciApO1xuICAgIGl0ZW0ucmV2ZWFsKCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBoaWRlIGEgY29sbGVjdGlvbiBvZiBpdGVtc1xuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcbiAqL1xucHJvdG8uaGlkZSA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ2hpZGUnLCBpdGVtcyApO1xuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgc3RhZ2dlciA9IHRoaXMudXBkYXRlU3RhZ2dlcigpO1xuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSwgaSApIHtcbiAgICBpdGVtLnN0YWdnZXIoIGkgKiBzdGFnZ2VyICk7XG4gICAgaXRlbS5oaWRlKCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiByZXZlYWwgaXRlbSBlbGVtZW50c1xuICogQHBhcmFtIHtBcnJheX0sIHtFbGVtZW50fSwge05vZGVMaXN0fSBpdGVtc1xuICovXG5wcm90by5yZXZlYWxJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoIGVsZW1zICk7XG4gIHRoaXMucmV2ZWFsKCBpdGVtcyApO1xufTtcblxuLyoqXG4gKiBoaWRlIGl0ZW0gZWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXl9LCB7RWxlbWVudH0sIHtOb2RlTGlzdH0gaXRlbXNcbiAqL1xucHJvdG8uaGlkZUl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcbiAgdGhpcy5oaWRlKCBpdGVtcyApO1xufTtcblxuLyoqXG4gKiBnZXQgT3V0bGF5ZXIuSXRlbSwgZ2l2ZW4gYW4gRWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge091dGxheWVyLkl0ZW19IGl0ZW1cbiAqL1xucHJvdG8uZ2V0SXRlbSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBsb29wIHRocm91Z2ggaXRlbXMgdG8gZ2V0IHRoZSBvbmUgdGhhdCBtYXRjaGVzXG4gIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcbiAgICBpZiAoIGl0ZW0uZWxlbWVudCA9PSBlbGVtICkge1xuICAgICAgLy8gcmV0dXJuIGl0ZW1cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgY29sbGVjdGlvbiBvZiBPdXRsYXllci5JdGVtcywgZ2l2ZW4gRWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXl9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcbiAqL1xucHJvdG8uZ2V0SXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcbiAgICBpZiAoIGl0ZW0gKSB7XG4gICAgICBpdGVtcy5wdXNoKCBpdGVtICk7XG4gICAgfVxuICB9LCB0aGlzICk7XG5cbiAgcmV0dXJuIGl0ZW1zO1xufTtcblxuLyoqXG4gKiByZW1vdmUgZWxlbWVudChzKSBmcm9tIGluc3RhbmNlIGFuZCBET01cbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcbiAqL1xucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xuXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdyZW1vdmUnLCByZW1vdmVJdGVtcyApO1xuXG4gIC8vIGJhaWwgaWYgbm8gaXRlbXMgdG8gcmVtb3ZlXG4gIGlmICggIXJlbW92ZUl0ZW1zIHx8ICFyZW1vdmVJdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmVtb3ZlSXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgaXRlbS5yZW1vdmUoKTtcbiAgICAvLyByZW1vdmUgaXRlbSBmcm9tIGNvbGxlY3Rpb25cbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLml0ZW1zLCBpdGVtICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tIGRlc3Ryb3kgLS0tLS0gLy9cblxuLy8gcmVtb3ZlIGFuZCBkaXNhYmxlIE91dGxheWVyIGluc3RhbmNlXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNsZWFuIHVwIGR5bmFtaWMgc3R5bGVzXG4gIHZhciBzdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcbiAgc3R5bGUuaGVpZ2h0ID0gJyc7XG4gIHN0eWxlLnBvc2l0aW9uID0gJyc7XG4gIHN0eWxlLndpZHRoID0gJyc7XG4gIC8vIGRlc3Ryb3kgaXRlbXNcbiAgdGhpcy5pdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICBpdGVtLmRlc3Ryb3koKTtcbiAgfSk7XG5cbiAgdGhpcy51bmJpbmRSZXNpemUoKTtcblxuICB2YXIgaWQgPSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xuICBkZWxldGUgaW5zdGFuY2VzWyBpZCBdOyAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIGluc3RhbmNlIGJ5IGlkXG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xuICAvLyByZW1vdmUgZGF0YSBmb3IgalF1ZXJ5XG4gIGlmICggalF1ZXJ5ICkge1xuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICk7XG4gIH1cblxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGdldCBPdXRsYXllciBpbnN0YW5jZSBmcm9tIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICogQHJldHVybnMge091dGxheWVyfVxuICovXG5PdXRsYXllci5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLm91dGxheWVyR1VJRDtcbiAgcmV0dXJuIGlkICYmIGluc3RhbmNlc1sgaWQgXTtcbn07XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gY3JlYXRlIE91dGxheWVyIGNsYXNzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogY3JlYXRlIGEgbGF5b3V0IGNsYXNzXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKi9cbk91dGxheWVyLmNyZWF0ZSA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UsIG9wdGlvbnMgKSB7XG4gIC8vIHN1Yi1jbGFzcyBPdXRsYXllclxuICB2YXIgTGF5b3V0ID0gc3ViY2xhc3MoIE91dGxheWVyICk7XG4gIC8vIGFwcGx5IG5ldyBvcHRpb25zIGFuZCBjb21wYXRPcHRpb25zXG4gIExheW91dC5kZWZhdWx0cyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmRlZmF1bHRzICk7XG4gIHV0aWxzLmV4dGVuZCggTGF5b3V0LmRlZmF1bHRzLCBvcHRpb25zICk7XG4gIExheW91dC5jb21wYXRPcHRpb25zID0gdXRpbHMuZXh0ZW5kKCB7fSwgT3V0bGF5ZXIuY29tcGF0T3B0aW9ucyAgKTtcblxuICBMYXlvdXQubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXG4gIExheW91dC5kYXRhID0gT3V0bGF5ZXIuZGF0YTtcblxuICAvLyBzdWItY2xhc3MgSXRlbVxuICBMYXlvdXQuSXRlbSA9IHN1YmNsYXNzKCBJdGVtICk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVjbGFyYXRpdmUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICB1dGlscy5odG1sSW5pdCggTGF5b3V0LCBuYW1lc3BhY2UgKTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBqUXVlcnkgYnJpZGdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gbWFrZSBpbnRvIGpRdWVyeSBwbHVnaW5cbiAgaWYgKCBqUXVlcnkgJiYgalF1ZXJ5LmJyaWRnZXQgKSB7XG4gICAgalF1ZXJ5LmJyaWRnZXQoIG5hbWVzcGFjZSwgTGF5b3V0ICk7XG4gIH1cblxuICByZXR1cm4gTGF5b3V0O1xufTtcblxuZnVuY3Rpb24gc3ViY2xhc3MoIFBhcmVudCApIHtcbiAgZnVuY3Rpb24gU3ViQ2xhc3MoKSB7XG4gICAgUGFyZW50LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgfVxuXG4gIFN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBhcmVudC5wcm90b3R5cGUgKTtcbiAgU3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViQ2xhc3M7XG5cbiAgcmV0dXJuIFN1YkNsYXNzO1xufVxuXG4vLyAtLS0tLSBoZWxwZXJzIC0tLS0tIC8vXG5cbi8vIGhvdyBtYW55IG1pbGxpc2Vjb25kcyBhcmUgaW4gZWFjaCB1bml0XG52YXIgbXNVbml0cyA9IHtcbiAgbXM6IDEsXG4gIHM6IDEwMDBcbn07XG5cbi8vIG11bmdlIHRpbWUtbGlrZSBwYXJhbWV0ZXIgaW50byBtaWxsaXNlY29uZCBudW1iZXJcbi8vICcwLjRzJyAtPiA0MFxuZnVuY3Rpb24gZ2V0TWlsbGlzZWNvbmRzKCB0aW1lICkge1xuICBpZiAoIHR5cGVvZiB0aW1lID09ICdudW1iZXInICkge1xuICAgIHJldHVybiB0aW1lO1xuICB9XG4gIHZhciBtYXRjaGVzID0gdGltZS5tYXRjaCggLyheXFxkKlxcLj9cXGQqKShcXHcqKS8gKTtcbiAgdmFyIG51bSA9IG1hdGNoZXMgJiYgbWF0Y2hlc1sxXTtcbiAgdmFyIHVuaXQgPSBtYXRjaGVzICYmIG1hdGNoZXNbMl07XG4gIGlmICggIW51bS5sZW5ndGggKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgbnVtID0gcGFyc2VGbG9hdCggbnVtICk7XG4gIHZhciBtdWx0ID0gbXNVbml0c1sgdW5pdCBdIHx8IDE7XG4gIHJldHVybiBudW0gKiBtdWx0O1xufVxuXG4vLyAtLS0tLSBmaW4gLS0tLS0gLy9cblxuLy8gYmFjayBpbiBnbG9iYWxcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xuXG5yZXR1cm4gT3V0bGF5ZXI7XG5cbn0pKTtcblxuLyoqXG4gKiBJc290b3BlIEl0ZW1cbioqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdpc290b3BlLWxheW91dC9qcy9pdGVtJyxbXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcidcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5Jc290b3BlID0gd2luZG93Lklzb3RvcGUgfHwge307XG4gICAgd2luZG93Lklzb3RvcGUuSXRlbSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3cuT3V0bGF5ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggT3V0bGF5ZXIgKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEl0ZW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gc3ViLWNsYXNzIE91dGxheWVyIEl0ZW1cbmZ1bmN0aW9uIEl0ZW0oKSB7XG4gIE91dGxheWVyLkl0ZW0uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xufVxuXG52YXIgcHJvdG8gPSBJdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE91dGxheWVyLkl0ZW0ucHJvdG90eXBlICk7XG5cbnZhciBfY3JlYXRlID0gcHJvdG8uX2NyZWF0ZTtcbnByb3RvLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gYXNzaWduIGlkLCB1c2VkIGZvciBvcmlnaW5hbC1vcmRlciBzb3J0aW5nXG4gIHRoaXMuaWQgPSB0aGlzLmxheW91dC5pdGVtR1VJRCsrO1xuICBfY3JlYXRlLmNhbGwoIHRoaXMgKTtcbiAgdGhpcy5zb3J0RGF0YSA9IHt9O1xufTtcblxucHJvdG8udXBkYXRlU29ydERhdGEgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLmlzSWdub3JlZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZGVmYXVsdCBzb3J0ZXJzXG4gIHRoaXMuc29ydERhdGEuaWQgPSB0aGlzLmlkO1xuICAvLyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICB0aGlzLnNvcnREYXRhWydvcmlnaW5hbC1vcmRlciddID0gdGhpcy5pZDtcbiAgdGhpcy5zb3J0RGF0YS5yYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBnbyB0aHJ1IGdldFNvcnREYXRhIG9iaiBhbmQgYXBwbHkgdGhlIHNvcnRlcnNcbiAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5sYXlvdXQub3B0aW9ucy5nZXRTb3J0RGF0YTtcbiAgdmFyIHNvcnRlcnMgPSB0aGlzLmxheW91dC5fc29ydGVycztcbiAgZm9yICggdmFyIGtleSBpbiBnZXRTb3J0RGF0YSApIHtcbiAgICB2YXIgc29ydGVyID0gc29ydGVyc1sga2V5IF07XG4gICAgdGhpcy5zb3J0RGF0YVsga2V5IF0gPSBzb3J0ZXIoIHRoaXMuZWxlbWVudCwgdGhpcyApO1xuICB9XG59O1xuXG52YXIgX2Rlc3Ryb3kgPSBwcm90by5kZXN0cm95O1xucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjYWxsIHN1cGVyXG4gIF9kZXN0cm95LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgLy8gcmVzZXQgZGlzcGxheSwgIzc0MVxuICB0aGlzLmNzcyh7XG4gICAgZGlzcGxheTogJydcbiAgfSk7XG59O1xuXG5yZXR1cm4gSXRlbTtcblxufSkpO1xuXG4vKipcbiAqIElzb3RvcGUgTGF5b3V0TW9kZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlJyxbXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcidcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuSXNvdG9wZSA9IHdpbmRvdy5Jc290b3BlIHx8IHt9O1xuICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGUgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LmdldFNpemUsXG4gICAgICB3aW5kb3cuT3V0bGF5ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggZ2V0U2l6ZSwgT3V0bGF5ZXIgKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBsYXlvdXQgbW9kZSBjbGFzc1xuICBmdW5jdGlvbiBMYXlvdXRNb2RlKCBpc290b3BlICkge1xuICAgIHRoaXMuaXNvdG9wZSA9IGlzb3RvcGU7XG4gICAgLy8gbGluayBwcm9wZXJ0aWVzXG4gICAgaWYgKCBpc290b3BlICkge1xuICAgICAgdGhpcy5vcHRpb25zID0gaXNvdG9wZS5vcHRpb25zWyB0aGlzLm5hbWVzcGFjZSBdO1xuICAgICAgdGhpcy5lbGVtZW50ID0gaXNvdG9wZS5lbGVtZW50O1xuICAgICAgdGhpcy5pdGVtcyA9IGlzb3RvcGUuZmlsdGVyZWRJdGVtcztcbiAgICAgIHRoaXMuc2l6ZSA9IGlzb3RvcGUuc2l6ZTtcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBMYXlvdXRNb2RlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogc29tZSBtZXRob2RzIHNob3VsZCBqdXN0IGRlZmVyIHRvIGRlZmF1bHQgT3V0bGF5ZXIgbWV0aG9kXG4gICAqIGFuZCByZWZlcmVuY2UgdGhlIElzb3RvcGUgaW5zdGFuY2UgYXMgYHRoaXNgXG4gICoqL1xuICB2YXIgZmFjYWRlTWV0aG9kcyA9IFtcbiAgICAnX3Jlc2V0TGF5b3V0JyxcbiAgICAnX2dldEl0ZW1MYXlvdXRQb3NpdGlvbicsXG4gICAgJ19tYW5hZ2VTdGFtcCcsXG4gICAgJ19nZXRDb250YWluZXJTaXplJyxcbiAgICAnX2dldEVsZW1lbnRPZmZzZXQnLFxuICAgICduZWVkc1Jlc2l6ZUxheW91dCcsXG4gICAgJ19nZXRPcHRpb24nXG4gIF07XG5cbiAgZmFjYWRlTWV0aG9kcy5mb3JFYWNoKCBmdW5jdGlvbiggbWV0aG9kTmFtZSApIHtcbiAgICBwcm90b1sgbWV0aG9kTmFtZSBdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT3V0bGF5ZXIucHJvdG90eXBlWyBtZXRob2ROYW1lIF0uYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gLS0tLS0gIC0tLS0tIC8vXG5cbiAgLy8gZm9yIGhvcml6b250YWwgbGF5b3V0IG1vZGVzLCBjaGVjayB2ZXJ0aWNhbCBzaXplXG4gIHByb3RvLm5lZWRzVmVydGljYWxSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcbiAgICB2YXIgc2l6ZSA9IGdldFNpemUoIHRoaXMuaXNvdG9wZS5lbGVtZW50ICk7XG4gICAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXG4gICAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxuICAgIHZhciBoYXNTaXplcyA9IHRoaXMuaXNvdG9wZS5zaXplICYmIHNpemU7XG4gICAgcmV0dXJuIGhhc1NpemVzICYmIHNpemUuaW5uZXJIZWlnaHQgIT0gdGhpcy5pc290b3BlLnNpemUuaW5uZXJIZWlnaHQ7XG4gIH07XG5cbiAgLy8gLS0tLS0gbWVhc3VyZW1lbnRzIC0tLS0tIC8vXG5cbiAgcHJvdG8uX2dldE1lYXN1cmVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc290b3BlLl9nZXRNZWFzdXJlbWVudC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gIH07XG5cbiAgcHJvdG8uZ2V0Q29sdW1uV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmdldFNlZ21lbnRTaXplKCAnY29sdW1uJywgJ1dpZHRoJyApO1xuICB9O1xuXG4gIHByb3RvLmdldFJvd0hlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2V0U2VnbWVudFNpemUoICdyb3cnLCAnSGVpZ2h0JyApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBnZXQgY29sdW1uV2lkdGggb3Igcm93SGVpZ2h0XG4gICAqIHNlZ21lbnQ6ICdjb2x1bW4nIG9yICdyb3cnXG4gICAqIHNpemUgJ1dpZHRoJyBvciAnSGVpZ2h0J1xuICAqKi9cbiAgcHJvdG8uZ2V0U2VnbWVudFNpemUgPSBmdW5jdGlvbiggc2VnbWVudCwgc2l6ZSApIHtcbiAgICB2YXIgc2VnbWVudE5hbWUgPSBzZWdtZW50ICsgc2l6ZTtcbiAgICB2YXIgb3V0ZXJTaXplID0gJ291dGVyJyArIHNpemU7XG4gICAgLy8gY29sdW1uV2lkdGggLyBvdXRlcldpZHRoIC8vIHJvd0hlaWdodCAvIG91dGVySGVpZ2h0XG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoIHNlZ21lbnROYW1lLCBvdXRlclNpemUgKTtcbiAgICAvLyBnb3Qgcm93SGVpZ2h0IG9yIGNvbHVtbldpZHRoLCB3ZSBjYW4gY2hpbGxcbiAgICBpZiAoIHRoaXNbIHNlZ21lbnROYW1lIF0gKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZhbGwgYmFjayB0byBpdGVtIG9mIGZpcnN0IGVsZW1lbnRcbiAgICB2YXIgZmlyc3RJdGVtU2l6ZSA9IHRoaXMuZ2V0Rmlyc3RJdGVtU2l6ZSgpO1xuICAgIHRoaXNbIHNlZ21lbnROYW1lIF0gPSBmaXJzdEl0ZW1TaXplICYmIGZpcnN0SXRlbVNpemVbIG91dGVyU2l6ZSBdIHx8XG4gICAgICAvLyBvciBzaXplIG9mIGNvbnRhaW5lclxuICAgICAgdGhpcy5pc290b3BlLnNpemVbICdpbm5lcicgKyBzaXplIF07XG4gIH07XG5cbiAgcHJvdG8uZ2V0Rmlyc3RJdGVtU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmaXJzdEl0ZW0gPSB0aGlzLmlzb3RvcGUuZmlsdGVyZWRJdGVtc1swXTtcbiAgICByZXR1cm4gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50ICYmIGdldFNpemUoIGZpcnN0SXRlbS5lbGVtZW50ICk7XG4gIH07XG5cbiAgLy8gLS0tLS0gbWV0aG9kcyB0aGF0IHNob3VsZCByZWZlcmVuY2UgaXNvdG9wZSAtLS0tLSAvL1xuXG4gIHByb3RvLmxheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNvdG9wZS5sYXlvdXQuYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XG4gIH07XG5cbiAgcHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNvdG9wZS5nZXRTaXplKCk7XG4gICAgdGhpcy5zaXplID0gdGhpcy5pc290b3BlLnNpemU7XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gY3JlYXRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgTGF5b3V0TW9kZS5tb2RlcyA9IHt9O1xuXG4gIExheW91dE1vZGUuY3JlYXRlID0gZnVuY3Rpb24oIG5hbWVzcGFjZSwgb3B0aW9ucyApIHtcblxuICAgIGZ1bmN0aW9uIE1vZGUoKSB7XG4gICAgICBMYXlvdXRNb2RlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICB9XG5cbiAgICBNb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIHByb3RvICk7XG4gICAgTW9kZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNb2RlO1xuXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgaWYgKCBvcHRpb25zICkge1xuICAgICAgTW9kZS5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBNb2RlLnByb3RvdHlwZS5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgLy8gcmVnaXN0ZXIgaW4gSXNvdG9wZVxuICAgIExheW91dE1vZGUubW9kZXNbIG5hbWVzcGFjZSBdID0gTW9kZTtcblxuICAgIHJldHVybiBNb2RlO1xuICB9O1xuXG4gIHJldHVybiBMYXlvdXRNb2RlO1xuXG59KSk7XG5cbi8qIVxuICogTWFzb25yeSB2NC4yLjFcbiAqIENhc2NhZGluZyBncmlkIGxheW91dCBsaWJyYXJ5XG4gKiBodHRwczovL21hc29ucnkuZGVzYW5kcm8uY29tXG4gKiBNSVQgTGljZW5zZVxuICogYnkgRGF2aWQgRGVTYW5kcm9cbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdtYXNvbnJ5LWxheW91dC9tYXNvbnJ5JyxbXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcicsXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuTWFzb25yeSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXG4gICAgICB3aW5kb3cuZ2V0U2l6ZVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBPdXRsYXllciwgZ2V0U2l6ZSApIHtcblxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xuICB2YXIgTWFzb25yeSA9IE91dGxheWVyLmNyZWF0ZSgnbWFzb25yeScpO1xuICAvLyBpc0ZpdFdpZHRoIC0+IGZpdFdpZHRoXG4gIE1hc29ucnkuY29tcGF0T3B0aW9ucy5maXRXaWR0aCA9ICdpc0ZpdFdpZHRoJztcblxuICB2YXIgcHJvdG8gPSBNYXNvbnJ5LnByb3RvdHlwZTtcblxuICBwcm90by5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmdldFNpemUoKTtcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggJ2NvbHVtbldpZHRoJywgJ291dGVyV2lkdGgnICk7XG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoICdndXR0ZXInLCAnb3V0ZXJXaWR0aCcgKTtcbiAgICB0aGlzLm1lYXN1cmVDb2x1bW5zKCk7XG5cbiAgICAvLyByZXNldCBjb2x1bW4gWVxuICAgIHRoaXMuY29sWXMgPSBbXTtcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgdGhpcy5jb2xzOyBpKysgKSB7XG4gICAgICB0aGlzLmNvbFlzLnB1c2goIDAgKTtcbiAgICB9XG5cbiAgICB0aGlzLm1heFkgPSAwO1xuICAgIHRoaXMuaG9yaXpvbnRhbENvbEluZGV4ID0gMDtcbiAgfTtcblxuICBwcm90by5tZWFzdXJlQ29sdW1ucyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2V0Q29udGFpbmVyV2lkdGgoKTtcbiAgICAvLyBpZiBjb2x1bW5XaWR0aCBpcyAwLCBkZWZhdWx0IHRvIG91dGVyV2lkdGggb2YgZmlyc3QgaXRlbVxuICAgIGlmICggIXRoaXMuY29sdW1uV2lkdGggKSB7XG4gICAgICB2YXIgZmlyc3RJdGVtID0gdGhpcy5pdGVtc1swXTtcbiAgICAgIHZhciBmaXJzdEl0ZW1FbGVtID0gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50O1xuICAgICAgLy8gY29sdW1uV2lkdGggZmFsbCBiYWNrIHRvIGl0ZW0gb2YgZmlyc3QgZWxlbWVudFxuICAgICAgdGhpcy5jb2x1bW5XaWR0aCA9IGZpcnN0SXRlbUVsZW0gJiYgZ2V0U2l6ZSggZmlyc3RJdGVtRWxlbSApLm91dGVyV2lkdGggfHxcbiAgICAgICAgLy8gaWYgZmlyc3QgZWxlbSBoYXMgbm8gd2lkdGgsIGRlZmF1bHQgdG8gc2l6ZSBvZiBjb250YWluZXJcbiAgICAgICAgdGhpcy5jb250YWluZXJXaWR0aDtcbiAgICB9XG5cbiAgICB2YXIgY29sdW1uV2lkdGggPSB0aGlzLmNvbHVtbldpZHRoICs9IHRoaXMuZ3V0dGVyO1xuXG4gICAgLy8gY2FsY3VsYXRlIGNvbHVtbnNcbiAgICB2YXIgY29udGFpbmVyV2lkdGggPSB0aGlzLmNvbnRhaW5lcldpZHRoICsgdGhpcy5ndXR0ZXI7XG4gICAgdmFyIGNvbHMgPSBjb250YWluZXJXaWR0aCAvIGNvbHVtbldpZHRoO1xuICAgIC8vIGZpeCByb3VuZGluZyBlcnJvcnMsIHR5cGljYWxseSB3aXRoIGd1dHRlcnNcbiAgICB2YXIgZXhjZXNzID0gY29sdW1uV2lkdGggLSBjb250YWluZXJXaWR0aCAlIGNvbHVtbldpZHRoO1xuICAgIC8vIGlmIG92ZXJzaG9vdCBpcyBsZXNzIHRoYW4gYSBwaXhlbCwgcm91bmQgdXAsIG90aGVyd2lzZSBmbG9vciBpdFxuICAgIHZhciBtYXRoTWV0aG9kID0gZXhjZXNzICYmIGV4Y2VzcyA8IDEgPyAncm91bmQnIDogJ2Zsb29yJztcbiAgICBjb2xzID0gTWF0aFsgbWF0aE1ldGhvZCBdKCBjb2xzICk7XG4gICAgdGhpcy5jb2xzID0gTWF0aC5tYXgoIGNvbHMsIDEgKTtcbiAgfTtcblxuICBwcm90by5nZXRDb250YWluZXJXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGNvbnRhaW5lciBpcyBwYXJlbnQgaWYgZml0IHdpZHRoXG4gICAgdmFyIGlzRml0V2lkdGggPSB0aGlzLl9nZXRPcHRpb24oJ2ZpdFdpZHRoJyk7XG4gICAgdmFyIGNvbnRhaW5lciA9IGlzRml0V2lkdGggPyB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSA6IHRoaXMuZWxlbWVudDtcbiAgICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcbiAgICAvLyBJRTggdHJpZ2dlcnMgcmVzaXplIG9uIGJvZHkgc2l6ZSBjaGFuZ2UsIHNvIHRoZXkgbWlnaHQgbm90IGJlXG4gICAgdmFyIHNpemUgPSBnZXRTaXplKCBjb250YWluZXIgKTtcbiAgICB0aGlzLmNvbnRhaW5lcldpZHRoID0gc2l6ZSAmJiBzaXplLmlubmVyV2lkdGg7XG4gIH07XG5cbiAgcHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xuICAgIGl0ZW0uZ2V0U2l6ZSgpO1xuICAgIC8vIGhvdyBtYW55IGNvbHVtbnMgZG9lcyB0aGlzIGJyaWNrIHNwYW5cbiAgICB2YXIgcmVtYWluZGVyID0gaXRlbS5zaXplLm91dGVyV2lkdGggJSB0aGlzLmNvbHVtbldpZHRoO1xuICAgIHZhciBtYXRoTWV0aG9kID0gcmVtYWluZGVyICYmIHJlbWFpbmRlciA8IDEgPyAncm91bmQnIDogJ2NlaWwnO1xuICAgIC8vIHJvdW5kIGlmIG9mZiBieSAxIHBpeGVsLCBvdGhlcndpc2UgdXNlIGNlaWxcbiAgICB2YXIgY29sU3BhbiA9IE1hdGhbIG1hdGhNZXRob2QgXSggaXRlbS5zaXplLm91dGVyV2lkdGggLyB0aGlzLmNvbHVtbldpZHRoICk7XG4gICAgY29sU3BhbiA9IE1hdGgubWluKCBjb2xTcGFuLCB0aGlzLmNvbHMgKTtcbiAgICAvLyB1c2UgaG9yaXpvbnRhbCBvciB0b3AgY29sdW1uIHBvc2l0aW9uXG4gICAgdmFyIGNvbFBvc01ldGhvZCA9IHRoaXMub3B0aW9ucy5ob3Jpem9udGFsT3JkZXIgP1xuICAgICAgJ19nZXRIb3Jpem9udGFsQ29sUG9zaXRpb24nIDogJ19nZXRUb3BDb2xQb3NpdGlvbic7XG4gICAgdmFyIGNvbFBvc2l0aW9uID0gdGhpc1sgY29sUG9zTWV0aG9kIF0oIGNvbFNwYW4sIGl0ZW0gKTtcbiAgICAvLyBwb3NpdGlvbiB0aGUgYnJpY2tcbiAgICB2YXIgcG9zaXRpb24gPSB7XG4gICAgICB4OiB0aGlzLmNvbHVtbldpZHRoICogY29sUG9zaXRpb24uY29sLFxuICAgICAgeTogY29sUG9zaXRpb24ueVxuICAgIH07XG4gICAgLy8gYXBwbHkgc2V0SGVpZ2h0IHRvIG5lY2Vzc2FyeSBjb2x1bW5zXG4gICAgdmFyIHNldEhlaWdodCA9IGNvbFBvc2l0aW9uLnkgKyBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XG4gICAgdmFyIHNldE1heCA9IGNvbFNwYW4gKyBjb2xQb3NpdGlvbi5jb2w7XG4gICAgZm9yICggdmFyIGkgPSBjb2xQb3NpdGlvbi5jb2w7IGkgPCBzZXRNYXg7IGkrKyApIHtcbiAgICAgIHRoaXMuY29sWXNbaV0gPSBzZXRIZWlnaHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9O1xuXG4gIHByb3RvLl9nZXRUb3BDb2xQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjb2xTcGFuICkge1xuICAgIHZhciBjb2xHcm91cCA9IHRoaXMuX2dldFRvcENvbEdyb3VwKCBjb2xTcGFuICk7XG4gICAgLy8gZ2V0IHRoZSBtaW5pbXVtIFkgdmFsdWUgZnJvbSB0aGUgY29sdW1uc1xuICAgIHZhciBtaW5pbXVtWSA9IE1hdGgubWluLmFwcGx5KCBNYXRoLCBjb2xHcm91cCApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbDogY29sR3JvdXAuaW5kZXhPZiggbWluaW11bVkgKSxcbiAgICAgIHk6IG1pbmltdW1ZLFxuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjb2xTcGFuIC0gbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGVsZW1lbnQgc3BhbnNcbiAgICogQHJldHVybnMge0FycmF5fSBjb2xHcm91cFxuICAgKi9cbiAgcHJvdG8uX2dldFRvcENvbEdyb3VwID0gZnVuY3Rpb24oIGNvbFNwYW4gKSB7XG4gICAgaWYgKCBjb2xTcGFuIDwgMiApIHtcbiAgICAgIC8vIGlmIGJyaWNrIHNwYW5zIG9ubHkgb25lIGNvbHVtbiwgdXNlIGFsbCB0aGUgY29sdW1uIFlzXG4gICAgICByZXR1cm4gdGhpcy5jb2xZcztcbiAgICB9XG5cbiAgICB2YXIgY29sR3JvdXAgPSBbXTtcbiAgICAvLyBob3cgbWFueSBkaWZmZXJlbnQgcGxhY2VzIGNvdWxkIHRoaXMgYnJpY2sgZml0IGhvcml6b250YWxseVxuICAgIHZhciBncm91cENvdW50ID0gdGhpcy5jb2xzICsgMSAtIGNvbFNwYW47XG4gICAgLy8gZm9yIGVhY2ggZ3JvdXAgcG90ZW50aWFsIGhvcml6b250YWwgcG9zaXRpb25cbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBncm91cENvdW50OyBpKysgKSB7XG4gICAgICBjb2xHcm91cFtpXSA9IHRoaXMuX2dldENvbEdyb3VwWSggaSwgY29sU3BhbiApO1xuICAgIH1cbiAgICByZXR1cm4gY29sR3JvdXA7XG4gIH07XG5cbiAgcHJvdG8uX2dldENvbEdyb3VwWSA9IGZ1bmN0aW9uKCBjb2wsIGNvbFNwYW4gKSB7XG4gICAgaWYgKCBjb2xTcGFuIDwgMiApIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbFlzWyBjb2wgXTtcbiAgICB9XG4gICAgLy8gbWFrZSBhbiBhcnJheSBvZiBjb2xZIHZhbHVlcyBmb3IgdGhhdCBvbmUgZ3JvdXBcbiAgICB2YXIgZ3JvdXBDb2xZcyA9IHRoaXMuY29sWXMuc2xpY2UoIGNvbCwgY29sICsgY29sU3BhbiApO1xuICAgIC8vIGFuZCBnZXQgdGhlIG1heCB2YWx1ZSBvZiB0aGUgYXJyYXlcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkoIE1hdGgsIGdyb3VwQ29sWXMgKTtcbiAgfTtcblxuICAvLyBnZXQgY29sdW1uIHBvc2l0aW9uIGJhc2VkIG9uIGhvcml6b250YWwgaW5kZXguICM4NzNcbiAgcHJvdG8uX2dldEhvcml6b250YWxDb2xQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjb2xTcGFuLCBpdGVtICkge1xuICAgIHZhciBjb2wgPSB0aGlzLmhvcml6b250YWxDb2xJbmRleCAlIHRoaXMuY29scztcbiAgICB2YXIgaXNPdmVyID0gY29sU3BhbiA+IDEgJiYgY29sICsgY29sU3BhbiA+IHRoaXMuY29scztcbiAgICAvLyBzaGlmdCB0byBuZXh0IHJvdyBpZiBpdGVtIGNhbid0IGZpdCBvbiBjdXJyZW50IHJvd1xuICAgIGNvbCA9IGlzT3ZlciA/IDAgOiBjb2w7XG4gICAgLy8gZG9uJ3QgbGV0IHplcm8tc2l6ZSBpdGVtcyB0YWtlIHVwIHNwYWNlXG4gICAgdmFyIGhhc1NpemUgPSBpdGVtLnNpemUub3V0ZXJXaWR0aCAmJiBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XG4gICAgdGhpcy5ob3Jpem9udGFsQ29sSW5kZXggPSBoYXNTaXplID8gY29sICsgY29sU3BhbiA6IHRoaXMuaG9yaXpvbnRhbENvbEluZGV4O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbDogY29sLFxuICAgICAgeTogdGhpcy5fZ2V0Q29sR3JvdXBZKCBjb2wsIGNvbFNwYW4gKSxcbiAgICB9O1xuICB9O1xuXG4gIHByb3RvLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCBzdGFtcCApIHtcbiAgICB2YXIgc3RhbXBTaXplID0gZ2V0U2l6ZSggc3RhbXAgKTtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fZ2V0RWxlbWVudE9mZnNldCggc3RhbXAgKTtcbiAgICAvLyBnZXQgdGhlIGNvbHVtbnMgdGhhdCB0aGlzIHN0YW1wIGFmZmVjdHNcbiAgICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XG4gICAgdmFyIGZpcnN0WCA9IGlzT3JpZ2luTGVmdCA/IG9mZnNldC5sZWZ0IDogb2Zmc2V0LnJpZ2h0O1xuICAgIHZhciBsYXN0WCA9IGZpcnN0WCArIHN0YW1wU2l6ZS5vdXRlcldpZHRoO1xuICAgIHZhciBmaXJzdENvbCA9IE1hdGguZmxvb3IoIGZpcnN0WCAvIHRoaXMuY29sdW1uV2lkdGggKTtcbiAgICBmaXJzdENvbCA9IE1hdGgubWF4KCAwLCBmaXJzdENvbCApO1xuICAgIHZhciBsYXN0Q29sID0gTWF0aC5mbG9vciggbGFzdFggLyB0aGlzLmNvbHVtbldpZHRoICk7XG4gICAgLy8gbGFzdENvbCBzaG91bGQgbm90IGdvIG92ZXIgaWYgbXVsdGlwbGUgb2YgY29sdW1uV2lkdGggIzQyNVxuICAgIGxhc3RDb2wgLT0gbGFzdFggJSB0aGlzLmNvbHVtbldpZHRoID8gMCA6IDE7XG4gICAgbGFzdENvbCA9IE1hdGgubWluKCB0aGlzLmNvbHMgLSAxLCBsYXN0Q29sICk7XG4gICAgLy8gc2V0IGNvbFlzIHRvIGJvdHRvbSBvZiB0aGUgc3RhbXBcblxuICAgIHZhciBpc09yaWdpblRvcCA9IHRoaXMuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XG4gICAgdmFyIHN0YW1wTWF4WSA9ICggaXNPcmlnaW5Ub3AgPyBvZmZzZXQudG9wIDogb2Zmc2V0LmJvdHRvbSApICtcbiAgICAgIHN0YW1wU2l6ZS5vdXRlckhlaWdodDtcbiAgICBmb3IgKCB2YXIgaSA9IGZpcnN0Q29sOyBpIDw9IGxhc3RDb2w7IGkrKyApIHtcbiAgICAgIHRoaXMuY29sWXNbaV0gPSBNYXRoLm1heCggc3RhbXBNYXhZLCB0aGlzLmNvbFlzW2ldICk7XG4gICAgfVxuICB9O1xuXG4gIHByb3RvLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5tYXhZID0gTWF0aC5tYXguYXBwbHkoIE1hdGgsIHRoaXMuY29sWXMgKTtcbiAgICB2YXIgc2l6ZSA9IHtcbiAgICAgIGhlaWdodDogdGhpcy5tYXhZXG4gICAgfTtcblxuICAgIGlmICggdGhpcy5fZ2V0T3B0aW9uKCdmaXRXaWR0aCcpICkge1xuICAgICAgc2l6ZS53aWR0aCA9IHRoaXMuX2dldENvbnRhaW5lckZpdFdpZHRoKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpemU7XG4gIH07XG5cbiAgcHJvdG8uX2dldENvbnRhaW5lckZpdFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVudXNlZENvbHMgPSAwO1xuICAgIC8vIGNvdW50IHVudXNlZCBjb2x1bW5zXG4gICAgdmFyIGkgPSB0aGlzLmNvbHM7XG4gICAgd2hpbGUgKCAtLWkgKSB7XG4gICAgICBpZiAoIHRoaXMuY29sWXNbaV0gIT09IDAgKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdW51c2VkQ29scysrO1xuICAgIH1cbiAgICAvLyBmaXQgY29udGFpbmVyIHRvIGNvbHVtbnMgdGhhdCBoYXZlIGJlZW4gdXNlZFxuICAgIHJldHVybiAoIHRoaXMuY29scyAtIHVudXNlZENvbHMgKSAqIHRoaXMuY29sdW1uV2lkdGggLSB0aGlzLmd1dHRlcjtcbiAgfTtcblxuICBwcm90by5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcmV2aW91c1dpZHRoID0gdGhpcy5jb250YWluZXJXaWR0aDtcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XG4gICAgcmV0dXJuIHByZXZpb3VzV2lkdGggIT0gdGhpcy5jb250YWluZXJXaWR0aDtcbiAgfTtcblxuICByZXR1cm4gTWFzb25yeTtcblxufSkpO1xuXG4vKiFcbiAqIE1hc29ucnkgbGF5b3V0IG1vZGVcbiAqIHN1Yi1jbGFzc2VzIE1hc29ucnlcbiAqIGh0dHBzOi8vbWFzb25yeS5kZXNhbmRyby5jb21cbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeScsW1xuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnLFxuICAgICAgICAnbWFzb25yeS1sYXlvdXQvbWFzb25yeSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpLFxuICAgICAgcmVxdWlyZSgnbWFzb25yeS1sYXlvdXQnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSxcbiAgICAgIHdpbmRvdy5NYXNvbnJ5XG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIExheW91dE1vZGUsIE1hc29ucnkgKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xuICB2YXIgTWFzb25yeU1vZGUgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnbWFzb25yeScpO1xuXG4gIHZhciBwcm90byA9IE1hc29ucnlNb2RlLnByb3RvdHlwZTtcblxuICB2YXIga2VlcE1vZGVNZXRob2RzID0ge1xuICAgIF9nZXRFbGVtZW50T2Zmc2V0OiB0cnVlLFxuICAgIGxheW91dDogdHJ1ZSxcbiAgICBfZ2V0TWVhc3VyZW1lbnQ6IHRydWVcbiAgfTtcblxuICAvLyBpbmhlcml0IE1hc29ucnkgcHJvdG90eXBlXG4gIGZvciAoIHZhciBtZXRob2QgaW4gTWFzb25yeS5wcm90b3R5cGUgKSB7XG4gICAgLy8gZG8gbm90IGluaGVyaXQgbW9kZSBtZXRob2RzXG4gICAgaWYgKCAha2VlcE1vZGVNZXRob2RzWyBtZXRob2QgXSApIHtcbiAgICAgIHByb3RvWyBtZXRob2QgXSA9IE1hc29ucnkucHJvdG90eXBlWyBtZXRob2QgXTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVhc3VyZUNvbHVtbnMgPSBwcm90by5tZWFzdXJlQ29sdW1ucztcbiAgcHJvdG8ubWVhc3VyZUNvbHVtbnMgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBzZXQgaXRlbXMsIHVzZWQgaWYgbWVhc3VyaW5nIGZpcnN0IGl0ZW1cbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXM7XG4gICAgbWVhc3VyZUNvbHVtbnMuY2FsbCggdGhpcyApO1xuICB9O1xuXG4gIC8vIHBvaW50IHRvIG1vZGUgb3B0aW9ucyBmb3IgZml0V2lkdGhcbiAgdmFyIF9nZXRPcHRpb24gPSBwcm90by5fZ2V0T3B0aW9uO1xuICBwcm90by5fZ2V0T3B0aW9uID0gZnVuY3Rpb24oIG9wdGlvbiApIHtcbiAgICBpZiAoIG9wdGlvbiA9PSAnZml0V2lkdGgnICkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pc0ZpdFdpZHRoICE9PSB1bmRlZmluZWQgP1xuICAgICAgICB0aGlzLm9wdGlvbnMuaXNGaXRXaWR0aCA6IHRoaXMub3B0aW9ucy5maXRXaWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIF9nZXRPcHRpb24uYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XG4gIH07XG5cbiAgcmV0dXJuIE1hc29ucnlNb2RlO1xuXG59KSk7XG5cbi8qKlxuICogZml0Um93cyBsYXlvdXQgbW9kZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9maXQtcm93cycsW1xuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnXG4gICAgICBdLFxuICAgICAgZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSApIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIEZpdFJvd3MgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnZml0Um93cycpO1xuXG52YXIgcHJvdG8gPSBGaXRSb3dzLnByb3RvdHlwZTtcblxucHJvdG8uX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueCA9IDA7XG4gIHRoaXMueSA9IDA7XG4gIHRoaXMubWF4WSA9IDA7XG4gIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnZ3V0dGVyJywgJ291dGVyV2lkdGgnICk7XG59O1xuXG5wcm90by5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gIGl0ZW0uZ2V0U2l6ZSgpO1xuXG4gIHZhciBpdGVtV2lkdGggPSBpdGVtLnNpemUub3V0ZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xuICAvLyBpZiB0aGlzIGVsZW1lbnQgY2Fubm90IGZpdCBpbiB0aGUgY3VycmVudCByb3dcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gdGhpcy5pc290b3BlLnNpemUuaW5uZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xuICBpZiAoIHRoaXMueCAhPT0gMCAmJiBpdGVtV2lkdGggKyB0aGlzLnggPiBjb250YWluZXJXaWR0aCApIHtcbiAgICB0aGlzLnggPSAwO1xuICAgIHRoaXMueSA9IHRoaXMubWF4WTtcbiAgfVxuXG4gIHZhciBwb3NpdGlvbiA9IHtcbiAgICB4OiB0aGlzLngsXG4gICAgeTogdGhpcy55XG4gIH07XG5cbiAgdGhpcy5tYXhZID0gTWF0aC5tYXgoIHRoaXMubWF4WSwgdGhpcy55ICsgaXRlbS5zaXplLm91dGVySGVpZ2h0ICk7XG4gIHRoaXMueCArPSBpdGVtV2lkdGg7XG5cbiAgcmV0dXJuIHBvc2l0aW9uO1xufTtcblxucHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLm1heFkgfTtcbn07XG5cbnJldHVybiBGaXRSb3dzO1xuXG59KSk7XG5cbi8qKlxuICogdmVydGljYWwgbGF5b3V0IG1vZGVcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnLFtcbiAgICAgICAgJy4uL2xheW91dC1tb2RlJ1xuICAgICAgXSxcbiAgICAgIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSApIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIFZlcnRpY2FsID0gTGF5b3V0TW9kZS5jcmVhdGUoICd2ZXJ0aWNhbCcsIHtcbiAgaG9yaXpvbnRhbEFsaWdubWVudDogMFxufSk7XG5cbnZhciBwcm90byA9IFZlcnRpY2FsLnByb3RvdHlwZTtcblxucHJvdG8uX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueSA9IDA7XG59O1xuXG5wcm90by5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gIGl0ZW0uZ2V0U2l6ZSgpO1xuICB2YXIgeCA9ICggdGhpcy5pc290b3BlLnNpemUuaW5uZXJXaWR0aCAtIGl0ZW0uc2l6ZS5vdXRlcldpZHRoICkgKlxuICAgIHRoaXMub3B0aW9ucy5ob3Jpem9udGFsQWxpZ25tZW50O1xuICB2YXIgeSA9IHRoaXMueTtcbiAgdGhpcy55ICs9IGl0ZW0uc2l6ZS5vdXRlckhlaWdodDtcbiAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xufTtcblxucHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLnkgfTtcbn07XG5cbnJldHVybiBWZXJ0aWNhbDtcblxufSkpO1xuXG4vKiFcbiAqIElzb3RvcGUgdjMuMC42XG4gKlxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuICogb3IgSXNvdG9wZSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXG4gKlxuICogaHR0cHM6Ly9pc290b3BlLm1ldGFmaXp6eS5jb1xuICogQ29weXJpZ2h0IDIwMTAtMjAxOCBNZXRhZml6enlcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJyxcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcbiAgICAgICAgJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcicsXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgICAgICdpc290b3BlLWxheW91dC9qcy9pdGVtJyxcbiAgICAgICAgJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlJyxcbiAgICAgICAgLy8gaW5jbHVkZSBkZWZhdWx0IGxheW91dCBtb2Rlc1xuICAgICAgICAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL21hc29ucnknLFxuICAgICAgICAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyxcbiAgICAgICAgJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy92ZXJ0aWNhbCdcbiAgICAgIF0sXG4gICAgICBmdW5jdGlvbiggT3V0bGF5ZXIsIGdldFNpemUsIG1hdGNoZXNTZWxlY3RvciwgdXRpbHMsIEl0ZW0sIExheW91dE1vZGUgKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIE91dGxheWVyLCBnZXRTaXplLCBtYXRjaGVzU2VsZWN0b3IsIHV0aWxzLCBJdGVtLCBMYXlvdXRNb2RlICk7XG4gICAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ291dGxheWVyJyksXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvcicpLFxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICAgIHJlcXVpcmUoJ2lzb3RvcGUtbGF5b3V0L2pzL2l0ZW0nKSxcbiAgICAgIHJlcXVpcmUoJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlJyksXG4gICAgICAvLyBpbmNsdWRlIGRlZmF1bHQgbGF5b3V0IG1vZGVzXG4gICAgICByZXF1aXJlKCdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeScpLFxuICAgICAgcmVxdWlyZSgnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyksXG4gICAgICByZXF1aXJlKCdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuSXNvdG9wZSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IsXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICAgd2luZG93Lklzb3RvcGUuSXRlbSxcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscyxcbiAgSXRlbSwgTGF5b3V0TW9kZSApIHtcblxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHZhcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIHRyaW0gPSBTdHJpbmcucHJvdG90eXBlLnRyaW0gP1xuICBmdW5jdGlvbiggc3RyICkge1xuICAgIHJldHVybiBzdHIudHJpbSgpO1xuICB9IDpcbiAgZnVuY3Rpb24oIHN0ciApIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoIC9eXFxzK3xcXHMrJC9nLCAnJyApO1xuICB9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpc290b3BlRGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8vIGNyZWF0ZSBhbiBPdXRsYXllciBsYXlvdXQgY2xhc3NcbiAgdmFyIElzb3RvcGUgPSBPdXRsYXllci5jcmVhdGUoICdpc290b3BlJywge1xuICAgIGxheW91dE1vZGU6ICdtYXNvbnJ5JyxcbiAgICBpc0pRdWVyeUZpbHRlcmluZzogdHJ1ZSxcbiAgICBzb3J0QXNjZW5kaW5nOiB0cnVlXG4gIH0pO1xuXG4gIElzb3RvcGUuSXRlbSA9IEl0ZW07XG4gIElzb3RvcGUuTGF5b3V0TW9kZSA9IExheW91dE1vZGU7XG5cbiAgdmFyIHByb3RvID0gSXNvdG9wZS5wcm90b3R5cGU7XG5cbiAgcHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXRlbUdVSUQgPSAwO1xuICAgIC8vIGZ1bmN0aW9ucyB0aGF0IHNvcnQgaXRlbXNcbiAgICB0aGlzLl9zb3J0ZXJzID0ge307XG4gICAgdGhpcy5fZ2V0U29ydGVycygpO1xuICAgIC8vIGNhbGwgc3VwZXJcbiAgICBPdXRsYXllci5wcm90b3R5cGUuX2NyZWF0ZS5jYWxsKCB0aGlzICk7XG5cbiAgICAvLyBjcmVhdGUgbGF5b3V0IG1vZGVzXG4gICAgdGhpcy5tb2RlcyA9IHt9O1xuICAgIC8vIHN0YXJ0IGZpbHRlcmVkSXRlbXMgd2l0aCBhbGwgaXRlbXNcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIC8vIGtlZXAgb2YgdHJhY2sgb2Ygc29ydEJ5c1xuICAgIHRoaXMuc29ydEhpc3RvcnkgPSBbICdvcmlnaW5hbC1vcmRlcicgXTtcbiAgICAvLyBjcmVhdGUgZnJvbSByZWdpc3RlcmVkIGxheW91dCBtb2Rlc1xuICAgIGZvciAoIHZhciBuYW1lIGluIExheW91dE1vZGUubW9kZXMgKSB7XG4gICAgICB0aGlzLl9pbml0TGF5b3V0TW9kZSggbmFtZSApO1xuICAgIH1cbiAgfTtcblxuICBwcm90by5yZWxvYWRJdGVtcyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIHJlc2V0IGl0ZW0gSUQgY291bnRlclxuICAgIHRoaXMuaXRlbUdVSUQgPSAwO1xuICAgIC8vIGNhbGwgc3VwZXJcbiAgICBPdXRsYXllci5wcm90b3R5cGUucmVsb2FkSXRlbXMuY2FsbCggdGhpcyApO1xuICB9O1xuXG4gIHByb3RvLl9pdGVtaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gT3V0bGF5ZXIucHJvdG90eXBlLl9pdGVtaXplLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAvLyBhc3NpZ24gSUQgZm9yIG9yaWdpbmFsLW9yZGVyXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrICkge1xuICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgIGl0ZW0uaWQgPSB0aGlzLml0ZW1HVUlEKys7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZUl0ZW1zU29ydERhdGEoIGl0ZW1zICk7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbGF5b3V0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgcHJvdG8uX2luaXRMYXlvdXRNb2RlID0gZnVuY3Rpb24oIG5hbWUgKSB7XG4gICAgdmFyIE1vZGUgPSBMYXlvdXRNb2RlLm1vZGVzWyBuYW1lIF07XG4gICAgLy8gc2V0IG1vZGUgb3B0aW9uc1xuICAgIC8vIEhBQ0sgZXh0ZW5kIGluaXRpYWwgb3B0aW9ucywgYmFjay1maWxsIGluIGRlZmF1bHQgb3B0aW9uc1xuICAgIHZhciBpbml0aWFsT3B0cyA9IHRoaXMub3B0aW9uc1sgbmFtZSBdIHx8IHt9O1xuICAgIHRoaXMub3B0aW9uc1sgbmFtZSBdID0gTW9kZS5vcHRpb25zID9cbiAgICAgIHV0aWxzLmV4dGVuZCggTW9kZS5vcHRpb25zLCBpbml0aWFsT3B0cyApIDogaW5pdGlhbE9wdHM7XG4gICAgLy8gaW5pdCBsYXlvdXQgbW9kZSBpbnN0YW5jZVxuICAgIHRoaXMubW9kZXNbIG5hbWUgXSA9IG5ldyBNb2RlKCB0aGlzICk7XG4gIH07XG5cblxuICBwcm90by5sYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBpZiBmaXJzdCB0aW1lIGRvaW5nIGxheW91dCwgZG8gYWxsIG1hZ2ljXG4gICAgaWYgKCAhdGhpcy5faXNMYXlvdXRJbml0ZWQgJiYgdGhpcy5fZ2V0T3B0aW9uKCdpbml0TGF5b3V0JykgKSB7XG4gICAgICB0aGlzLmFycmFuZ2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbGF5b3V0KCk7XG4gIH07XG5cbiAgLy8gcHJpdmF0ZSBtZXRob2QgdG8gYmUgdXNlZCBpbiBsYXlvdXQoKSAmIG1hZ2ljKClcbiAgcHJvdG8uX2xheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGRvbid0IGFuaW1hdGUgZmlyc3QgbGF5b3V0XG4gICAgdmFyIGlzSW5zdGFudCA9IHRoaXMuX2dldElzSW5zdGFudCgpO1xuICAgIC8vIGxheW91dCBmbG93XG4gICAgdGhpcy5fcmVzZXRMYXlvdXQoKTtcbiAgICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcbiAgICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLmZpbHRlcmVkSXRlbXMsIGlzSW5zdGFudCApO1xuXG4gICAgLy8gZmxhZyBmb3IgaW5pdGFsaXplZFxuICAgIHRoaXMuX2lzTGF5b3V0SW5pdGVkID0gdHJ1ZTtcbiAgfTtcblxuICAvLyBmaWx0ZXIgKyBzb3J0ICsgbGF5b3V0XG4gIHByb3RvLmFycmFuZ2UgPSBmdW5jdGlvbiggb3B0cyApIHtcbiAgICAvLyBzZXQgYW55IG9wdGlvbnMgcGFzc1xuICAgIHRoaXMub3B0aW9uKCBvcHRzICk7XG4gICAgdGhpcy5fZ2V0SXNJbnN0YW50KCk7XG4gICAgLy8gZmlsdGVyLCBzb3J0LCBhbmQgbGF5b3V0XG5cbiAgICAvLyBmaWx0ZXJcbiAgICB2YXIgZmlsdGVyZWQgPSB0aGlzLl9maWx0ZXIoIHRoaXMuaXRlbXMgKTtcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSBmaWx0ZXJlZC5tYXRjaGVzO1xuXG4gICAgdGhpcy5fYmluZEFycmFuZ2VDb21wbGV0ZSgpO1xuXG4gICAgaWYgKCB0aGlzLl9pc0luc3RhbnQgKSB7XG4gICAgICB0aGlzLl9ub1RyYW5zaXRpb24oIHRoaXMuX2hpZGVSZXZlYWwsIFsgZmlsdGVyZWQgXSApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlUmV2ZWFsKCBmaWx0ZXJlZCApO1xuICAgIH1cblxuICAgIHRoaXMuX3NvcnQoKTtcbiAgICB0aGlzLl9sYXlvdXQoKTtcbiAgfTtcbiAgLy8gYWxpYXMgdG8gX2luaXQgZm9yIG1haW4gcGx1Z2luIG1ldGhvZFxuICBwcm90by5faW5pdCA9IHByb3RvLmFycmFuZ2U7XG5cbiAgcHJvdG8uX2hpZGVSZXZlYWwgPSBmdW5jdGlvbiggZmlsdGVyZWQgKSB7XG4gICAgdGhpcy5yZXZlYWwoIGZpbHRlcmVkLm5lZWRSZXZlYWwgKTtcbiAgICB0aGlzLmhpZGUoIGZpbHRlcmVkLm5lZWRIaWRlICk7XG4gIH07XG5cbiAgLy8gSEFDS1xuICAvLyBEb24ndCBhbmltYXRlL3RyYW5zaXRpb24gZmlyc3QgbGF5b3V0XG4gIC8vIE9yIGRvbid0IGFuaW1hdGUvdHJhbnNpdGlvbiBvdGhlciBsYXlvdXRzXG4gIHByb3RvLl9nZXRJc0luc3RhbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXNMYXlvdXRJbnN0YW50ID0gdGhpcy5fZ2V0T3B0aW9uKCdsYXlvdXRJbnN0YW50Jyk7XG4gICAgdmFyIGlzSW5zdGFudCA9IGlzTGF5b3V0SW5zdGFudCAhPT0gdW5kZWZpbmVkID8gaXNMYXlvdXRJbnN0YW50IDpcbiAgICAgICF0aGlzLl9pc0xheW91dEluaXRlZDtcbiAgICB0aGlzLl9pc0luc3RhbnQgPSBpc0luc3RhbnQ7XG4gICAgcmV0dXJuIGlzSW5zdGFudDtcbiAgfTtcblxuICAvLyBsaXN0ZW4gZm9yIGxheW91dENvbXBsZXRlLCBoaWRlQ29tcGxldGUgYW5kIHJldmVhbENvbXBsZXRlXG4gIC8vIHRvIHRyaWdnZXIgYXJyYW5nZUNvbXBsZXRlXG4gIHByb3RvLl9iaW5kQXJyYW5nZUNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gbGlzdGVuIGZvciAzIGV2ZW50cyB0byB0cmlnZ2VyIGFycmFuZ2VDb21wbGV0ZVxuICAgIHZhciBpc0xheW91dENvbXBsZXRlLCBpc0hpZGVDb21wbGV0ZSwgaXNSZXZlYWxDb21wbGV0ZTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCkge1xuICAgICAgaWYgKCBpc0xheW91dENvbXBsZXRlICYmIGlzSGlkZUNvbXBsZXRlICYmIGlzUmV2ZWFsQ29tcGxldGUgKSB7XG4gICAgICAgIF90aGlzLmRpc3BhdGNoRXZlbnQoICdhcnJhbmdlQ29tcGxldGUnLCBudWxsLCBbIF90aGlzLmZpbHRlcmVkSXRlbXMgXSApO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm9uY2UoICdsYXlvdXRDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgaXNMYXlvdXRDb21wbGV0ZSA9IHRydWU7XG4gICAgICBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpO1xuICAgIH0pO1xuICAgIHRoaXMub25jZSggJ2hpZGVDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgaXNIaWRlQ29tcGxldGUgPSB0cnVlO1xuICAgICAgYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2soKTtcbiAgICB9KTtcbiAgICB0aGlzLm9uY2UoICdyZXZlYWxDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgaXNSZXZlYWxDb21wbGV0ZSA9IHRydWU7XG4gICAgICBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGZpbHRlciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIHByb3RvLl9maWx0ZXIgPSBmdW5jdGlvbiggaXRlbXMgKSB7XG4gICAgdmFyIGZpbHRlciA9IHRoaXMub3B0aW9ucy5maWx0ZXI7XG4gICAgZmlsdGVyID0gZmlsdGVyIHx8ICcqJztcbiAgICB2YXIgbWF0Y2hlcyA9IFtdO1xuICAgIHZhciBoaWRkZW5NYXRjaGVkID0gW107XG4gICAgdmFyIHZpc2libGVVbm1hdGNoZWQgPSBbXTtcblxuICAgIHZhciB0ZXN0ID0gdGhpcy5fZ2V0RmlsdGVyVGVzdCggZmlsdGVyICk7XG5cbiAgICAvLyB0ZXN0IGVhY2ggaXRlbVxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XG4gICAgICBpZiAoIGl0ZW0uaXNJZ25vcmVkICkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIGFkZCBpdGVtIHRvIGVpdGhlciBtYXRjaGVkIG9yIHVubWF0Y2hlZCBncm91cFxuICAgICAgdmFyIGlzTWF0Y2hlZCA9IHRlc3QoIGl0ZW0gKTtcbiAgICAgIC8vIGl0ZW0uaXNGaWx0ZXJNYXRjaGVkID0gaXNNYXRjaGVkO1xuICAgICAgLy8gYWRkIHRvIG1hdGNoZXMgaWYgaXRzIGEgbWF0Y2hcbiAgICAgIGlmICggaXNNYXRjaGVkICkge1xuICAgICAgICBtYXRjaGVzLnB1c2goIGl0ZW0gKTtcbiAgICAgIH1cbiAgICAgIC8vIGFkZCB0byBhZGRpdGlvbmFsIGdyb3VwIGlmIGl0ZW0gbmVlZHMgdG8gYmUgaGlkZGVuIG9yIHJldmVhbGVkXG4gICAgICBpZiAoIGlzTWF0Y2hlZCAmJiBpdGVtLmlzSGlkZGVuICkge1xuICAgICAgICBoaWRkZW5NYXRjaGVkLnB1c2goIGl0ZW0gKTtcbiAgICAgIH0gZWxzZSBpZiAoICFpc01hdGNoZWQgJiYgIWl0ZW0uaXNIaWRkZW4gKSB7XG4gICAgICAgIHZpc2libGVVbm1hdGNoZWQucHVzaCggaXRlbSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJldHVybiBjb2xsZWN0aW9ucyBvZiBpdGVtcyB0byBiZSBtYW5pcHVsYXRlZFxuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGVzOiBtYXRjaGVzLFxuICAgICAgbmVlZFJldmVhbDogaGlkZGVuTWF0Y2hlZCxcbiAgICAgIG5lZWRIaWRlOiB2aXNpYmxlVW5tYXRjaGVkXG4gICAgfTtcbiAgfTtcblxuICAvLyBnZXQgYSBqUXVlcnksIGZ1bmN0aW9uLCBvciBhIG1hdGNoZXNTZWxlY3RvciB0ZXN0IGdpdmVuIHRoZSBmaWx0ZXJcbiAgcHJvdG8uX2dldEZpbHRlclRlc3QgPSBmdW5jdGlvbiggZmlsdGVyICkge1xuICAgIGlmICggalF1ZXJ5ICYmIHRoaXMub3B0aW9ucy5pc0pRdWVyeUZpbHRlcmluZyApIHtcbiAgICAgIC8vIHVzZSBqUXVlcnlcbiAgICAgIHJldHVybiBmdW5jdGlvbiggaXRlbSApIHtcbiAgICAgICAgcmV0dXJuIGpRdWVyeSggaXRlbS5lbGVtZW50ICkuaXMoIGZpbHRlciApO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCB0eXBlb2YgZmlsdGVyID09ICdmdW5jdGlvbicgKSB7XG4gICAgICAvLyB1c2UgZmlsdGVyIGFzIGZ1bmN0aW9uXG4gICAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXIoIGl0ZW0uZWxlbWVudCApO1xuICAgICAgfTtcbiAgICB9XG4gICAgLy8gZGVmYXVsdCwgdXNlIGZpbHRlciBhcyBzZWxlY3RvciBzdHJpbmdcbiAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yKCBpdGVtLmVsZW1lbnQsIGZpbHRlciApO1xuICAgIH07XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc29ydGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8qKlxuICAgKiBAcGFyYW1zIHtBcnJheX0gZWxlbXNcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcHJvdG8udXBkYXRlU29ydERhdGEgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gICAgLy8gZ2V0IGl0ZW1zXG4gICAgdmFyIGl0ZW1zO1xuICAgIGlmICggZWxlbXMgKSB7XG4gICAgICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgICAgIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlIGFsbCBpdGVtcyBpZiBubyBlbGVtcyBwcm92aWRlZFxuICAgICAgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIH1cblxuICAgIHRoaXMuX2dldFNvcnRlcnMoKTtcbiAgICB0aGlzLl91cGRhdGVJdGVtc1NvcnREYXRhKCBpdGVtcyApO1xuICB9O1xuXG4gIHByb3RvLl9nZXRTb3J0ZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5vcHRpb25zLmdldFNvcnREYXRhO1xuICAgIGZvciAoIHZhciBrZXkgaW4gZ2V0U29ydERhdGEgKSB7XG4gICAgICB2YXIgc29ydGVyID0gZ2V0U29ydERhdGFbIGtleSBdO1xuICAgICAgdGhpcy5fc29ydGVyc1sga2V5IF0gPSBtdW5nZVNvcnRlciggc29ydGVyICk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW1zIHtBcnJheX0gaXRlbXMgLSBvZiBJc290b3BlLkl0ZW1zXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm90by5fdXBkYXRlSXRlbXNTb3J0RGF0YSA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgICAvLyBkbyBub3QgdXBkYXRlIGlmIG5vIGl0ZW1zXG4gICAgdmFyIGxlbiA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aDtcblxuICAgIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XG4gICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgaXRlbS51cGRhdGVTb3J0RGF0YSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyAtLS0tLSBtdW5nZSBzb3J0ZXIgLS0tLS0gLy9cblxuICAvLyBlbmNhcHN1bGF0ZSB0aGlzLCBhcyB3ZSBqdXN0IG5lZWQgbXVuZ2VTb3J0ZXJcbiAgLy8gb3RoZXIgZnVuY3Rpb25zIGluIGhlcmUgYXJlIGp1c3QgZm9yIG11bmdpbmdcbiAgdmFyIG11bmdlU29ydGVyID0gKCBmdW5jdGlvbigpIHtcbiAgICAvLyBhZGQgYSBtYWdpYyBsYXllciB0byBzb3J0ZXJzIGZvciBjb252aWVuZW50IHNob3J0aGFuZHNcbiAgICAvLyBgLmZvby1iYXJgIHdpbGwgdXNlIHRoZSB0ZXh0IG9mIC5mb28tYmFyIHF1ZXJ5U2VsZWN0b3JcbiAgICAvLyBgW2Zvby1iYXJdYCB3aWxsIHVzZSBhdHRyaWJ1dGVcbiAgICAvLyB5b3UgY2FuIGFsc28gYWRkIHBhcnNlclxuICAgIC8vIGAuZm9vLWJhciBwYXJzZUludGAgd2lsbCBwYXJzZSB0aGF0IGFzIGEgbnVtYmVyXG4gICAgZnVuY3Rpb24gbXVuZ2VTb3J0ZXIoIHNvcnRlciApIHtcbiAgICAgIC8vIGlmIG5vdCBhIHN0cmluZywgcmV0dXJuIGZ1bmN0aW9uIG9yIHdoYXRldmVyIGl0IGlzXG4gICAgICBpZiAoIHR5cGVvZiBzb3J0ZXIgIT0gJ3N0cmluZycgKSB7XG4gICAgICAgIHJldHVybiBzb3J0ZXI7XG4gICAgICB9XG4gICAgICAvLyBwYXJzZSB0aGUgc29ydGVyIHN0cmluZ1xuICAgICAgdmFyIGFyZ3MgPSB0cmltKCBzb3J0ZXIgKS5zcGxpdCgnICcpO1xuICAgICAgdmFyIHF1ZXJ5ID0gYXJnc1swXTtcbiAgICAgIC8vIGNoZWNrIGlmIHF1ZXJ5IGxvb2tzIGxpa2UgW2FuLWF0dHJpYnV0ZV1cbiAgICAgIHZhciBhdHRyTWF0Y2ggPSBxdWVyeS5tYXRjaCggL15cXFsoLispXFxdJC8gKTtcbiAgICAgIHZhciBhdHRyID0gYXR0ck1hdGNoICYmIGF0dHJNYXRjaFsxXTtcbiAgICAgIHZhciBnZXRWYWx1ZSA9IGdldFZhbHVlR2V0dGVyKCBhdHRyLCBxdWVyeSApO1xuICAgICAgLy8gdXNlIHNlY29uZCBhcmd1bWVudCBhcyBhIHBhcnNlclxuICAgICAgdmFyIHBhcnNlciA9IElzb3RvcGUuc29ydERhdGFQYXJzZXJzWyBhcmdzWzFdIF07XG4gICAgICAvLyBwYXJzZSB0aGUgdmFsdWUsIGlmIHRoZXJlIHdhcyBhIHBhcnNlclxuICAgICAgc29ydGVyID0gcGFyc2VyID8gZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIHJldHVybiBlbGVtICYmIHBhcnNlciggZ2V0VmFsdWUoIGVsZW0gKSApO1xuICAgICAgfSA6XG4gICAgICAvLyBvdGhlcndpc2UganVzdCByZXR1cm4gdmFsdWVcbiAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICByZXR1cm4gZWxlbSAmJiBnZXRWYWx1ZSggZWxlbSApO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHNvcnRlcjtcbiAgICB9XG5cbiAgICAvLyBnZXQgYW4gYXR0cmlidXRlIGdldHRlciwgb3IgZ2V0IHRleHQgb2YgdGhlIHF1ZXJ5U2VsZWN0b3JcbiAgICBmdW5jdGlvbiBnZXRWYWx1ZUdldHRlciggYXR0ciwgcXVlcnkgKSB7XG4gICAgICAvLyBpZiBxdWVyeSBsb29rcyBsaWtlIFtmb28tYmFyXSwgZ2V0IGF0dHJpYnV0ZVxuICAgICAgaWYgKCBhdHRyICkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0QXR0cmlidXRlKCBlbGVtICkge1xuICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggYXR0ciApO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBvdGhlcndpc2UsIGFzc3VtZSBpdHMgYSBxdWVyeVNlbGVjdG9yLCBhbmQgZ2V0IGl0cyB0ZXh0XG4gICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0Q2hpbGRUZXh0KCBlbGVtICkge1xuICAgICAgICB2YXIgY2hpbGQgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoIHF1ZXJ5ICk7XG4gICAgICAgIHJldHVybiBjaGlsZCAmJiBjaGlsZC50ZXh0Q29udGVudDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG11bmdlU29ydGVyO1xuICB9KSgpO1xuXG4gIC8vIHBhcnNlcnMgdXNlZCBpbiBnZXRTb3J0RGF0YSBzaG9ydGN1dCBzdHJpbmdzXG4gIElzb3RvcGUuc29ydERhdGFQYXJzZXJzID0ge1xuICAgICdwYXJzZUludCc6IGZ1bmN0aW9uKCB2YWwgKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoIHZhbCwgMTAgKTtcbiAgICB9LFxuICAgICdwYXJzZUZsb2F0JzogZnVuY3Rpb24oIHZhbCApIHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KCB2YWwgKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gLS0tLS0gc29ydCBtZXRob2QgLS0tLS0gLy9cblxuICAvLyBzb3J0IGZpbHRlcmVkSXRlbSBvcmRlclxuICBwcm90by5fc29ydCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICggIXRoaXMub3B0aW9ucy5zb3J0QnkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGtlZXAgdHJhY2sgb2Ygc29ydEJ5IEhpc3RvcnlcbiAgICB2YXIgc29ydEJ5cyA9IHV0aWxzLm1ha2VBcnJheSggdGhpcy5vcHRpb25zLnNvcnRCeSApO1xuICAgIGlmICggIXRoaXMuX2dldElzU2FtZVNvcnRCeSggc29ydEJ5cyApICkge1xuICAgICAgLy8gY29uY2F0IGFsbCBzb3J0QnkgYW5kIHNvcnRIaXN0b3J5LCBhZGQgdG8gZnJvbnQsIG9sZGVzdCBnb2VzIGluIGxhc3RcbiAgICAgIHRoaXMuc29ydEhpc3RvcnkgPSBzb3J0QnlzLmNvbmNhdCggdGhpcy5zb3J0SGlzdG9yeSApO1xuICAgIH1cbiAgICAvLyBzb3J0IG1hZ2ljXG4gICAgdmFyIGl0ZW1Tb3J0ZXIgPSBnZXRJdGVtU29ydGVyKCB0aGlzLnNvcnRIaXN0b3J5LCB0aGlzLm9wdGlvbnMuc29ydEFzY2VuZGluZyApO1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcy5zb3J0KCBpdGVtU29ydGVyICk7XG4gIH07XG5cbiAgLy8gY2hlY2sgaWYgc29ydEJ5cyBpcyBzYW1lIGFzIHN0YXJ0IG9mIHNvcnRIaXN0b3J5XG4gIHByb3RvLl9nZXRJc1NhbWVTb3J0QnkgPSBmdW5jdGlvbiggc29ydEJ5cyApIHtcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgc29ydEJ5cy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIGlmICggc29ydEJ5c1tpXSAhPSB0aGlzLnNvcnRIaXN0b3J5W2ldICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIHJldHVybnMgYSBmdW5jdGlvbiB1c2VkIGZvciBzb3J0aW5nXG4gIGZ1bmN0aW9uIGdldEl0ZW1Tb3J0ZXIoIHNvcnRCeXMsIHNvcnRBc2MgKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNvcnRlciggaXRlbUEsIGl0ZW1CICkge1xuICAgICAgLy8gY3ljbGUgdGhyb3VnaCBhbGwgc29ydEtleXNcbiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNvcnRCeXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIHZhciBzb3J0QnkgPSBzb3J0QnlzW2ldO1xuICAgICAgICB2YXIgYSA9IGl0ZW1BLnNvcnREYXRhWyBzb3J0QnkgXTtcbiAgICAgICAgdmFyIGIgPSBpdGVtQi5zb3J0RGF0YVsgc29ydEJ5IF07XG4gICAgICAgIGlmICggYSA+IGIgfHwgYSA8IGIgKSB7XG4gICAgICAgICAgLy8gaWYgc29ydEFzYyBpcyBhbiBvYmplY3QsIHVzZSB0aGUgdmFsdWUgZ2l2ZW4gdGhlIHNvcnRCeSBrZXlcbiAgICAgICAgICB2YXIgaXNBc2NlbmRpbmcgPSBzb3J0QXNjWyBzb3J0QnkgXSAhPT0gdW5kZWZpbmVkID8gc29ydEFzY1sgc29ydEJ5IF0gOiBzb3J0QXNjO1xuICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBpc0FzY2VuZGluZyA/IDEgOiAtMTtcbiAgICAgICAgICByZXR1cm4gKCBhID4gYiA/IDEgOiAtMSApICogZGlyZWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9O1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8vIGdldCBsYXlvdXQgbW9kZVxuICBwcm90by5fbW9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsYXlvdXRNb2RlID0gdGhpcy5vcHRpb25zLmxheW91dE1vZGU7XG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGVzWyBsYXlvdXRNb2RlIF07XG4gICAgaWYgKCAhbW9kZSApIHtcbiAgICAgIC8vIFRPRE8gY29uc29sZS5lcnJvclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnTm8gbGF5b3V0IG1vZGU6ICcgKyBsYXlvdXRNb2RlICk7XG4gICAgfVxuICAgIC8vIEhBQ0sgc3luYyBtb2RlJ3Mgb3B0aW9uc1xuICAgIC8vIGFueSBvcHRpb25zIHNldCBhZnRlciBpbml0IGZvciBsYXlvdXQgbW9kZSBuZWVkIHRvIGJlIHN5bmNlZFxuICAgIG1vZGUub3B0aW9ucyA9IHRoaXMub3B0aW9uc1sgbGF5b3V0TW9kZSBdO1xuICAgIHJldHVybiBtb2RlO1xuICB9O1xuXG4gIHByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIHRyaWdnZXIgb3JpZ2luYWwgcmVzZXQgbGF5b3V0XG4gICAgT3V0bGF5ZXIucHJvdG90eXBlLl9yZXNldExheW91dC5jYWxsKCB0aGlzICk7XG4gICAgdGhpcy5fbW9kZSgpLl9yZXNldExheW91dCgpO1xuICB9O1xuXG4gIHByb3RvLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggaXRlbSAgKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKCBpdGVtICk7XG4gIH07XG5cbiAgcHJvdG8uX21hbmFnZVN0YW1wID0gZnVuY3Rpb24oIHN0YW1wICkge1xuICAgIHRoaXMuX21vZGUoKS5fbWFuYWdlU3RhbXAoIHN0YW1wICk7XG4gIH07XG5cbiAgcHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZSgpLl9nZXRDb250YWluZXJTaXplKCk7XG4gIH07XG5cbiAgcHJvdG8ubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZSgpLm5lZWRzUmVzaXplTGF5b3V0KCk7XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkaW5nICYgcmVtb3ZpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvLyBIRUFEUyBVUCBvdmVyd3JpdGVzIGRlZmF1bHQgT3V0bGF5ZXIgYXBwZW5kZWRcbiAgcHJvdG8uYXBwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gICAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcbiAgICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZpbHRlciwgbGF5b3V0LCByZXZlYWwgbmV3IGl0ZW1zXG4gICAgdmFyIGZpbHRlcmVkSXRlbXMgPSB0aGlzLl9maWx0ZXJSZXZlYWxBZGRlZCggaXRlbXMgKTtcbiAgICAvLyBhZGQgdG8gZmlsdGVyZWRJdGVtc1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IHRoaXMuZmlsdGVyZWRJdGVtcy5jb25jYXQoIGZpbHRlcmVkSXRlbXMgKTtcbiAgfTtcblxuICAvLyBIRUFEUyBVUCBvdmVyd3JpdGVzIGRlZmF1bHQgT3V0bGF5ZXIgcHJlcGVuZGVkXG4gIHByb3RvLnByZXBlbmRlZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICB2YXIgaXRlbXMgPSB0aGlzLl9pdGVtaXplKCBlbGVtcyApO1xuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3RhcnQgbmV3IGxheW91dFxuICAgIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XG4gICAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XG4gICAgLy8gZmlsdGVyLCBsYXlvdXQsIHJldmVhbCBuZXcgaXRlbXNcbiAgICB2YXIgZmlsdGVyZWRJdGVtcyA9IHRoaXMuX2ZpbHRlclJldmVhbEFkZGVkKCBpdGVtcyApO1xuICAgIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xuICAgIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuZmlsdGVyZWRJdGVtcyApO1xuICAgIC8vIGFkZCB0byBpdGVtcyBhbmQgZmlsdGVyZWRJdGVtc1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IGZpbHRlcmVkSXRlbXMuY29uY2F0KCB0aGlzLmZpbHRlcmVkSXRlbXMgKTtcbiAgICB0aGlzLml0ZW1zID0gaXRlbXMuY29uY2F0KCB0aGlzLml0ZW1zICk7XG4gIH07XG5cbiAgcHJvdG8uX2ZpbHRlclJldmVhbEFkZGVkID0gZnVuY3Rpb24oIGl0ZW1zICkge1xuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX2ZpbHRlciggaXRlbXMgKTtcbiAgICB0aGlzLmhpZGUoIGZpbHRlcmVkLm5lZWRIaWRlICk7XG4gICAgLy8gcmV2ZWFsIGFsbCBuZXcgaXRlbXNcbiAgICB0aGlzLnJldmVhbCggZmlsdGVyZWQubWF0Y2hlcyApO1xuICAgIC8vIGxheW91dCBuZXcgaXRlbXMsIG5vIHRyYW5zaXRpb25cbiAgICB0aGlzLmxheW91dEl0ZW1zKCBmaWx0ZXJlZC5tYXRjaGVzLCB0cnVlICk7XG4gICAgcmV0dXJuIGZpbHRlcmVkLm1hdGNoZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZpbHRlciwgc29ydCwgYW5kIGxheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcbiAgICovXG4gIHByb3RvLmluc2VydCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gYXBwZW5kIGl0ZW0gZWxlbWVudHNcbiAgICB2YXIgaSwgaXRlbTtcbiAgICB2YXIgbGVuID0gaXRlbXMubGVuZ3RoO1xuICAgIGZvciAoIGk9MDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCBpdGVtLmVsZW1lbnQgKTtcbiAgICB9XG4gICAgLy8gZmlsdGVyIG5ldyBzdHVmZlxuICAgIHZhciBmaWx0ZXJlZEluc2VydEl0ZW1zID0gdGhpcy5fZmlsdGVyKCBpdGVtcyApLm1hdGNoZXM7XG4gICAgLy8gc2V0IGZsYWdcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGl0ZW1zW2ldLmlzTGF5b3V0SW5zdGFudCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuYXJyYW5nZSgpO1xuICAgIC8vIHJlc2V0IGZsYWdcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGRlbGV0ZSBpdGVtc1tpXS5pc0xheW91dEluc3RhbnQ7XG4gICAgfVxuICAgIHRoaXMucmV2ZWFsKCBmaWx0ZXJlZEluc2VydEl0ZW1zICk7XG4gIH07XG5cbiAgdmFyIF9yZW1vdmUgPSBwcm90by5yZW1vdmU7XG4gIHByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xuICAgIC8vIGRvIHJlZ3VsYXIgdGhpbmdcbiAgICBfcmVtb3ZlLmNhbGwoIHRoaXMsIGVsZW1zICk7XG4gICAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcbiAgICB2YXIgbGVuID0gcmVtb3ZlSXRlbXMgJiYgcmVtb3ZlSXRlbXMubGVuZ3RoO1xuICAgIC8vIHJlbW92ZSBlbGVtcyBmcm9tIGZpbHRlcmVkSXRlbXNcbiAgICBmb3IgKCB2YXIgaT0wOyBsZW4gJiYgaSA8IGxlbjsgaSsrICkge1xuICAgICAgdmFyIGl0ZW0gPSByZW1vdmVJdGVtc1tpXTtcbiAgICAgIC8vIHJlbW92ZSBpdGVtIGZyb20gY29sbGVjdGlvblxuICAgICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5maWx0ZXJlZEl0ZW1zLCBpdGVtICk7XG4gICAgfVxuICB9O1xuXG4gIHByb3RvLnNodWZmbGUgPSBmdW5jdGlvbigpIHtcbiAgICAvLyB1cGRhdGUgcmFuZG9tIHNvcnREYXRhXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XG4gICAgICBpdGVtLnNvcnREYXRhLnJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XG4gICAgfVxuICAgIHRoaXMub3B0aW9ucy5zb3J0QnkgPSAncmFuZG9tJztcbiAgICB0aGlzLl9zb3J0KCk7XG4gICAgdGhpcy5fbGF5b3V0KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIHRyaWdnZXIgZm4gd2l0aG91dCB0cmFuc2l0aW9uXG4gICAqIGtpbmQgb2YgaGFja3kgdG8gaGF2ZSB0aGlzIGluIHRoZSBmaXJzdCBwbGFjZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzXG4gICAqIEByZXR1cm5zIHJldFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvdG8uX25vVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCBmbiwgYXJncyApIHtcbiAgICAvLyBzYXZlIHRyYW5zaXRpb25EdXJhdGlvbiBiZWZvcmUgZGlzYWJsaW5nXG4gICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRoaXMub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247XG4gICAgLy8gZGlzYWJsZSB0cmFuc2l0aW9uXG4gICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgLy8gZG8gaXRcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBmbi5hcHBseSggdGhpcywgYXJncyApO1xuICAgIC8vIHJlLWVuYWJsZSB0cmFuc2l0aW9uIGZvciByZXZlYWxcbiAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfTtcblxuICAvLyAtLS0tLSBoZWxwZXIgbWV0aG9kcyAtLS0tLSAvL1xuXG4gIC8qKlxuICAgKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGZpbHRlcmVkIGl0ZW0gZWxlbWVudHNcbiAgICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICAgKi9cbiAgcHJvdG8uZ2V0RmlsdGVyZWRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZEl0ZW1zLm1hcCggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgICByZXR1cm4gaXRlbS5lbGVtZW50O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIC0tLS0tICAtLS0tLSAvL1xuXG4gIHJldHVybiBJc290b3BlO1xuXG59KSk7XG5cbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIE11dGF0aW9uT2JzZXJ2ZXIsIFV0aWwsIFdlYWtNYXAsIGdldENvbXB1dGVkU3R5bGUsIGdldENvbXB1dGVkU3R5bGVSWCxcbiAgICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgICBpbmRleE9mID0gW10uaW5kZXhPZiB8fCBmdW5jdGlvbihpdGVtKSB7IGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsgfSByZXR1cm4gLTE7IH07XG5cbiAgVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBVdGlsKCkge31cblxuICAgIFV0aWwucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uKGN1c3RvbSwgZGVmYXVsdHMpIHtcbiAgICAgIHZhciBrZXksIHZhbHVlO1xuICAgICAgZm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICAgICAgdmFsdWUgPSBkZWZhdWx0c1trZXldO1xuICAgICAgICBpZiAoY3VzdG9tW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgIGN1c3RvbVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXN0b207XG4gICAgfTtcblxuICAgIFV0aWwucHJvdG90eXBlLmlzTW9iaWxlID0gZnVuY3Rpb24oYWdlbnQpIHtcbiAgICAgIHJldHVybiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QoYWdlbnQpO1xuICAgIH07XG5cbiAgICBVdGlsLnByb3RvdHlwZS5jcmVhdGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBidWJibGUsIGNhbmNlbCwgZGV0YWlsKSB7XG4gICAgICB2YXIgY3VzdG9tRXZlbnQ7XG4gICAgICBpZiAoYnViYmxlID09IG51bGwpIHtcbiAgICAgICAgYnViYmxlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoY2FuY2VsID09IG51bGwpIHtcbiAgICAgICAgY2FuY2VsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZGV0YWlsID09IG51bGwpIHtcbiAgICAgICAgZGV0YWlsID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudCAhPSBudWxsKSB7XG4gICAgICAgIGN1c3RvbUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICAgIGN1c3RvbUV2ZW50LmluaXRDdXN0b21FdmVudChldmVudCwgYnViYmxlLCBjYW5jZWwsIGRldGFpbCk7XG4gICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpO1xuICAgICAgICBjdXN0b21FdmVudC5ldmVudFR5cGUgPSBldmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1c3RvbUV2ZW50LmV2ZW50TmFtZSA9IGV2ZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGN1c3RvbUV2ZW50O1xuICAgIH07XG5cbiAgICBVdGlsLnByb3RvdHlwZS5lbWl0RXZlbnQgPSBmdW5jdGlvbihlbGVtLCBldmVudCkge1xuICAgICAgaWYgKGVsZW0uZGlzcGF0Y2hFdmVudCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBlbGVtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgfSBlbHNlIGlmIChldmVudCBpbiAoZWxlbSAhPSBudWxsKSkge1xuICAgICAgICByZXR1cm4gZWxlbVtldmVudF0oKTtcbiAgICAgIH0gZWxzZSBpZiAoKFwib25cIiArIGV2ZW50KSBpbiAoZWxlbSAhPSBudWxsKSkge1xuICAgICAgICByZXR1cm4gZWxlbVtcIm9uXCIgKyBldmVudF0oKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVXRpbC5wcm90b3R5cGUuYWRkRXZlbnQgPSBmdW5jdGlvbihlbGVtLCBldmVudCwgZm4pIHtcbiAgICAgIGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZWxlbS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmIChlbGVtLmF0dGFjaEV2ZW50ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGVsZW0uYXR0YWNoRXZlbnQoXCJvblwiICsgZXZlbnQsIGZuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlbGVtW2V2ZW50XSA9IGZuO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBVdGlsLnByb3RvdHlwZS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKGVsZW0sIGV2ZW50LCBmbikge1xuICAgICAgaWYgKGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKGVsZW0uZGV0YWNoRXZlbnQgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZWxlbS5kZXRhY2hFdmVudChcIm9uXCIgKyBldmVudCwgZm4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSBlbGVtW2V2ZW50XTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVXRpbC5wcm90b3R5cGUuaW5uZXJIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgnaW5uZXJIZWlnaHQnIGluIHdpbmRvdykge1xuICAgICAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBVdGlsO1xuXG4gIH0pKCk7XG5cbiAgV2Vha01hcCA9IHRoaXMuV2Vha01hcCB8fCB0aGlzLk1veldlYWtNYXAgfHwgKFdlYWtNYXAgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICAgIHRoaXMua2V5cyA9IFtdO1xuICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcbiAgICB9XG5cbiAgICBXZWFrTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBpLCBpdGVtLCBqLCBsZW4sIHJlZjtcbiAgICAgIHJlZiA9IHRoaXMua2V5cztcbiAgICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICAgIGl0ZW0gPSByZWZbaV07XG4gICAgICAgIGlmIChpdGVtID09PSBrZXkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgV2Vha01hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGksIGl0ZW0sIGosIGxlbiwgcmVmO1xuICAgICAgcmVmID0gdGhpcy5rZXlzO1xuICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgICAgaXRlbSA9IHJlZltpXTtcbiAgICAgICAgaWYgKGl0ZW0gPT09IGtleSkge1xuICAgICAgICAgIHRoaXMudmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtleXMucHVzaChrZXkpO1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gV2Vha01hcDtcblxuICB9KSgpKTtcblxuICBNdXRhdGlvbk9ic2VydmVyID0gdGhpcy5NdXRhdGlvbk9ic2VydmVyIHx8IHRoaXMuV2Via2l0TXV0YXRpb25PYnNlcnZlciB8fCB0aGlzLk1vek11dGF0aW9uT2JzZXJ2ZXIgfHwgKE11dGF0aW9uT2JzZXJ2ZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gTXV0YXRpb25PYnNlcnZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTXV0YXRpb25PYnNlcnZlciBpcyBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgYnJvd3Nlci4nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignV09XLmpzIGNhbm5vdCBkZXRlY3QgZG9tIG11dGF0aW9ucywgcGxlYXNlIGNhbGwgLnN5bmMoKSBhZnRlciBsb2FkaW5nIG5ldyBjb250ZW50LicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIE11dGF0aW9uT2JzZXJ2ZXIubm90U3VwcG9ydGVkID0gdHJ1ZTtcblxuICAgIE11dGF0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbigpIHt9O1xuXG4gICAgcmV0dXJuIE11dGF0aW9uT2JzZXJ2ZXI7XG5cbiAgfSkoKSk7XG5cbiAgZ2V0Q29tcHV0ZWRTdHlsZSA9IHRoaXMuZ2V0Q29tcHV0ZWRTdHlsZSB8fCBmdW5jdGlvbihlbCwgcHNldWRvKSB7XG4gICAgdGhpcy5nZXRQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24ocHJvcCkge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIGlmIChwcm9wID09PSAnZmxvYXQnKSB7XG4gICAgICAgIHByb3AgPSAnc3R5bGVGbG9hdCc7XG4gICAgICB9XG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZVJYLnRlc3QocHJvcCkpIHtcbiAgICAgICAgcHJvcC5yZXBsYWNlKGdldENvbXB1dGVkU3R5bGVSWCwgZnVuY3Rpb24oXywgX2NoYXIpIHtcbiAgICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKChyZWYgPSBlbC5jdXJyZW50U3R5bGUpICE9IG51bGwgPyByZWZbcHJvcF0gOiB2b2lkIDApIHx8IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBnZXRDb21wdXRlZFN0eWxlUlggPSAvKFxcLShbYS16XSl7MX0pL2c7XG5cbiAgdGhpcy5XT1cgPSAoZnVuY3Rpb24oKSB7XG4gICAgV09XLnByb3RvdHlwZS5kZWZhdWx0cyA9IHtcbiAgICAgIGJveENsYXNzOiAnd293JyxcbiAgICAgIGFuaW1hdGVDbGFzczogJ2FuaW1hdGVkJyxcbiAgICAgIG9mZnNldDogMCxcbiAgICAgIG1vYmlsZTogdHJ1ZSxcbiAgICAgIGxpdmU6IHRydWUsXG4gICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgIHNjcm9sbENvbnRhaW5lcjogbnVsbFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBXT1cob3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG4gICAgICB0aGlzLnNjcm9sbENhbGxiYWNrID0gYmluZCh0aGlzLnNjcm9sbENhbGxiYWNrLCB0aGlzKTtcbiAgICAgIHRoaXMuc2Nyb2xsSGFuZGxlciA9IGJpbmQodGhpcy5zY3JvbGxIYW5kbGVyLCB0aGlzKTtcbiAgICAgIHRoaXMucmVzZXRBbmltYXRpb24gPSBiaW5kKHRoaXMucmVzZXRBbmltYXRpb24sIHRoaXMpO1xuICAgICAgdGhpcy5zdGFydCA9IGJpbmQodGhpcy5zdGFydCwgdGhpcyk7XG4gICAgICB0aGlzLnNjcm9sbGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuY29uZmlnID0gdGhpcy51dGlsKCkuZXh0ZW5kKG9wdGlvbnMsIHRoaXMuZGVmYXVsdHMpO1xuICAgICAgaWYgKG9wdGlvbnMuc2Nyb2xsQ29udGFpbmVyICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5jb25maWcuc2Nyb2xsQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLnNjcm9sbENvbnRhaW5lcik7XG4gICAgICB9XG4gICAgICB0aGlzLmFuaW1hdGlvbk5hbWVDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICB0aGlzLndvd0V2ZW50ID0gdGhpcy51dGlsKCkuY3JlYXRlRXZlbnQodGhpcy5jb25maWcuYm94Q2xhc3MpO1xuICAgIH1cblxuICAgIFdPVy5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIHRoaXMuZWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBpZiAoKHJlZiA9IGRvY3VtZW50LnJlYWR5U3RhdGUpID09PSBcImludGVyYWN0aXZlXCIgfHwgcmVmID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51dGlsKCkuYWRkRXZlbnQoZG9jdW1lbnQsICdET01Db250ZW50TG9hZGVkJywgdGhpcy5zdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hlZCA9IFtdO1xuICAgIH07XG5cbiAgICBXT1cucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYm94LCBqLCBsZW4sIHJlZjtcbiAgICAgIHRoaXMuc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5ib3hlcyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZWYgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5cIiArIHRoaXMuY29uZmlnLmJveENsYXNzKTtcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBib3ggPSByZWZbal07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGJveCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5hbGwgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBqLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgICAgcmVmID0gdGhpcy5ib3hlcztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBib3ggPSByZWZbal07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGJveCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KS5jYWxsKHRoaXMpO1xuICAgICAgaWYgKHRoaXMuYm94ZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKCkpIHtcbiAgICAgICAgICB0aGlzLnJlc2V0U3R5bGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWYgPSB0aGlzLmJveGVzO1xuICAgICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYm94ID0gcmVmW2pdO1xuICAgICAgICAgICAgdGhpcy5hcHBseVN0eWxlKGJveCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuZGlzYWJsZWQoKSkge1xuICAgICAgICB0aGlzLnV0aWwoKS5hZGRFdmVudCh0aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXIgfHwgd2luZG93LCAnc2Nyb2xsJywgdGhpcy5zY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgdGhpcy51dGlsKCkuYWRkRXZlbnQod2luZG93LCAncmVzaXplJywgdGhpcy5zY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMuc2Nyb2xsQ2FsbGJhY2ssIDUwKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5saXZlKSB7XG4gICAgICAgIHJldHVybiBuZXcgTXV0YXRpb25PYnNlcnZlcigoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVjb3Jkcykge1xuICAgICAgICAgICAgdmFyIGssIGxlbjEsIG5vZGUsIHJlY29yZCwgcmVzdWx0cztcbiAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoayA9IDAsIGxlbjEgPSByZWNvcmRzLmxlbmd0aDsgayA8IGxlbjE7IGsrKykge1xuICAgICAgICAgICAgICByZWNvcmQgPSByZWNvcmRzW2tdO1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBsLCBsZW4yLCByZWYxLCByZXN1bHRzMTtcbiAgICAgICAgICAgICAgICByZWYxID0gcmVjb3JkLmFkZGVkTm9kZXMgfHwgW107XG4gICAgICAgICAgICAgICAgcmVzdWx0czEgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGwgPSAwLCBsZW4yID0gcmVmMS5sZW5ndGg7IGwgPCBsZW4yOyBsKyspIHtcbiAgICAgICAgICAgICAgICAgIG5vZGUgPSByZWYxW2xdO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0czEucHVzaCh0aGlzLmRvU3luYyhub2RlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzMTtcbiAgICAgICAgICAgICAgfSkuY2FsbChfdGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcykpLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge1xuICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBXT1cucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICB0aGlzLnV0aWwoKS5yZW1vdmVFdmVudCh0aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXIgfHwgd2luZG93LCAnc2Nyb2xsJywgdGhpcy5zY3JvbGxIYW5kbGVyKTtcbiAgICAgIHRoaXMudXRpbCgpLnJlbW92ZUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuc2Nyb2xsSGFuZGxlcik7XG4gICAgICBpZiAodGhpcy5pbnRlcnZhbCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBXT1cucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICBpZiAoTXV0YXRpb25PYnNlcnZlci5ub3RTdXBwb3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9TeW5jKHRoaXMuZWxlbWVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFdPVy5wcm90b3R5cGUuZG9TeW5jID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgdmFyIGJveCwgaiwgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQ7XG4gICAgICByZWYgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIgKyB0aGlzLmNvbmZpZy5ib3hDbGFzcyk7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgYm94ID0gcmVmW2pdO1xuICAgICAgICBpZiAoaW5kZXhPZi5jYWxsKHRoaXMuYWxsLCBib3gpIDwgMCkge1xuICAgICAgICAgIHRoaXMuYm94ZXMucHVzaChib3gpO1xuICAgICAgICAgIHRoaXMuYWxsLnB1c2goYm94KTtcbiAgICAgICAgICBpZiAodGhpcy5zdG9wcGVkIHx8IHRoaXMuZGlzYWJsZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldFN0eWxlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlTdHlsZShib3gsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHRzLnB1c2godGhpcy5zY3JvbGxlZCA9IHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdHMucHVzaCh2b2lkIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuXG4gICAgV09XLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24oYm94KSB7XG4gICAgICB0aGlzLmFwcGx5U3R5bGUoYm94KTtcbiAgICAgIGJveC5jbGFzc05hbWUgPSBib3guY2xhc3NOYW1lICsgXCIgXCIgKyB0aGlzLmNvbmZpZy5hbmltYXRlQ2xhc3M7XG4gICAgICBpZiAodGhpcy5jb25maWcuY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNvbmZpZy5jYWxsYmFjayhib3gpO1xuICAgICAgfVxuICAgICAgdGhpcy51dGlsKCkuZW1pdEV2ZW50KGJveCwgdGhpcy53b3dFdmVudCk7XG4gICAgICB0aGlzLnV0aWwoKS5hZGRFdmVudChib3gsICdhbmltYXRpb25lbmQnLCB0aGlzLnJlc2V0QW5pbWF0aW9uKTtcbiAgICAgIHRoaXMudXRpbCgpLmFkZEV2ZW50KGJveCwgJ29hbmltYXRpb25lbmQnLCB0aGlzLnJlc2V0QW5pbWF0aW9uKTtcbiAgICAgIHRoaXMudXRpbCgpLmFkZEV2ZW50KGJveCwgJ3dlYmtpdEFuaW1hdGlvbkVuZCcsIHRoaXMucmVzZXRBbmltYXRpb24pO1xuICAgICAgdGhpcy51dGlsKCkuYWRkRXZlbnQoYm94LCAnTVNBbmltYXRpb25FbmQnLCB0aGlzLnJlc2V0QW5pbWF0aW9uKTtcbiAgICAgIHJldHVybiBib3g7XG4gICAgfTtcblxuICAgIFdPVy5wcm90b3R5cGUuYXBwbHlTdHlsZSA9IGZ1bmN0aW9uKGJveCwgaGlkZGVuKSB7XG4gICAgICB2YXIgZGVsYXksIGR1cmF0aW9uLCBpdGVyYXRpb247XG4gICAgICBkdXJhdGlvbiA9IGJveC5nZXRBdHRyaWJ1dGUoJ2RhdGEtd293LWR1cmF0aW9uJyk7XG4gICAgICBkZWxheSA9IGJveC5nZXRBdHRyaWJ1dGUoJ2RhdGEtd293LWRlbGF5Jyk7XG4gICAgICBpdGVyYXRpb24gPSBib3guZ2V0QXR0cmlidXRlKCdkYXRhLXdvdy1pdGVyYXRpb24nKTtcbiAgICAgIHJldHVybiB0aGlzLmFuaW1hdGUoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuY3VzdG9tU3R5bGUoYm94LCBoaWRkZW4sIGR1cmF0aW9uLCBkZWxheSwgaXRlcmF0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgV09XLnByb3RvdHlwZS5hbmltYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnIGluIHdpbmRvdykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgV09XLnByb3RvdHlwZS5yZXNldFN0eWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYm94LCBqLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgIHJlZiA9IHRoaXMuYm94ZXM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgYm94ID0gcmVmW2pdO1xuICAgICAgICByZXN1bHRzLnB1c2goYm94LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIFdPVy5wcm90b3R5cGUucmVzZXRBbmltYXRpb24gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIHRhcmdldDtcbiAgICAgIGlmIChldmVudC50eXBlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignYW5pbWF0aW9uZW5kJykgPj0gMCkge1xuICAgICAgICB0YXJnZXQgPSBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5jbGFzc05hbWUgPSB0YXJnZXQuY2xhc3NOYW1lLnJlcGxhY2UodGhpcy5jb25maWcuYW5pbWF0ZUNsYXNzLCAnJykudHJpbSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBXT1cucHJvdG90eXBlLmN1c3RvbVN0eWxlID0gZnVuY3Rpb24oYm94LCBoaWRkZW4sIGR1cmF0aW9uLCBkZWxheSwgaXRlcmF0aW9uKSB7XG4gICAgICBpZiAoaGlkZGVuKSB7XG4gICAgICAgIHRoaXMuY2FjaGVBbmltYXRpb25OYW1lKGJveCk7XG4gICAgICB9XG4gICAgICBib3guc3R5bGUudmlzaWJpbGl0eSA9IGhpZGRlbiA/ICdoaWRkZW4nIDogJ3Zpc2libGUnO1xuICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgIHRoaXMudmVuZG9yU2V0KGJveC5zdHlsZSwge1xuICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBkdXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWxheSkge1xuICAgICAgICB0aGlzLnZlbmRvclNldChib3guc3R5bGUsIHtcbiAgICAgICAgICBhbmltYXRpb25EZWxheTogZGVsYXlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0aW9uKSB7XG4gICAgICAgIHRoaXMudmVuZG9yU2V0KGJveC5zdHlsZSwge1xuICAgICAgICAgIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiBpdGVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLnZlbmRvclNldChib3guc3R5bGUsIHtcbiAgICAgICAgYW5pbWF0aW9uTmFtZTogaGlkZGVuID8gJ25vbmUnIDogdGhpcy5jYWNoZWRBbmltYXRpb25OYW1lKGJveClcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJveDtcbiAgICB9O1xuXG4gICAgV09XLnByb3RvdHlwZS52ZW5kb3JzID0gW1wibW96XCIsIFwid2Via2l0XCJdO1xuXG4gICAgV09XLnByb3RvdHlwZS52ZW5kb3JTZXQgPSBmdW5jdGlvbihlbGVtLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgbmFtZSwgcmVzdWx0cywgdmFsdWUsIHZlbmRvcjtcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAobmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHZhbHVlID0gcHJvcGVydGllc1tuYW1lXTtcbiAgICAgICAgZWxlbVtcIlwiICsgbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdHMxO1xuICAgICAgICAgIHJlZiA9IHRoaXMudmVuZG9ycztcbiAgICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgdmVuZG9yID0gcmVmW2pdO1xuICAgICAgICAgICAgcmVzdWx0czEucHVzaChlbGVtW1wiXCIgKyB2ZW5kb3IgKyAobmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSkgKyAobmFtZS5zdWJzdHIoMSkpXSA9IHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgICB9KS5jYWxsKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBXT1cucHJvdG90eXBlLnZlbmRvckNTUyA9IGZ1bmN0aW9uKGVsZW0sIHByb3BlcnR5KSB7XG4gICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdCwgc3R5bGUsIHZlbmRvcjtcbiAgICAgIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgIHJlc3VsdCA9IHN0eWxlLmdldFByb3BlcnR5Q1NTVmFsdWUocHJvcGVydHkpO1xuICAgICAgcmVmID0gdGhpcy52ZW5kb3JzO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHZlbmRvciA9IHJlZltqXTtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHN0eWxlLmdldFByb3BlcnR5Q1NTVmFsdWUoXCItXCIgKyB2ZW5kb3IgKyBcIi1cIiArIHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIFdPVy5wcm90b3R5cGUuYW5pbWF0aW9uTmFtZSA9IGZ1bmN0aW9uKGJveCkge1xuICAgICAgdmFyIGFuaW1hdGlvbk5hbWUsIGVycm9yO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYW5pbWF0aW9uTmFtZSA9IHRoaXMudmVuZG9yQ1NTKGJveCwgJ2FuaW1hdGlvbi1uYW1lJykuY3NzVGV4dDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGFuaW1hdGlvbk5hbWUgPSBnZXRDb21wdXRlZFN0eWxlKGJveCkuZ2V0UHJvcGVydHlWYWx1ZSgnYW5pbWF0aW9uLW5hbWUnKTtcbiAgICAgIH1cbiAgICAgIGlmIChhbmltYXRpb25OYW1lID09PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbk5hbWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFdPVy5wcm90b3R5cGUuY2FjaGVBbmltYXRpb25OYW1lID0gZnVuY3Rpb24oYm94KSB7XG4gICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25OYW1lQ2FjaGUuc2V0KGJveCwgdGhpcy5hbmltYXRpb25OYW1lKGJveCkpO1xuICAgIH07XG5cbiAgICBXT1cucHJvdG90eXBlLmNhY2hlZEFuaW1hdGlvbk5hbWUgPSBmdW5jdGlvbihib3gpIHtcbiAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbk5hbWVDYWNoZS5nZXQoYm94KTtcbiAgICB9O1xuXG4gICAgV09XLnByb3RvdHlwZS5zY3JvbGxIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGxlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIFdPVy5wcm90b3R5cGUuc2Nyb2xsQ2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBib3g7XG4gICAgICBpZiAodGhpcy5zY3JvbGxlZCkge1xuICAgICAgICB0aGlzLnNjcm9sbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYm94ZXMgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgIHJlZiA9IHRoaXMuYm94ZXM7XG4gICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYm94ID0gcmVmW2pdO1xuICAgICAgICAgICAgaWYgKCEoYm94KSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZShib3gpKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2hvdyhib3gpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChib3gpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSkuY2FsbCh0aGlzKTtcbiAgICAgICAgaWYgKCEodGhpcy5ib3hlcy5sZW5ndGggfHwgdGhpcy5jb25maWcubGl2ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgV09XLnByb3RvdHlwZS5vZmZzZXRUb3AgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICB2YXIgdG9wO1xuICAgICAgd2hpbGUgKGVsZW1lbnQub2Zmc2V0VG9wID09PSB2b2lkIDApIHtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIHRvcCA9IGVsZW1lbnQub2Zmc2V0VG9wO1xuICAgICAgd2hpbGUgKGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCkge1xuICAgICAgICB0b3AgKz0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9wO1xuICAgIH07XG5cbiAgICBXT1cucHJvdG90eXBlLmlzVmlzaWJsZSA9IGZ1bmN0aW9uKGJveCkge1xuICAgICAgdmFyIGJvdHRvbSwgb2Zmc2V0LCB0b3AsIHZpZXdCb3R0b20sIHZpZXdUb3A7XG4gICAgICBvZmZzZXQgPSBib3guZ2V0QXR0cmlidXRlKCdkYXRhLXdvdy1vZmZzZXQnKSB8fCB0aGlzLmNvbmZpZy5vZmZzZXQ7XG4gICAgICB2aWV3VG9wID0gKHRoaXMuY29uZmlnLnNjcm9sbENvbnRhaW5lciAmJiB0aGlzLmNvbmZpZy5zY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wKSB8fCB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICB2aWV3Qm90dG9tID0gdmlld1RvcCArIE1hdGgubWluKHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQsIHRoaXMudXRpbCgpLmlubmVySGVpZ2h0KCkpIC0gb2Zmc2V0O1xuICAgICAgdG9wID0gdGhpcy5vZmZzZXRUb3AoYm94KTtcbiAgICAgIGJvdHRvbSA9IHRvcCArIGJveC5jbGllbnRIZWlnaHQ7XG4gICAgICByZXR1cm4gdG9wIDw9IHZpZXdCb3R0b20gJiYgYm90dG9tID49IHZpZXdUb3A7XG4gICAgfTtcblxuICAgIFdPVy5wcm90b3R5cGUudXRpbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3V0aWwgIT0gbnVsbCA/IHRoaXMuX3V0aWwgOiB0aGlzLl91dGlsID0gbmV3IFV0aWwoKTtcbiAgICB9O1xuXG4gICAgV09XLnByb3RvdHlwZS5kaXNhYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICF0aGlzLmNvbmZpZy5tb2JpbGUgJiYgdGhpcy51dGlsKCkuaXNNb2JpbGUobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgfTtcblxuICAgIHJldHVybiBXT1c7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIi8qIVxyXG4gKiBqUXVlcnkgU2Nyb2xsaWZ5XHJcbiAqIFZlcnNpb24gMS4wLjIwXHJcbiAqXHJcbiAqIFJlcXVpcmVzOlxyXG4gKiAtIGpRdWVyeSAxLjcgb3IgaGlnaGVyXHJcbiAqXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9sdWtlaGFhcy9TY3JvbGxpZnlcclxuICpcclxuICogQ29weXJpZ2h0IDIwMTYsIEx1a2UgSGFhc1xyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcblxyXG5cclxuXHJcbmlmIHRvdWNoU2Nyb2xsIGlzIGZhbHNlIC0gdXBkYXRlIGluZGV4XHJcblxyXG4gKi9cclxuKGZ1bmN0aW9uIChnbG9iYWwsZmFjdG9yeSkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuICAgIGRlZmluZShbJ2pxdWVyeSddLCBmdW5jdGlvbigkKSB7XHJcbiAgICAgIHJldHVybiBmYWN0b3J5KCQsIGdsb2JhbCwgZ2xvYmFsLmRvY3VtZW50KTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICAgIC8vIE5vZGUvQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSwgZ2xvYmFsLCBnbG9iYWwuZG9jdW1lbnQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcclxuICAgIGZhY3RvcnkoalF1ZXJ5LCBnbG9iYWwsIGdsb2JhbC5kb2N1bWVudCk7XHJcbiAgfVxyXG59KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG4gIHZhciBoZWlnaHRzID0gW10sXHJcbiAgICBuYW1lcyA9IFtdLFxyXG4gICAgZWxlbWVudHMgPSBbXSxcclxuICAgIG92ZXJmbG93ID0gW10sXHJcbiAgICBpbmRleCA9IDAsXHJcbiAgICBjdXJyZW50SW5kZXggPSAwLFxyXG4gICAgaW50ZXJzdGl0aWFsSW5kZXggPSAxLFxyXG4gICAgaGFzTG9jYXRpb24gPSBmYWxzZSxcclxuICAgIHRpbWVvdXRJZCxcclxuICAgIHRpbWVvdXRJZDIsXHJcbiAgICAkd2luZG93ID0gJCh3aW5kb3cpLFxyXG4gICAgcG9ydEhlaWdodCxcclxuICAgIHRvcCA9ICR3aW5kb3cuc2Nyb2xsVG9wKCksXHJcbiAgICBzY3JvbGxhYmxlID0gZmFsc2UsXHJcbiAgICBsb2NrZWQgPSBmYWxzZSxcclxuICAgIHNjcm9sbGVkID0gZmFsc2UsXHJcbiAgICBtYW51YWxTY3JvbGwsXHJcbiAgICBzd2lwZVNjcm9sbCxcclxuICAgIHV0aWwsXHJcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxyXG4gICAgc2Nyb2xsU2FtcGxlcyA9IFtdLFxyXG4gICAgc2Nyb2xsVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxyXG4gICAgZmlyc3RMb2FkID0gdHJ1ZSxcclxuICAgIGluaXRpYWxpc2VkID0gZmFsc2UsXHJcbiAgICBkZXN0aW5hdGlvbiA9IDAsXHJcbiAgICB3aGVlbEV2ZW50ID0gJ29ud2hlZWwnIGluIGRvY3VtZW50ID8gJ3doZWVsJyA6IGRvY3VtZW50Lm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID8gJ21vdXNld2hlZWwnIDogJ0RPTU1vdXNlU2Nyb2xsJyxcclxuICAgIHNldHRpbmdzID0ge1xyXG4gICAgICAvL3NlY3Rpb24gc2hvdWxkIGJlIGFuIGlkZW50aWZpZXIgdGhhdCBpcyB0aGUgc2FtZSBmb3IgZWFjaCBzZWN0aW9uXHJcbiAgICAgIHNlY3Rpb246IFwiLnNlY3Rpb25cIixcclxuICAgICAgc2VjdGlvbk5hbWU6IFwic2VjdGlvbi1uYW1lXCIsXHJcbiAgICAgIGludGVyc3RpdGlhbFNlY3Rpb246IFwiXCIsXHJcbiAgICAgIGVhc2luZzogXCJlYXNlT3V0RXhwb1wiLFxyXG4gICAgICBzY3JvbGxTcGVlZDogMTEwMCxcclxuICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICBzY3JvbGxiYXJzOiB0cnVlLFxyXG4gICAgICB0YXJnZXQ6XCJodG1sLGJvZHlcIixcclxuICAgICAgc3RhbmRhcmRTY3JvbGxFbGVtZW50czogZmFsc2UsXHJcbiAgICAgIHNldEhlaWdodHM6IHRydWUsXHJcbiAgICAgIG92ZXJmbG93U2Nyb2xsOnRydWUsXHJcbiAgICAgIHVwZGF0ZUhhc2g6IHRydWUsXHJcbiAgICAgIHRvdWNoU2Nyb2xsOnRydWUsXHJcbiAgICAgIGJlZm9yZTpmdW5jdGlvbigpIHt9LFxyXG4gICAgICBhZnRlcjpmdW5jdGlvbigpIHt9LFxyXG4gICAgICBhZnRlclJlc2l6ZTpmdW5jdGlvbigpIHt9LFxyXG4gICAgICBhZnRlclJlbmRlcjpmdW5jdGlvbigpIHt9XHJcbiAgICB9O1xyXG4gIGZ1bmN0aW9uIGdldHBvcnRIZWlnaHQoKSB7XHJcbiAgICByZXR1cm4gKHdpbmRvdy5pbm5lckhlaWdodCArIHNldHRpbmdzLm9mZnNldCk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGFuaW1hdGVTY3JvbGwoaW5kZXgsaW5zdGFudCxjYWxsYmFja3MsdG9Ub3ApIHtcclxuICAgIGlmKGN1cnJlbnRJbmRleD09PWluZGV4KSB7XHJcbiAgICAgIGNhbGxiYWNrcyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYoZGlzYWJsZWQ9PT10cnVlKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYobmFtZXNbaW5kZXhdKSB7XHJcbiAgICAgIHNjcm9sbGFibGUgPSBmYWxzZTtcclxuICAgICAgaWYoZmlyc3RMb2FkPT09dHJ1ZSkge1xyXG4gICAgICAgIGZpcnN0TG9hZCA9IGZhbHNlO1xyXG4gICAgICAgIHNldHRpbmdzLmFmdGVyUmVuZGVyKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYoY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgaWYoIHR5cGVvZiBzZXR0aW5ncy5iZWZvcmUgPT0gJ2Z1bmN0aW9uJyAmJiBzZXR0aW5ncy5iZWZvcmUoaW5kZXgsZWxlbWVudHMpID09PSBmYWxzZSApe1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGludGVyc3RpdGlhbEluZGV4ID0gMTtcclxuICAgICAgZGVzdGluYXRpb24gPSAoIWluZGV4KSA/IDAgOiBoZWlnaHRzW2luZGV4XTtcclxuICAgICAgaWYoZmlyc3RMb2FkPT09ZmFsc2UgJiYgY3VycmVudEluZGV4PmluZGV4ICYmIHRvVG9wPT09ZmFsc2UpIHtcclxuICAgICAgICAvL1dlJ3JlIGdvaW5nIGJhY2t3YXJkc1xyXG4gICAgICAgIGlmKG92ZXJmbG93W2luZGV4XSkge1xyXG4gICAgICAgICAgcG9ydEhlaWdodCA9IGdldHBvcnRIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICBpbnRlcnN0aXRpYWxJbmRleCA9IHBhcnNlSW50KGVsZW1lbnRzW2luZGV4XS5vdXRlckhlaWdodCgpL3BvcnRIZWlnaHQpO1xyXG5cclxuICAgICAgICAgIGRlc3RpbmF0aW9uID0gcGFyc2VJbnQoaGVpZ2h0c1tpbmRleF0pKyhlbGVtZW50c1tpbmRleF0ub3V0ZXJIZWlnaHQoKS1wb3J0SGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgICBpZihzZXR0aW5ncy51cGRhdGVIYXNoICYmIHNldHRpbmdzLnNlY3Rpb25OYW1lICYmICEoZmlyc3RMb2FkPT09dHJ1ZSAmJiBpbmRleD09PTApKSB7XHJcbiAgICAgICAgaWYoaGlzdG9yeS5wdXNoU3RhdGUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCBuYW1lc1tpbmRleF0pO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgaWYod2luZG93LmNvbnNvbGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNjcm9sbGlmeSB3YXJuaW5nOiBQYWdlIG11c3QgYmUgaG9zdGVkIHRvIG1hbmlwdWxhdGUgdGhlIGhhc2ggdmFsdWUuXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBuYW1lc1tpbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcclxuICAgICAgaWYoaW5zdGFudCkge1xyXG4gICAgICAgICQoc2V0dGluZ3MudGFyZ2V0KS5zdG9wKCkuc2Nyb2xsVG9wKGRlc3RpbmF0aW9uKTtcclxuICAgICAgICBpZihjYWxsYmFja3MpIHtcclxuICAgICAgICAgIHNldHRpbmdzLmFmdGVyKGluZGV4LGVsZW1lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9ja2VkID0gdHJ1ZTtcclxuICAgICAgICBpZiggJCgpLnZlbG9jaXR5ICkge1xyXG4gICAgICAgICAgJChzZXR0aW5ncy50YXJnZXQpLnN0b3AoKS52ZWxvY2l0eSgnc2Nyb2xsJywge1xyXG4gICAgICAgICAgICBkdXJhdGlvbjogc2V0dGluZ3Muc2Nyb2xsU3BlZWQsXHJcbiAgICAgICAgICAgIGVhc2luZzogc2V0dGluZ3MuZWFzaW5nLFxyXG4gICAgICAgICAgICBvZmZzZXQ6IGRlc3RpbmF0aW9uLFxyXG4gICAgICAgICAgICBtb2JpbGVIQTogZmFsc2VcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkKHNldHRpbmdzLnRhcmdldCkuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6IGRlc3RpbmF0aW9uXHJcbiAgICAgICAgICB9LCBzZXR0aW5ncy5zY3JvbGxTcGVlZCxzZXR0aW5ncy5lYXNpbmcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYod2luZG93LmxvY2F0aW9uLmhhc2gubGVuZ3RoICYmIHNldHRpbmdzLnNlY3Rpb25OYW1lICYmIHdpbmRvdy5jb25zb2xlKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZigkKHdpbmRvdy5sb2NhdGlvbi5oYXNoKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJTY3JvbGxpZnkgd2FybmluZzogSUQgbWF0Y2hlcyBoYXNoIHZhbHVlIC0gdGhpcyB3aWxsIGNhdXNlIHRoZSBwYWdlIHRvIGFuY2hvci5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQoc2V0dGluZ3MudGFyZ2V0KS5wcm9taXNlKCkuZG9uZShmdW5jdGlvbigpe1xyXG4gICAgICAgICAgbG9ja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICBmaXJzdExvYWQgPSBmYWxzZTtcclxuICAgICAgICAgIGlmKGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICBzZXR0aW5ncy5hZnRlcihpbmRleCxlbGVtZW50cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpc0FjY2VsZXJhdGluZyhzYW1wbGVzKSB7XHJcbiAgICBmdW5jdGlvbiBhdmVyYWdlKG51bSkge1xyXG4gICAgICB2YXIgc3VtID0gMDtcclxuXHJcbiAgICAgIHZhciBsYXN0RWxlbWVudHMgPSBzYW1wbGVzLnNsaWNlKE1hdGgubWF4KHNhbXBsZXMubGVuZ3RoIC0gbnVtLCAxKSk7XHJcblxyXG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGFzdEVsZW1lbnRzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgIHN1bSArPSBsYXN0RWxlbWVudHNbaV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBNYXRoLmNlaWwoc3VtL251bSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGF2RW5kID0gYXZlcmFnZSgxMCk7XHJcbiAgICB2YXIgYXZNaWRkbGUgPSBhdmVyYWdlKDcwKTtcclxuXHJcbiAgICBpZihhdkVuZCA+PSBhdk1pZGRsZSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbiAgdmFyIHNjcm9sbGlmeSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIGluaXRpYWxpc2VkID0gdHJ1ZTtcclxuICAgICQuZWFzaW5nWydlYXNlT3V0RXhwbyddID0gZnVuY3Rpb24oeCwgdCwgYiwgYywgZCkge1xyXG4gICAgICByZXR1cm4gKHQ9PWQpID8gYitjIDogYyAqICgtTWF0aC5wb3coMiwgLTEwICogdC9kKSArIDEpICsgYjtcclxuICAgIH07XHJcblxyXG4gICAgbWFudWFsU2Nyb2xsID0ge1xyXG4gICAgICBoYW5kbGVNb3VzZWRvd246ZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYoZGlzYWJsZWQ9PT10cnVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2Nyb2xsYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHNjcm9sbGVkID0gZmFsc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIGhhbmRsZU1vdXNldXA6ZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYoZGlzYWJsZWQ9PT10cnVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2Nyb2xsYWJsZSA9IHRydWU7XHJcbiAgICAgICAgaWYoc2Nyb2xsZWQpIHtcclxuICAgICAgICAgIC8vaW5zdGFudCxjYWxsYmFja3NcclxuICAgICAgICAgIG1hbnVhbFNjcm9sbC5jYWxjdWxhdGVOZWFyZXN0KGZhbHNlLHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgaGFuZGxlU2Nyb2xsOmZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmKGRpc2FibGVkPT09dHJ1ZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRpbWVvdXRJZCl7XHJcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgIHNjcm9sbGVkID0gdHJ1ZTtcclxuICAgICAgICAgIGlmKHNjcm9sbGFibGU9PT1mYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzY3JvbGxhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAvL2luc3RhbnQsY2FsbGJhY2tzXHJcbiAgICAgICAgICBtYW51YWxTY3JvbGwuY2FsY3VsYXRlTmVhcmVzdChmYWxzZSx0cnVlKTtcclxuICAgICAgICB9LCAyMDApO1xyXG4gICAgICB9LFxyXG4gICAgICBjYWxjdWxhdGVOZWFyZXN0OmZ1bmN0aW9uKGluc3RhbnQsY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgdG9wID0gJHdpbmRvdy5zY3JvbGxUb3AoKTtcclxuICAgICAgICB2YXIgaSA9MSxcclxuICAgICAgICAgIG1heCA9IGhlaWdodHMubGVuZ3RoLFxyXG4gICAgICAgICAgY2xvc2VzdCA9IDAsXHJcbiAgICAgICAgICBwcmV2ID0gTWF0aC5hYnMoaGVpZ2h0c1swXSAtIHRvcCksXHJcbiAgICAgICAgICBkaWZmO1xyXG4gICAgICAgIGZvcig7aTxtYXg7aSsrKSB7XHJcbiAgICAgICAgICBkaWZmID0gTWF0aC5hYnMoaGVpZ2h0c1tpXSAtIHRvcCk7XHJcblxyXG4gICAgICAgICAgaWYoZGlmZiA8IHByZXYpIHtcclxuICAgICAgICAgICAgcHJldiA9IGRpZmY7XHJcbiAgICAgICAgICAgIGNsb3Nlc3QgPSBpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZigoYXRCb3R0b20oKSAmJiBjbG9zZXN0PmluZGV4KSB8fCBhdFRvcCgpKSB7XHJcbiAgICAgICAgICBpbmRleCA9IGNsb3Nlc3Q7XHJcbiAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXHJcbiAgICAgICAgICBhbmltYXRlU2Nyb2xsKGNsb3Nlc3QsaW5zdGFudCxjYWxsYmFja3MsZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgd2hlZWxIYW5kbGVyOmZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZihkaXNhYmxlZD09PXRydWUpIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZihzZXR0aW5ncy5zdGFuZGFyZFNjcm9sbEVsZW1lbnRzKSB7XHJcbiAgICAgICAgICBpZigkKGUudGFyZ2V0KS5pcyhzZXR0aW5ncy5zdGFuZGFyZFNjcm9sbEVsZW1lbnRzKSB8fCAkKGUudGFyZ2V0KS5jbG9zZXN0KHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsRWxlbWVudHMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIW92ZXJmbG93W2luZGV4XSkge1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY3VycmVudFNjcm9sbFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcblxyXG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICB2YXIgdmFsdWU7XHJcbiAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhIHx8IC1lLm9yaWdpbmFsRXZlbnQuZGVsdGFZIHx8IC1lLm9yaWdpbmFsRXZlbnQuZGV0YWlsO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gZS53aGVlbERlbHRhIHx8IC1lLmRlbHRhWSB8fCAtZS5kZXRhaWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkZWx0YSA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCB2YWx1ZSkpO1xyXG5cclxuICAgICAgICAvL2RlbHRhID0gZGVsdGEgfHwgLWUub3JpZ2luYWxFdmVudC5kZXRhaWwgLyAzIHx8IGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhIC8gMTIwO1xyXG5cclxuICAgICAgICBpZihzY3JvbGxTYW1wbGVzLmxlbmd0aCA+IDE0OSl7XHJcbiAgICAgICAgICBzY3JvbGxTYW1wbGVzLnNoaWZ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vc2Nyb2xsU2FtcGxlcy5wdXNoKE1hdGguYWJzKGRlbHRhKjEwKSk7XHJcbiAgICAgICAgc2Nyb2xsU2FtcGxlcy5wdXNoKE1hdGguYWJzKHZhbHVlKSk7XHJcblxyXG4gICAgICAgIGlmKChjdXJyZW50U2Nyb2xsVGltZS1zY3JvbGxUaW1lKSA+IDIwMCl7XHJcbiAgICAgICAgICBzY3JvbGxTYW1wbGVzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNjcm9sbFRpbWUgPSBjdXJyZW50U2Nyb2xsVGltZTtcclxuXHJcblxyXG4gICAgICAgIGlmKGxvY2tlZCkge1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihkZWx0YTwwKSB7XHJcbiAgICAgICAgICBpZihpbmRleDxoZWlnaHRzLmxlbmd0aC0xKSB7XHJcbiAgICAgICAgICAgIGlmKGF0Qm90dG9tKCkpIHtcclxuICAgICAgICAgICAgICBpZihpc0FjY2VsZXJhdGluZyhzY3JvbGxTYW1wbGVzKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgIGxvY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LGZhbHNlLHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZihkZWx0YT4wKSB7XHJcbiAgICAgICAgICBpZihpbmRleD4wKSB7XHJcbiAgICAgICAgICAgIGlmKGF0VG9wKCkpIHtcclxuICAgICAgICAgICAgICBpZihpc0FjY2VsZXJhdGluZyhzY3JvbGxTYW1wbGVzKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXgtLTtcclxuICAgICAgICAgICAgICAgIGxvY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LGZhbHNlLHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfSxcclxuICAgICAga2V5SGFuZGxlcjpmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYoZGlzYWJsZWQ9PT10cnVlIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQucmVhZE9ubHk9PT1mYWxzZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmKHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsRWxlbWVudHMpIHtcclxuICAgICAgICAgIGlmKCQoZS50YXJnZXQpLmlzKHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsRWxlbWVudHMpIHx8ICQoZS50YXJnZXQpLmNsb3Nlc3Qoc2V0dGluZ3Muc3RhbmRhcmRTY3JvbGxFbGVtZW50cykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihsb2NrZWQ9PT10cnVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGUua2V5Q29kZT09MzggfHwgZS5rZXlDb2RlPT0zMykge1xyXG4gICAgICAgICAgaWYoaW5kZXg+MCkge1xyXG4gICAgICAgICAgICBpZihhdFRvcCgpKSB7XHJcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgIGluZGV4LS07XHJcbiAgICAgICAgICAgICAgLy9pbmRleCwgaW5zdGFudCwgY2FsbGJhY2tzLCB0b1RvcFxyXG4gICAgICAgICAgICAgIGFuaW1hdGVTY3JvbGwoaW5kZXgsZmFsc2UsdHJ1ZSxmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYoZS5rZXlDb2RlPT00MCB8fCBlLmtleUNvZGU9PTM0KSB7XHJcbiAgICAgICAgICBpZihpbmRleDxoZWlnaHRzLmxlbmd0aC0xKSB7XHJcbiAgICAgICAgICAgIGlmKGF0Qm90dG9tKCkpIHtcclxuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXHJcbiAgICAgICAgICAgICAgYW5pbWF0ZVNjcm9sbChpbmRleCxmYWxzZSx0cnVlLGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgaW5pdDpmdW5jdGlvbigpIHtcclxuICAgICAgICBpZihzZXR0aW5ncy5zY3JvbGxiYXJzKSB7XHJcbiAgICAgICAgICAkd2luZG93Lm9uKCdtb3VzZWRvd24nLCBtYW51YWxTY3JvbGwuaGFuZGxlTW91c2Vkb3duKTtcclxuICAgICAgICAgICR3aW5kb3cub24oJ21vdXNldXAnLCBtYW51YWxTY3JvbGwuaGFuZGxlTW91c2V1cCk7XHJcbiAgICAgICAgICAkd2luZG93Lm9uKCdzY3JvbGwnLCBtYW51YWxTY3JvbGwuaGFuZGxlU2Nyb2xsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJChcImJvZHlcIikuY3NzKHtcIm92ZXJmbG93XCI6XCJoaWRkZW5cIn0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcih3aGVlbEV2ZW50LCBtYW51YWxTY3JvbGwud2hlZWxIYW5kbGVyLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG4gICAgICAgIC8vJChkb2N1bWVudCkuYmluZCh3aGVlbEV2ZW50LG1hbnVhbFNjcm9sbC53aGVlbEhhbmRsZXIpO1xyXG4gICAgICAgICR3aW5kb3cub24oJ2tleWRvd24nLCBtYW51YWxTY3JvbGwua2V5SGFuZGxlcik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgc3dpcGVTY3JvbGwgPSB7XHJcbiAgICAgIHRvdWNoZXMgOiB7XHJcbiAgICAgICAgXCJ0b3VjaHN0YXJ0XCI6IHtcInlcIjotMSxcInhcIjotMX0sXHJcbiAgICAgICAgXCJ0b3VjaG1vdmVcIiA6IHtcInlcIjotMSxcInhcIjotMX0sXHJcbiAgICAgICAgXCJ0b3VjaGVuZFwiICA6IGZhbHNlLFxyXG4gICAgICAgIFwiZGlyZWN0aW9uXCIgOiBcInVuZGV0ZXJtaW5lZFwiXHJcbiAgICAgIH0sXHJcbiAgICAgIG9wdGlvbnM6e1xyXG4gICAgICAgIFwiZGlzdGFuY2VcIiA6IDMwLFxyXG4gICAgICAgIFwidGltZUdhcFwiIDogODAwLFxyXG4gICAgICAgIFwidGltZVN0YW1wXCIgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaEhhbmRsZXI6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgaWYoZGlzYWJsZWQ9PT10cnVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2UgaWYoc2V0dGluZ3Muc3RhbmRhcmRTY3JvbGxFbGVtZW50cykge1xyXG4gICAgICAgICAgaWYoJChldmVudC50YXJnZXQpLmlzKHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsRWxlbWVudHMpIHx8ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsRWxlbWVudHMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHRvdWNoO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQgIT09ICd1bmRlZmluZWQnKXtcclxuICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQudG91Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgICBjYXNlICd0b3VjaHN0YXJ0JzpcclxuICAgICAgICAgICAgICAgIHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hzdGFydC55ID0gdG91Y2gucGFnZVk7XHJcbiAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNobW92ZS55ID0gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaHN0YXJ0LnggPSB0b3VjaC5wYWdlWDtcclxuICAgICAgICAgICAgICAgIHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLnggPSAtMTtcclxuXHJcbiAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC5vcHRpb25zLnRpbWVTdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaGVuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIGNhc2UgJ3RvdWNobW92ZSc6XHJcbiAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNobW92ZS55ID0gdG91Y2gucGFnZVk7XHJcbiAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNobW92ZS54ID0gdG91Y2gucGFnZVg7XHJcbiAgICAgICAgICAgICAgICBpZihzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSE9PXN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLnkgJiYgKE1hdGguYWJzKHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hzdGFydC55LXN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLnkpPk1hdGguYWJzKHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hzdGFydC54LXN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLngpKSkge1xyXG4gICAgICAgICAgICAgICAgICAvL2lmKCFvdmVyZmxvd1tpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudG91Y2hlcy5kaXJlY3Rpb24gPSBcInlcIjtcclxuICAgICAgICAgICAgICAgICAgaWYoKHN3aXBlU2Nyb2xsLm9wdGlvbnMudGltZVN0YW1wK3N3aXBlU2Nyb2xsLm9wdGlvbnMudGltZUdhcCk8KG5ldyBEYXRlKCkuZ2V0VGltZSgpKSAmJiBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoZW5kID09IGZhbHNlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hlbmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSA+IC0xKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgaWYoTWF0aC5hYnMoc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaG1vdmUueS1zd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSk+c3dpcGVTY3JvbGwub3B0aW9ucy5kaXN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSA8IHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLnkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudXAoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwuZG93bigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAndG91Y2hlbmQnOlxyXG4gICAgICAgICAgICAgICAgaWYoc3dpcGVTY3JvbGwudG91Y2hlc1tldmVudC50eXBlXT09PWZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgIHN3aXBlU2Nyb2xsLnRvdWNoZXNbZXZlbnQudHlwZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICBpZiAoc3dpcGVTY3JvbGwudG91Y2hlcy50b3VjaHN0YXJ0LnkgPiAtMSAmJiBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNobW92ZS55ID4gLTEgJiYgc3dpcGVTY3JvbGwudG91Y2hlcy5kaXJlY3Rpb249PT1cInlcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihNYXRoLmFicyhzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNobW92ZS55LXN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hzdGFydC55KT5zd2lwZVNjcm9sbC5vcHRpb25zLmRpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZihzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSA8IHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2htb3ZlLnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudXAoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC5kb3duKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzd2lwZVNjcm9sbC50b3VjaGVzLnRvdWNoc3RhcnQueSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXBlU2Nyb2xsLnRvdWNoZXMudG91Y2hzdGFydC54ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVTY3JvbGwudG91Y2hlcy5kaXJlY3Rpb24gPSBcInVuZGV0ZXJtaW5lZFwiO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBkb3duOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYoaW5kZXg8aGVpZ2h0cy5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICBpZihhdEJvdHRvbSgpICYmIGluZGV4PGhlaWdodHMubGVuZ3RoLTEpIHtcclxuXHJcbiAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgIC8vaW5kZXgsIGluc3RhbnQsIGNhbGxiYWNrcywgdG9Ub3BcclxuICAgICAgICAgICAgYW5pbWF0ZVNjcm9sbChpbmRleCxmYWxzZSx0cnVlLGZhbHNlKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBvcnRIZWlnaHQgPSBnZXRwb3J0SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIGlmKE1hdGguZmxvb3IoZWxlbWVudHNbaW5kZXhdLmhlaWdodCgpL3BvcnRIZWlnaHQpPmludGVyc3RpdGlhbEluZGV4KSB7XHJcblxyXG4gICAgICAgICAgICAgIGludGVyc3RpdGlhbFNjcm9sbChwYXJzZUludChoZWlnaHRzW2luZGV4XSkrKHBvcnRIZWlnaHQqaW50ZXJzdGl0aWFsSW5kZXgpKTtcclxuICAgICAgICAgICAgICBpbnRlcnN0aXRpYWxJbmRleCArPSAxO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBpbnRlcnN0aXRpYWxTY3JvbGwocGFyc2VJbnQoaGVpZ2h0c1tpbmRleF0pKyhlbGVtZW50c1tpbmRleF0ub3V0ZXJIZWlnaHQoKS1wb3J0SGVpZ2h0KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB1cDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYoaW5kZXg+PTApIHtcclxuICAgICAgICAgIGlmKGF0VG9wKCkgJiYgaW5kZXg+MCkge1xyXG5cclxuICAgICAgICAgICAgaW5kZXgtLTtcclxuICAgICAgICAgICAgLy9pbmRleCwgaW5zdGFudCwgY2FsbGJhY2tzLCB0b1RvcFxyXG4gICAgICAgICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LGZhbHNlLHRydWUsZmFsc2UpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGlmKGludGVyc3RpdGlhbEluZGV4PjIpIHtcclxuICAgICAgICAgICAgICBwb3J0SGVpZ2h0ID0gZ2V0cG9ydEhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgICBpbnRlcnN0aXRpYWxJbmRleCAtPSAxO1xyXG4gICAgICAgICAgICAgIGludGVyc3RpdGlhbFNjcm9sbChwYXJzZUludChoZWlnaHRzW2luZGV4XSkrKHBvcnRIZWlnaHQqaW50ZXJzdGl0aWFsSW5kZXgpKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgIGludGVyc3RpdGlhbEluZGV4ID0gMTtcclxuICAgICAgICAgICAgICBpbnRlcnN0aXRpYWxTY3JvbGwocGFyc2VJbnQoaGVpZ2h0c1tpbmRleF0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICYmIHNldHRpbmdzLnRvdWNoU2Nyb2xsKSB7XHJcbiAgICAgICAgICB2YXIgZXZlbnRMaXN0ZW5lck9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHN3aXBlU2Nyb2xsLnRvdWNoSGFuZGxlciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xyXG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgc3dpcGVTY3JvbGwudG91Y2hIYW5kbGVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XHJcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHN3aXBlU2Nyb2xsLnRvdWNoSGFuZGxlciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgdXRpbCA9IHtcclxuICAgICAgcmVmcmVzaDpmdW5jdGlvbih3aXRoQ2FsbGJhY2ssc2Nyb2xsKSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZDIpO1xyXG4gICAgICAgIHRpbWVvdXRJZDIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgLy9yZXRhaW4gcG9zaXRpb25cclxuICAgICAgICAgIHNpemVQYW5lbHModHJ1ZSk7XHJcbiAgICAgICAgICAvL3Njcm9sbCwgZmlyc3RMb2FkXHJcbiAgICAgICAgICBjYWxjdWxhdGVQb3NpdGlvbnMoc2Nyb2xsLGZhbHNlKTtcclxuICAgICAgICAgIGlmKHdpdGhDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgIHNldHRpbmdzLmFmdGVyUmVzaXplKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSw0MDApO1xyXG4gICAgICB9LFxyXG4gICAgICBoYW5kbGVVcGRhdGU6ZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy9jYWxsYmFja3MsIHNjcm9sbFxyXG4gICAgICAgIC8vY2hhbmdlZCBmcm9tIGZhbHNlLHRydWUgdG8gZmFsc2UsZmFsc2VcclxuICAgICAgICB1dGlsLnJlZnJlc2goZmFsc2UsZmFsc2UpO1xyXG4gICAgICB9LFxyXG4gICAgICBoYW5kbGVSZXNpemU6ZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy9jYWxsYmFja3MsIHNjcm9sbFxyXG4gICAgICAgIHV0aWwucmVmcmVzaCh0cnVlLHRydWUpO1xyXG4gICAgICB9LFxyXG4gICAgICBoYW5kbGVPcmllbnRhdGlvbjpmdW5jdGlvbigpIHtcclxuICAgICAgICAvL2NhbGxiYWNrcywgc2Nyb2xsXHJcbiAgICAgICAgdXRpbC5yZWZyZXNoKHRydWUsdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKHNldHRpbmdzLCBvcHRpb25zKTtcclxuXHJcbiAgICAvL3JldGFpbiBwb3NpdGlvblxyXG4gICAgc2l6ZVBhbmVscyhmYWxzZSk7XHJcblxyXG4gICAgY2FsY3VsYXRlUG9zaXRpb25zKGZhbHNlLHRydWUpO1xyXG5cclxuICAgIGlmKHRydWU9PT1oYXNMb2NhdGlvbikge1xyXG4gICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXHJcbiAgICAgIGFuaW1hdGVTY3JvbGwoaW5kZXgsZmFsc2UsdHJ1ZSx0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy9pbnN0YW50LGNhbGxiYWNrc1xyXG4gICAgICAgIG1hbnVhbFNjcm9sbC5jYWxjdWxhdGVOZWFyZXN0KHRydWUsZmFsc2UpO1xyXG4gICAgICB9LDIwMCk7XHJcbiAgICB9XHJcbiAgICBpZihoZWlnaHRzLmxlbmd0aCkge1xyXG4gICAgICBtYW51YWxTY3JvbGwuaW5pdCgpO1xyXG4gICAgICBzd2lwZVNjcm9sbC5pbml0KCk7XHJcblxyXG4gICAgICAkd2luZG93Lm9uKFwicmVzaXplXCIsdXRpbC5oYW5kbGVSZXNpemUpO1xyXG4gICAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIiwgdXRpbC5oYW5kbGVPcmllbnRhdGlvbiwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpbnRlcnN0aXRpYWxTY3JvbGwocG9zKSB7XHJcbiAgICAgIGlmKCAkKCkudmVsb2NpdHkgKSB7XHJcbiAgICAgICAgJChzZXR0aW5ncy50YXJnZXQpLnN0b3AoKS52ZWxvY2l0eSgnc2Nyb2xsJywge1xyXG4gICAgICAgICAgZHVyYXRpb246IHNldHRpbmdzLnNjcm9sbFNwZWVkLFxyXG4gICAgICAgICAgZWFzaW5nOiBzZXR0aW5ncy5lYXNpbmcsXHJcbiAgICAgICAgICBvZmZzZXQ6IHBvcyxcclxuICAgICAgICAgIG1vYmlsZUhBOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICQoc2V0dGluZ3MudGFyZ2V0KS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICBzY3JvbGxUb3A6IHBvc1xyXG4gICAgICAgIH0sIHNldHRpbmdzLnNjcm9sbFNwZWVkLHNldHRpbmdzLmVhc2luZyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzaXplUGFuZWxzKGtlZXBQb3NpdGlvbikge1xyXG4gICAgICBpZihrZWVwUG9zaXRpb24pIHtcclxuICAgICAgICB0b3AgPSAkd2luZG93LnNjcm9sbFRvcCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgc2VsZWN0b3IgPSBzZXR0aW5ncy5zZWN0aW9uO1xyXG4gICAgICBvdmVyZmxvdyA9IFtdO1xyXG4gICAgICBpZihzZXR0aW5ncy5pbnRlcnN0aXRpYWxTZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgIHNlbGVjdG9yICs9IFwiLFwiICsgc2V0dGluZ3MuaW50ZXJzdGl0aWFsU2VjdGlvbjtcclxuICAgICAgfVxyXG4gICAgICBpZihzZXR0aW5ncy5zY3JvbGxiYXJzPT09ZmFsc2UpIHtcclxuICAgICAgICBzZXR0aW5ncy5vdmVyZmxvd1Njcm9sbCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIHBvcnRIZWlnaHQgPSBnZXRwb3J0SGVpZ2h0KCk7XHJcbiAgICAgICQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oaSkge1xyXG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgIGlmKHNldHRpbmdzLnNldEhlaWdodHMpIHtcclxuICAgICAgICAgIGlmKCR0aGlzLmlzKHNldHRpbmdzLmludGVyc3RpdGlhbFNlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIG92ZXJmbG93W2ldID0gZmFsc2U7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZigoJHRoaXMuY3NzKFwiaGVpZ2h0XCIsXCJhdXRvXCIpLm91dGVySGVpZ2h0KCk8cG9ydEhlaWdodCkgfHwgJHRoaXMuY3NzKFwib3ZlcmZsb3dcIik9PT1cImhpZGRlblwiKSB7XHJcbiAgICAgICAgICAgICAgJHRoaXMuY3NzKHtcImhlaWdodFwiOnBvcnRIZWlnaHR9KTtcclxuXHJcbiAgICAgICAgICAgICAgb3ZlcmZsb3dbaV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgJHRoaXMuY3NzKHtcImhlaWdodFwiOiR0aGlzLm91dGVySGVpZ2h0KCl9KTtcclxuXHJcbiAgICAgICAgICAgICAgaWYoc2V0dGluZ3Mub3ZlcmZsb3dTY3JvbGwpIHtcclxuICAgICAgICAgICAgICAgIG92ZXJmbG93W2ldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dbaV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgaWYoKCR0aGlzLm91dGVySGVpZ2h0KCk8cG9ydEhlaWdodCkgfHwgKHNldHRpbmdzLm92ZXJmbG93U2Nyb2xsPT09ZmFsc2UpKSB7XHJcbiAgICAgICAgICAgIG92ZXJmbG93W2ldID0gZmFsc2U7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvdmVyZmxvd1tpXSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgaWYoa2VlcFBvc2l0aW9uKSB7XHJcbiAgICAgICAgJHdpbmRvdy5zY3JvbGxUb3AodG9wKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb25zKHNjcm9sbCxmaXJzdExvYWQpIHtcclxuICAgICAgdmFyIHNlbGVjdG9yID0gc2V0dGluZ3Muc2VjdGlvbjtcclxuICAgICAgaWYoc2V0dGluZ3MuaW50ZXJzdGl0aWFsU2VjdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICBzZWxlY3RvciArPSBcIixcIiArIHNldHRpbmdzLmludGVyc3RpdGlhbFNlY3Rpb247XHJcbiAgICAgIH1cclxuICAgICAgaGVpZ2h0cyA9IFtdO1xyXG4gICAgICBuYW1lcyA9IFtdO1xyXG4gICAgICBlbGVtZW50cyA9IFtdO1xyXG4gICAgICAkKHNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uKGkpe1xyXG4gICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuICAgICAgICAgIGlmKGk+MCkge1xyXG4gICAgICAgICAgICBoZWlnaHRzW2ldID0gcGFyc2VJbnQoJHRoaXMub2Zmc2V0KCkudG9wKSArIHNldHRpbmdzLm9mZnNldDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGhlaWdodHNbaV0gPSBwYXJzZUludCgkdGhpcy5vZmZzZXQoKS50b3ApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoc2V0dGluZ3Muc2VjdGlvbk5hbWUgJiYgJHRoaXMuZGF0YShzZXR0aW5ncy5zZWN0aW9uTmFtZSkpIHtcclxuICAgICAgICAgICAgbmFtZXNbaV0gPSBcIiNcIiArICR0aGlzLmRhdGEoc2V0dGluZ3Muc2VjdGlvbk5hbWUpLnRvU3RyaW5nKCkucmVwbGFjZSgvIC9nLFwiLVwiKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmKCR0aGlzLmlzKHNldHRpbmdzLmludGVyc3RpdGlhbFNlY3Rpb24pPT09ZmFsc2UpIHtcclxuICAgICAgICAgICAgICBuYW1lc1tpXSA9IFwiI1wiICsgKGkgKyAxKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBuYW1lc1tpXSA9IFwiI1wiO1xyXG4gICAgICAgICAgICAgIGlmKGk9PT0kKHNlbGVjdG9yKS5sZW5ndGgtMSAmJiBpPjEpIHtcclxuICAgICAgICAgICAgICAgIGhlaWdodHNbaV0gPSBoZWlnaHRzW2ktMV0gKyAocGFyc2VJbnQoJCgkKHNlbGVjdG9yKVtpLTFdKS5vdXRlckhlaWdodCgpKSAtIHBhcnNlSW50KCQod2luZG93KS5oZWlnaHQoKSkpICsgcGFyc2VJbnQoJHRoaXMub3V0ZXJIZWlnaHQoKSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbGVtZW50c1tpXSA9ICR0aGlzO1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYoJChuYW1lc1tpXSkubGVuZ3RoICYmIHdpbmRvdy5jb25zb2xlKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiU2Nyb2xsaWZ5IHdhcm5pbmc6IFNlY3Rpb24gbmFtZXMgY2FuJ3QgbWF0Y2ggSURzIC0gdGhpcyB3aWxsIGNhdXNlIHRoZSBicm93c2VyIHRvIGFuY2hvci5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XHJcblxyXG4gICAgICAgICAgaWYod2luZG93LmxvY2F0aW9uLmhhc2g9PT1uYW1lc1tpXSkge1xyXG4gICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgIGhhc0xvY2F0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYodHJ1ZT09PXNjcm9sbCkge1xyXG4gICAgICAgIC8vaW5kZXgsIGluc3RhbnQsIGNhbGxiYWNrcywgdG9Ub3BcclxuICAgICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LGZhbHNlLGZhbHNlLGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGF0VG9wKCkge1xyXG4gICAgICBpZighb3ZlcmZsb3dbaW5kZXhdKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgdG9wID0gJHdpbmRvdy5zY3JvbGxUb3AoKTtcclxuICAgICAgaWYodG9wPnBhcnNlSW50KGhlaWdodHNbaW5kZXhdKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXRCb3R0b20oKSB7XHJcbiAgICAgIGlmKCFvdmVyZmxvd1tpbmRleF0pIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICB0b3AgPSAkd2luZG93LnNjcm9sbFRvcCgpO1xyXG4gICAgICBwb3J0SGVpZ2h0ID0gZ2V0cG9ydEhlaWdodCgpO1xyXG5cclxuICAgICAgaWYodG9wPHBhcnNlSW50KGhlaWdodHNbaW5kZXhdKSsoZWxlbWVudHNbaW5kZXhdLm91dGVySGVpZ2h0KCktcG9ydEhlaWdodCktMjgpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbW92ZShwYW5lbCxpbnN0YW50KSB7XHJcbiAgICB2YXIgeiA9IG5hbWVzLmxlbmd0aDtcclxuICAgIGZvcig7ej49MDt6LS0pIHtcclxuICAgICAgaWYodHlwZW9mIHBhbmVsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGlmIChuYW1lc1t6XT09PXBhbmVsKSB7XHJcbiAgICAgICAgICBpbmRleCA9IHo7XHJcbiAgICAgICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXHJcbiAgICAgICAgICBhbmltYXRlU2Nyb2xsKHosaW5zdGFudCx0cnVlLHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZih6PT09cGFuZWwpIHtcclxuICAgICAgICAgIGluZGV4ID0gejtcclxuICAgICAgICAgIC8vaW5kZXgsIGluc3RhbnQsIGNhbGxiYWNrcywgdG9Ub3BcclxuICAgICAgICAgIGFuaW1hdGVTY3JvbGwoeixpbnN0YW50LHRydWUsdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHNjcm9sbGlmeS5tb3ZlID0gZnVuY3Rpb24ocGFuZWwpIHtcclxuICAgIGlmKHBhbmVsPT09dW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmKHBhbmVsLm9yaWdpbmFsRXZlbnQpIHtcclxuICAgICAgcGFuZWwgPSAkKHRoaXMpLmF0dHIoXCJocmVmXCIpO1xyXG4gICAgfVxyXG4gICAgbW92ZShwYW5lbCxmYWxzZSk7XHJcbiAgfTtcclxuICBzY3JvbGxpZnkuaW5zdGFudE1vdmUgPSBmdW5jdGlvbihwYW5lbCkge1xyXG4gICAgaWYocGFuZWw9PT11bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbW92ZShwYW5lbCx0cnVlKTtcclxuICB9O1xyXG4gIHNjcm9sbGlmeS5uZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZihpbmRleDxuYW1lcy5sZW5ndGgpIHtcclxuICAgICAgaW5kZXggKz0gMTtcclxuICAgICAgLy9pbmRleCwgaW5zdGFudCwgY2FsbGJhY2tzLCB0b1RvcFxyXG4gICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LGZhbHNlLHRydWUsdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBzY3JvbGxpZnkucHJldmlvdXMgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKGluZGV4PjApIHtcclxuICAgICAgaW5kZXggLT0gMTtcclxuICAgICAgLy9pbmRleCwgaW5zdGFudCwgY2FsbGJhY2tzLCB0b1RvcFxyXG4gICAgICBhbmltYXRlU2Nyb2xsKGluZGV4LGZhbHNlLHRydWUsdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBzY3JvbGxpZnkuaW5zdGFudE5leHQgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKGluZGV4PG5hbWVzLmxlbmd0aCkge1xyXG4gICAgICBpbmRleCArPSAxO1xyXG4gICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXHJcbiAgICAgIGFuaW1hdGVTY3JvbGwoaW5kZXgsdHJ1ZSx0cnVlLHRydWUpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgc2Nyb2xsaWZ5Lmluc3RhbnRQcmV2aW91cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYoaW5kZXg+MCkge1xyXG4gICAgICBpbmRleCAtPSAxO1xyXG4gICAgICAvL2luZGV4LCBpbnN0YW50LCBjYWxsYmFja3MsIHRvVG9wXHJcbiAgICAgIGFuaW1hdGVTY3JvbGwoaW5kZXgsdHJ1ZSx0cnVlLHRydWUpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgc2Nyb2xsaWZ5LmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKCFpbml0aWFsaXNlZCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZihzZXR0aW5ncy5zZXRIZWlnaHRzKSB7XHJcbiAgICAgICQoc2V0dGluZ3Muc2VjdGlvbikuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAkKHRoaXMpLmNzcyhcImhlaWdodFwiLFwiYXV0b1wiKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAkd2luZG93Lm9mZihcInJlc2l6ZVwiLHV0aWwuaGFuZGxlUmVzaXplKTtcclxuICAgIGlmKHNldHRpbmdzLnNjcm9sbGJhcnMpIHtcclxuICAgICAgJHdpbmRvdy5vZmYoJ21vdXNlZG93bicsIG1hbnVhbFNjcm9sbC5oYW5kbGVNb3VzZWRvd24pO1xyXG4gICAgICAkd2luZG93Lm9mZignbW91c2V1cCcsIG1hbnVhbFNjcm9sbC5oYW5kbGVNb3VzZXVwKTtcclxuICAgICAgJHdpbmRvdy5vZmYoJ3Njcm9sbCcsIG1hbnVhbFNjcm9sbC5oYW5kbGVTY3JvbGwpO1xyXG4gICAgfVxyXG4gICAgLy8gJHdpbmRvdy5vZmYod2hlZWxFdmVudCxtYW51YWxTY3JvbGwud2hlZWxIYW5kbGVyKTtcclxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKHdoZWVsRXZlbnQsbWFudWFsU2Nyb2xsLndoZWVsSGFuZGxlcik7XHJcbiAgICAkd2luZG93Lm9mZigna2V5ZG93bicsIG1hbnVhbFNjcm9sbC5rZXlIYW5kbGVyKTtcclxuXHJcbiAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAmJiBzZXR0aW5ncy50b3VjaFNjcm9sbCkge1xyXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgc3dpcGVTY3JvbGwudG91Y2hIYW5kbGVyLCBmYWxzZSk7XHJcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHN3aXBlU2Nyb2xsLnRvdWNoSGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHN3aXBlU2Nyb2xsLnRvdWNoSGFuZGxlciwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGVpZ2h0cyA9IFtdO1xyXG4gICAgbmFtZXMgPSBbXTtcclxuICAgIGVsZW1lbnRzID0gW107XHJcbiAgICBvdmVyZmxvdyA9IFtdO1xyXG4gIH07XHJcbiAgc2Nyb2xsaWZ5LnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYoIWluaXRpYWxpc2VkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHV0aWwuaGFuZGxlVXBkYXRlKCk7XHJcbiAgfTtcclxuICBzY3JvbGxpZnkuY3VycmVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGVsZW1lbnRzW2luZGV4XTtcclxuICB9O1xyXG4gIHNjcm9sbGlmeS5jdXJyZW50SW5kZXggPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBpbmRleDtcclxuICB9O1xyXG4gIHNjcm9sbGlmeS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBkaXNhYmxlZCA9IHRydWU7XHJcbiAgfTtcclxuICBzY3JvbGxpZnkuZW5hYmxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBkaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgaWYgKGluaXRpYWxpc2VkKSB7XHJcbiAgICAgIC8vaW5zdGFudCxjYWxsYmFja3NcclxuICAgICAgbWFudWFsU2Nyb2xsLmNhbGN1bGF0ZU5lYXJlc3QoZmFsc2UsZmFsc2UpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgc2Nyb2xsaWZ5LmlzRGlzYWJsZWQgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBkaXNhYmxlZDtcclxuICB9O1xyXG4gIHNjcm9sbGlmeS5zZXRPcHRpb25zID0gZnVuY3Rpb24odXBkYXRlZE9wdGlvbnMpIHtcclxuICAgIGlmKCFpbml0aWFsaXNlZCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZih0eXBlb2YgdXBkYXRlZE9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgc2V0dGluZ3MgPSAkLmV4dGVuZChzZXR0aW5ncywgdXBkYXRlZE9wdGlvbnMpO1xyXG4gICAgICB1dGlsLmhhbmRsZVVwZGF0ZSgpO1xyXG4gICAgfSBlbHNlIGlmKHdpbmRvdy5jb25zb2xlKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcIlNjcm9sbGlmeSB3YXJuaW5nOiBzZXRPcHRpb25zIGV4cGVjdHMgYW4gb2JqZWN0LlwiKTtcclxuICAgIH1cclxuICB9O1xyXG4gICQuc2Nyb2xsaWZ5ID0gc2Nyb2xsaWZ5O1xyXG4gIHJldHVybiBzY3JvbGxpZnk7XHJcbn0pKTtcclxuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzKTtcbiAgICBnbG9iYWwuYm9keVNjcm9sbExvY2sgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnIyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShhcnIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIE9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgZXZlbnQgb3B0aW9ucywgZmVhdHVyZSBkZXRlY3QgaXQuXG5cbiAgLy8gQWRvcHRlZCBhbmQgbW9kaWZpZWQgc29sdXRpb24gZnJvbSBCb2hkYW4gRGlkdWtoICgyMDE3KVxuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MTU5NDk5Ny9pb3MtMTAtc2FmYXJpLXByZXZlbnQtc2Nyb2xsaW5nLWJlaGluZC1hLWZpeGVkLW92ZXJsYXktYW5kLW1haW50YWluLXNjcm9sbC1wb3NpXG5cbiAgdmFyIGhhc1Bhc3NpdmVFdmVudHMgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHBhc3NpdmVUZXN0T3B0aW9ucyA9IHtcbiAgICAgIGdldCBwYXNzaXZlKCkge1xuICAgICAgICBoYXNQYXNzaXZlRXZlbnRzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZScsIG51bGwsIHBhc3NpdmVUZXN0T3B0aW9ucyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlJywgbnVsbCwgcGFzc2l2ZVRlc3RPcHRpb25zKTtcbiAgfVxuXG4gIHZhciBpc0lvc0RldmljZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSAmJiAvaVAoYWR8aG9uZXxvZCkvLnRlc3Qod2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSk7XG5cblxuICB2YXIgbG9ja3MgPSBbXTtcbiAgdmFyIGRvY3VtZW50TGlzdGVuZXJBZGRlZCA9IGZhbHNlO1xuICB2YXIgaW5pdGlhbENsaWVudFkgPSAtMTtcbiAgdmFyIHByZXZpb3VzQm9keU92ZXJmbG93U2V0dGluZyA9IHZvaWQgMDtcbiAgdmFyIHByZXZpb3VzQm9keVBhZGRpbmdSaWdodCA9IHZvaWQgMDtcblxuICAvLyByZXR1cm5zIHRydWUgaWYgYGVsYCBzaG91bGQgYmUgYWxsb3dlZCB0byByZWNlaXZlIHRvdWNobW92ZSBldmVudHMuXG4gIHZhciBhbGxvd1RvdWNoTW92ZSA9IGZ1bmN0aW9uIGFsbG93VG91Y2hNb3ZlKGVsKSB7XG4gICAgcmV0dXJuIGxvY2tzLnNvbWUoZnVuY3Rpb24gKGxvY2spIHtcbiAgICAgIGlmIChsb2NrLm9wdGlvbnMuYWxsb3dUb3VjaE1vdmUgJiYgbG9jay5vcHRpb25zLmFsbG93VG91Y2hNb3ZlKGVsKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBwcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KHJhd0V2ZW50KSB7XG4gICAgdmFyIGUgPSByYXdFdmVudCB8fCB3aW5kb3cuZXZlbnQ7XG5cbiAgICAvLyBGb3IgdGhlIGNhc2Ugd2hlcmVieSBjb25zdW1lcnMgYWRkcyBhIHRvdWNobW92ZSBldmVudCBsaXN0ZW5lciB0byBkb2N1bWVudC5cbiAgICAvLyBSZWNhbGwgdGhhdCB3ZSBkbyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBwcmV2ZW50RGVmYXVsdCwgeyBwYXNzaXZlOiBmYWxzZSB9KVxuICAgIC8vIGluIGRpc2FibGVCb2R5U2Nyb2xsIC0gc28gaWYgd2UgcHJvdmlkZSB0aGlzIG9wcG9ydHVuaXR5IHRvIGFsbG93VG91Y2hNb3ZlLCB0aGVuXG4gICAgLy8gdGhlIHRvdWNobW92ZSBldmVudCBvbiBkb2N1bWVudCB3aWxsIGJyZWFrLlxuICAgIGlmIChhbGxvd1RvdWNoTW92ZShlLnRhcmdldCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIERvIG5vdCBwcmV2ZW50IGlmIHRoZSBldmVudCBoYXMgbW9yZSB0aGFuIG9uZSB0b3VjaCAodXN1YWxseSBtZWFuaW5nIHRoaXMgaXMgYSBtdWx0aSB0b3VjaCBnZXN0dXJlIGxpa2UgcGluY2ggdG8gem9vbSkuXG4gICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm4gdHJ1ZTtcblxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdmFyIHNldE92ZXJmbG93SGlkZGVuID0gZnVuY3Rpb24gc2V0T3ZlcmZsb3dIaWRkZW4ob3B0aW9ucykge1xuICAgIC8vIFNldHRpbmcgb3ZlcmZsb3cgb24gYm9keS9kb2N1bWVudEVsZW1lbnQgc3luY2hyb25vdXNseSBpbiBEZXNrdG9wIFNhZmFyaSBzbG93cyBkb3duXG4gICAgLy8gdGhlIHJlc3BvbnNpdmVuZXNzIGZvciBzb21lIHJlYXNvbi4gU2V0dGluZyB3aXRoaW4gYSBzZXRUaW1lb3V0IGZpeGVzIHRoaXMuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBJZiBwcmV2aW91c0JvZHlQYWRkaW5nUmlnaHQgaXMgYWxyZWFkeSBzZXQsIGRvbid0IHNldCBpdCBhZ2Fpbi5cbiAgICAgIGlmIChwcmV2aW91c0JvZHlQYWRkaW5nUmlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgX3Jlc2VydmVTY3JvbGxCYXJHYXAgPSAhIW9wdGlvbnMgJiYgb3B0aW9ucy5yZXNlcnZlU2Nyb2xsQmFyR2FwID09PSB0cnVlO1xuICAgICAgICB2YXIgc2Nyb2xsQmFyR2FwID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG5cbiAgICAgICAgaWYgKF9yZXNlcnZlU2Nyb2xsQmFyR2FwICYmIHNjcm9sbEJhckdhcCA+IDApIHtcbiAgICAgICAgICBwcmV2aW91c0JvZHlQYWRkaW5nUmlnaHQgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IHNjcm9sbEJhckdhcCArICdweCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgcHJldmlvdXNCb2R5T3ZlcmZsb3dTZXR0aW5nIGlzIGFscmVhZHkgc2V0LCBkb24ndCBzZXQgaXQgYWdhaW4uXG4gICAgICBpZiAocHJldmlvdXNCb2R5T3ZlcmZsb3dTZXR0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJldmlvdXNCb2R5T3ZlcmZsb3dTZXR0aW5nID0gZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXN0b3JlT3ZlcmZsb3dTZXR0aW5nID0gZnVuY3Rpb24gcmVzdG9yZU92ZXJmbG93U2V0dGluZygpIHtcbiAgICAvLyBTZXR0aW5nIG92ZXJmbG93IG9uIGJvZHkvZG9jdW1lbnRFbGVtZW50IHN5bmNocm9ub3VzbHkgaW4gRGVza3RvcCBTYWZhcmkgc2xvd3MgZG93blxuICAgIC8vIHRoZSByZXNwb25zaXZlbmVzcyBmb3Igc29tZSByZWFzb24uIFNldHRpbmcgd2l0aGluIGEgc2V0VGltZW91dCBmaXhlcyB0aGlzLlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByZXZpb3VzQm9keVBhZGRpbmdSaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcHJldmlvdXNCb2R5UGFkZGluZ1JpZ2h0O1xuXG4gICAgICAgIC8vIFJlc3RvcmUgcHJldmlvdXNCb2R5UGFkZGluZ1JpZ2h0IHRvIHVuZGVmaW5lZCBzbyBzZXRPdmVyZmxvd0hpZGRlbiBrbm93cyBpdFxuICAgICAgICAvLyBjYW4gYmUgc2V0IGFnYWluLlxuICAgICAgICBwcmV2aW91c0JvZHlQYWRkaW5nUmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2aW91c0JvZHlPdmVyZmxvd1NldHRpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gcHJldmlvdXNCb2R5T3ZlcmZsb3dTZXR0aW5nO1xuXG4gICAgICAgIC8vIFJlc3RvcmUgcHJldmlvdXNCb2R5T3ZlcmZsb3dTZXR0aW5nIHRvIHVuZGVmaW5lZFxuICAgICAgICAvLyBzbyBzZXRPdmVyZmxvd0hpZGRlbiBrbm93cyBpdCBjYW4gYmUgc2V0IGFnYWluLlxuICAgICAgICBwcmV2aW91c0JvZHlPdmVyZmxvd1NldHRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvc2Nyb2xsSGVpZ2h0I1Byb2JsZW1zX2FuZF9zb2x1dGlvbnNcbiAgdmFyIGlzVGFyZ2V0RWxlbWVudFRvdGFsbHlTY3JvbGxlZCA9IGZ1bmN0aW9uIGlzVGFyZ2V0RWxlbWVudFRvdGFsbHlTY3JvbGxlZCh0YXJnZXRFbGVtZW50KSB7XG4gICAgcmV0dXJuIHRhcmdldEVsZW1lbnQgPyB0YXJnZXRFbGVtZW50LnNjcm9sbEhlaWdodCAtIHRhcmdldEVsZW1lbnQuc2Nyb2xsVG9wIDw9IHRhcmdldEVsZW1lbnQuY2xpZW50SGVpZ2h0IDogZmFsc2U7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVNjcm9sbCA9IGZ1bmN0aW9uIGhhbmRsZVNjcm9sbChldmVudCwgdGFyZ2V0RWxlbWVudCkge1xuICAgIHZhciBjbGllbnRZID0gZXZlbnQudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZIC0gaW5pdGlhbENsaWVudFk7XG5cbiAgICBpZiAoYWxsb3dUb3VjaE1vdmUoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0YXJnZXRFbGVtZW50ICYmIHRhcmdldEVsZW1lbnQuc2Nyb2xsVG9wID09PSAwICYmIGNsaWVudFkgPiAwKSB7XG4gICAgICAvLyBlbGVtZW50IGlzIGF0IHRoZSB0b3Agb2YgaXRzIHNjcm9sbC5cbiAgICAgIHJldHVybiBwcmV2ZW50RGVmYXVsdChldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzVGFyZ2V0RWxlbWVudFRvdGFsbHlTY3JvbGxlZCh0YXJnZXRFbGVtZW50KSAmJiBjbGllbnRZIDwgMCkge1xuICAgICAgLy8gZWxlbWVudCBpcyBhdCB0aGUgdG9wIG9mIGl0cyBzY3JvbGwuXG4gICAgICByZXR1cm4gcHJldmVudERlZmF1bHQoZXZlbnQpO1xuICAgIH1cblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIHZhciBkaXNhYmxlQm9keVNjcm9sbCA9IGV4cG9ydHMuZGlzYWJsZUJvZHlTY3JvbGwgPSBmdW5jdGlvbiBkaXNhYmxlQm9keVNjcm9sbCh0YXJnZXRFbGVtZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzSW9zRGV2aWNlKSB7XG4gICAgICAvLyB0YXJnZXRFbGVtZW50IG11c3QgYmUgcHJvdmlkZWQsIGFuZCBkaXNhYmxlQm9keVNjcm9sbCBtdXN0IG5vdCBoYXZlIGJlZW5cbiAgICAgIC8vIGNhbGxlZCBvbiB0aGlzIHRhcmdldEVsZW1lbnQgYmVmb3JlLlxuICAgICAgaWYgKCF0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Rpc2FibGVCb2R5U2Nyb2xsIHVuc3VjY2Vzc2Z1bCAtIHRhcmdldEVsZW1lbnQgbXVzdCBiZSBwcm92aWRlZCB3aGVuIGNhbGxpbmcgZGlzYWJsZUJvZHlTY3JvbGwgb24gSU9TIGRldmljZXMuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldEVsZW1lbnQgJiYgIWxvY2tzLnNvbWUoZnVuY3Rpb24gKGxvY2spIHtcbiAgICAgICAgcmV0dXJuIGxvY2sudGFyZ2V0RWxlbWVudCA9PT0gdGFyZ2V0RWxlbWVudDtcbiAgICAgIH0pKSB7XG4gICAgICAgIHZhciBsb2NrID0ge1xuICAgICAgICAgIHRhcmdldEVsZW1lbnQ6IHRhcmdldEVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9uczogb3B0aW9ucyB8fCB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIGxvY2tzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShsb2NrcyksIFtsb2NrXSk7XG5cbiAgICAgICAgdGFyZ2V0RWxlbWVudC5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIGRldGVjdCBzaW5nbGUgdG91Y2guXG4gICAgICAgICAgICBpbml0aWFsQ2xpZW50WSA9IGV2ZW50LnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRhcmdldEVsZW1lbnQub250b3VjaG1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIGRldGVjdCBzaW5nbGUgdG91Y2guXG4gICAgICAgICAgICBoYW5kbGVTY3JvbGwoZXZlbnQsIHRhcmdldEVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIWRvY3VtZW50TGlzdGVuZXJBZGRlZCkge1xuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHByZXZlbnREZWZhdWx0LCBoYXNQYXNzaXZlRXZlbnRzID8geyBwYXNzaXZlOiBmYWxzZSB9IDogdW5kZWZpbmVkKTtcbiAgICAgICAgICBkb2N1bWVudExpc3RlbmVyQWRkZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE92ZXJmbG93SGlkZGVuKG9wdGlvbnMpO1xuICAgICAgdmFyIF9sb2NrID0ge1xuICAgICAgICB0YXJnZXRFbGVtZW50OiB0YXJnZXRFbGVtZW50LFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zIHx8IHt9XG4gICAgICB9O1xuXG4gICAgICBsb2NrcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobG9ja3MpLCBbX2xvY2tdKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNsZWFyQWxsQm9keVNjcm9sbExvY2tzID0gZXhwb3J0cy5jbGVhckFsbEJvZHlTY3JvbGxMb2NrcyA9IGZ1bmN0aW9uIGNsZWFyQWxsQm9keVNjcm9sbExvY2tzKCkge1xuICAgIGlmIChpc0lvc0RldmljZSkge1xuICAgICAgLy8gQ2xlYXIgYWxsIGxvY2tzIG9udG91Y2hzdGFydC9vbnRvdWNobW92ZSBoYW5kbGVycywgYW5kIHRoZSByZWZlcmVuY2VzLlxuICAgICAgbG9ja3MuZm9yRWFjaChmdW5jdGlvbiAobG9jaykge1xuICAgICAgICBsb2NrLnRhcmdldEVsZW1lbnQub250b3VjaHN0YXJ0ID0gbnVsbDtcbiAgICAgICAgbG9jay50YXJnZXRFbGVtZW50Lm9udG91Y2htb3ZlID0gbnVsbDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZG9jdW1lbnRMaXN0ZW5lckFkZGVkKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHByZXZlbnREZWZhdWx0LCBoYXNQYXNzaXZlRXZlbnRzID8geyBwYXNzaXZlOiBmYWxzZSB9IDogdW5kZWZpbmVkKTtcbiAgICAgICAgZG9jdW1lbnRMaXN0ZW5lckFkZGVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGxvY2tzID0gW107XG5cbiAgICAgIC8vIFJlc2V0IGluaXRpYWwgY2xpZW50WS5cbiAgICAgIGluaXRpYWxDbGllbnRZID0gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3RvcmVPdmVyZmxvd1NldHRpbmcoKTtcbiAgICAgIGxvY2tzID0gW107XG4gICAgfVxuICB9O1xuXG4gIHZhciBlbmFibGVCb2R5U2Nyb2xsID0gZXhwb3J0cy5lbmFibGVCb2R5U2Nyb2xsID0gZnVuY3Rpb24gZW5hYmxlQm9keVNjcm9sbCh0YXJnZXRFbGVtZW50KSB7XG4gICAgaWYgKGlzSW9zRGV2aWNlKSB7XG4gICAgICBpZiAoIXRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcignZW5hYmxlQm9keVNjcm9sbCB1bnN1Y2Nlc3NmdWwgLSB0YXJnZXRFbGVtZW50IG11c3QgYmUgcHJvdmlkZWQgd2hlbiBjYWxsaW5nIGVuYWJsZUJvZHlTY3JvbGwgb24gSU9TIGRldmljZXMuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0RWxlbWVudC5vbnRvdWNoc3RhcnQgPSBudWxsO1xuICAgICAgdGFyZ2V0RWxlbWVudC5vbnRvdWNobW92ZSA9IG51bGw7XG5cbiAgICAgIGxvY2tzID0gbG9ja3MuZmlsdGVyKGZ1bmN0aW9uIChsb2NrKSB7XG4gICAgICAgIHJldHVybiBsb2NrLnRhcmdldEVsZW1lbnQgIT09IHRhcmdldEVsZW1lbnQ7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRvY3VtZW50TGlzdGVuZXJBZGRlZCAmJiBsb2Nrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgcHJldmVudERlZmF1bHQsIGhhc1Bhc3NpdmVFdmVudHMgPyB7IHBhc3NpdmU6IGZhbHNlIH0gOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIGRvY3VtZW50TGlzdGVuZXJBZGRlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2NrcyA9IGxvY2tzLmZpbHRlcihmdW5jdGlvbiAobG9jaykge1xuICAgICAgICByZXR1cm4gbG9jay50YXJnZXRFbGVtZW50ICE9PSB0YXJnZXRFbGVtZW50O1xuICAgICAgfSk7XG4gICAgICBpZiAoIWxvY2tzLmxlbmd0aCkge1xuICAgICAgICByZXN0b3JlT3ZlcmZsb3dTZXR0aW5nKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufSk7XG5cbiJdfQ==
